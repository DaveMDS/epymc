//// SCROLLER (elm/scroller/base/default) /////////////////////////////////////
#define SBSIZE 14
group { name: "elm/scroller/base/dialog";     // dialog text scroller
   alias: "elm/list/base/dialog";             // dialog lists
   alias: "elm/list/base/image_list";         // dialog lists (poster/fanart)
   alias: "elm/list/base/browser";            // Filemanager lists
   alias: "elm/list/base/emc_menu";           // EmcMenu
   alias: "elm/genlist/base/playlist";        // playlist genlist
   alias: "elm/genlist/base/dman";            // download manager genlist
   alias: "elm/genlist/base/browser";         // browser genlist
   alias: "elm/gengrid/base/browser";         // browser gengrid
   alias: "elm/scroller/entry/scrolledentry"; // EmcScrolledEntry
   // alias: "elm/scroller/entry_single/vkeyboard"; // EmcVKeyboard (TODO)

   data.item: "focus_highlight" "off";
   images {
      image: "sb_horiz_slider.png" COMP;
      image: "sb_vert_slider.png" COMP;
      image: "inset_bar_horiz_base.png" COMP;
      image: "inset_bar_horiz_light.png" COMP;
      image: "inset_bar_vert_base.png" COMP;
      image: "inset_bar_vert_light.png" COMP;
   }

   parts {
      program {
         signal: "load"; source: "";
         script {
            emit("reload", "elm");
         }
      }
      // vert bar /////
      part { name: "sb_vbar_show"; type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_vbar"; type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE 1;
            align: 1.0 0.0;
            rel1.relative: 1.0 0.0;
            rel1.offset: -1 0;
            rel2.relative: 1.0 0.0;
            rel2.to_y: "sb_hbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 99999;
         }
      }
      part { name: "sb_vbar_base"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 1.0;
            rel1.to: "sb_vbar_a1";
            rel2.relative: 1.0 0.0;
            rel2.to: "sb_vbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "sb_vbar_p1"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 1.0;
            rel1.to: "sb_vbar_a1";
            rel2.relative: 1.0 0.0;
            rel2.to: "elm.dragable.vbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_vbar_p2"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 1.0;
            rel1.to: "elm.dragable.vbar";
            rel2.relative: 1.0 0.0;
            rel2.to: "sb_vbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "elm.dragable.vbar"; type: RECT;
         clip_to: "sb_vbar";
         scale: 1;
         dragable.x: 0 0 0;
         dragable.y: 1 1 0;
         dragable.confine: "sb_vbar_base";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE SBSIZE;
            rel1.relative: 0.5  0.5;
            rel1.to: "sb_vbar_base";
            rel2.relative: 0.5  0.5;
            rel2.to: "sb_vbar_base";
            color: 0 0 0 0;
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_vbar_a1"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE 1;
            align: 0.5 0.0;
            color: 0 0 0 0;
            rel1.to: "sb_vbar";
            rel2.to: "sb_vbar";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_vbar_a2"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE 1;
            align: 0.5 1.0;
            color: 0 0 0 0;
            rel1.to: "sb_vbar";
            rel1.offset: 0 -1;
            rel1.relative: 0.0 1.0;
            rel2.to: "sb_vbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      program { signal: "elm,action,show,vbar"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sb_vbar";
         target: "sb_vbar_show";
         target: "elm.dragable.vbar";
         target: "sb_vbar_a1";
         target: "sb_vbar_a2";
      }
      program { signal: "elm,action,hide,vbar"; source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "sb_vbar";
         target: "sb_vbar_show";
         target: "elm.dragable.vbar";
         target: "sb_vbar_a1";
         target: "sb_vbar_a2";
      }
      program { signal: "mouse,down,1*"; source: "sb_vbar_p1";
         action: DRAG_VAL_PAGE 0.0 -1.0;
         target: "elm.dragable.vbar";
      }
      program { signal: "mouse,down,1*"; source: "sb_vbar_p2";
         action: DRAG_VAL_PAGE  0.0 1.0;
         target: "elm.dragable.vbar";
      }
      // horiz bar /////
      part { name: "sb_hbar_show"; type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_hbar"; type: RECT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 1 SBSIZE;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 -1;
            rel2.relative: 0.0 1.0;
            rel2.to_x: "sb_vbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 99999 0;
         }
      }
      part { name: "sb_hbar_base"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 1.0 0.0;
            rel1.to: "sb_hbar_a1";
            rel2.relative: 0.0 1.0;
            rel2.to: "sb_hbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "sb_hbar_p1"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 1.0 0.0;
            rel1.to: "sb_hbar_a1";
            rel2.relative: 0.0 1.0;
            rel2.to: "elm.dragable.hbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_hbar_p2"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 1.0 0.0;
            rel1.to: "elm.dragable.hbar";
            rel2.relative: 0.0 1.0;
            rel2.to: "sb_hbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "elm.dragable.hbar"; type: RECT;
         clip_to: "sb_hbar";
         scale: 1;
         dragable.x: 1 1 0;
         dragable.y: 0 0 0;
         dragable.confine: "sb_hbar_base";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE SBSIZE;
            rel1.relative: 0.5  0.5;
            rel1.to: "sb_hbar_base";
            rel2.relative: 0.5  0.5;
            rel2.to: "sb_hbar_base";
            color: 0 0 0 0;
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_hbar_a1"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 1 SBSIZE;
            align: 0.0 0.5;
            color: 0 0 0 0;
            rel1.to: "sb_hbar";
            rel2.to: "sb_hbar";
            rel2.relative: 0.0 1.0;
            rel2.offset: 0 -1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_hbar_a2"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 1 SBSIZE;
            align: 1.0 0.5;
            color: 0 0 0 0;
            rel1.to: "sb_hbar";
            rel1.offset: -1 0;
            rel1.relative: 1.0 0.0;
            rel2.to: "sb_hbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      program { signal: "elm,action,show,hbar"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sb_hbar";
         target: "sb_hbar_show";
         target: "elm.dragable.hbar";
         target: "sb_hbar_a1";
         target: "sb_hbar_a2";
      }
      program { signal: "elm,action,hide,hbar"; source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "sb_hbar";
         target: "sb_hbar_show";
         target: "elm.dragable.hbar";
         target: "sb_hbar_a1";
         target: "sb_hbar_a2";
      }
      program { signal: "mouse,down,1*"; source: "sb_hbar_p1";
         action: DRAG_VAL_PAGE -1.0 0.0;
         target: "elm.dragable.hbar";
      }
      program { signal: "mouse,down,1*"; source: "sb_hbar_p2";
         action: DRAG_VAL_PAGE  1.0 0.0;
         target: "elm.dragable.hbar";
      }
      // content /////
      part { name: "bg"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.background";
            rel2.to: "elm.swallow.background";
            color: 0 0 0 0;
            color_class: "scrollframe_base";
         }
      }
      part { name: "clipper"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.background";
            rel2.to: "elm.swallow.background";
         }
      }
      part { name: "elm.swallow.background"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel2.relative: 0.0 0.0;
            rel2.to_x: "sb_vbar";
            rel2.to_y: "sb_hbar";
         }
      }
      part { name: "elm.swallow.content"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel2.relative: 0.0 0.0;
            rel2.to_x: "sb_vbar";
            rel2.to_y: "sb_hbar";
         }
      }
      part { name: "elm.swallow.overlay"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
      }
      // bars images /////
      part { name: "hbar_bg_light";
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "hbar_bg";
            rel1.offset: 0 1;
            rel2.to: "hbar_bg";
            rel2.offset: -1 0;
            image {
               normal: "inset_bar_horiz_light.png";
               border: 32 32 0 0;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "hbar_bg"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "sb_hbar_a1";
            rel1.relative: 1.0 0.0;
            rel2.to: "sb_hbar_a2";
            rel2.relative: 0.0 1.0;
            color: 255 255 255 128;
            image {
               normal: "inset_bar_horiz_base.png";
               border: 32 32 0 0;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "hbar_slider"; mouse_events: 0;
         clip_to: "sb_hbar_show";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "elm.dragable.hbar";
               offset: 0 1;
            }
            rel2 {
               to: "elm.dragable.hbar";
               offset: -1 -2;
            }
            color: 255 255 255 128;
            image {
               normal: "sb_horiz_slider.png";
               border: 32 32 2 2;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "vbar_bg_light";
         mouse_events:  0;
         description { state: "default" 0.0;
            rel1.to: "vbar_bg";
            rel1.offset: 0 1;
            rel2.to: "vbar_bg";
            rel2.offset: -1 0;
            image {
               normal: "inset_bar_vert_light.png";
               border: 0 0 32 32;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "vbar_bg"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "sb_vbar_a1";
            rel1.relative: 0.0 1.0;
            rel2.to: "sb_vbar_a2";
            rel2.relative: 1.0 0.0;
            color: 255 255 255 128;
            image {
               normal: "inset_bar_vert_base.png";
               border: 0 0 32 32;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "vbar_slider"; mouse_events: 0;
         clip_to: "sb_vbar_show";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "elm.dragable.vbar";
               offset: 1 0;
            }
            rel2 {
               to: "elm.dragable.vbar";
               offset: -2 -1;
            }
            color: 255 255 255 128;
            image {
               normal: "sb_vert_slider.png";
               border: 2 2 32 32;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "dim_effect"; type: RECT; mouse_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "effect" 0.0;
            color: 50 50 50 255;
         }
      }
   }
   programs {
      program { signal: "mouse,down,1*"; source: "elm.dragable.vbar";
         action: STATE_SET "clicked" 0.0;
         target: "elm.dragable.vbar";
      }
      program { signal: "mouse,down,*"; source: "elm.dragable.vbar";
         action: SIGNAL_EMIT "elm,vbar,press" "elm";
      }
      program { signal: "mouse,up,1"; source: "elm.dragable.vbar";
         action: STATE_SET "default" 0.0;
         target: "elm.dragable.vbar";
      }
      program { signal: "mouse,up,*"; source: "elm.dragable.vbar";
         action: SIGNAL_EMIT "elm,vbar,unpress" "elm";
      }
      program { signal: "mouse,down,1*"; source: "elm.dragable.hbar";
         action: STATE_SET "clicked" 0.0;
         target: "elm.dragable.hbar";
      }
      program { signal: "mouse,down,*"; source: "elm.dragable.hbar";
         action: SIGNAL_EMIT "elm,hbar,press" "elm";
      }
      program { signal: "mouse,up,1"; source: "elm.dragable.hbar";
         action: STATE_SET "default" 0.0;
         target: "elm.dragable.hbar";
      }
      program { signal: "mouse,up,*"; source: "elm.dragable.hbar";
         action: SIGNAL_EMIT "elm,hbar,unpress" "elm";
      }
      program { signal: "elm,action,looping,left"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,left,done";
      }
      program { name: "looping,left,done";
         action: SIGNAL_EMIT "elm,looping,left,done" "elm";
      }
      program { signal: "elm,action,looping,left,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program { signal: "elm,action,looping,right"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,right,done";
      }
      program { name: "looping,right,done";
         action: SIGNAL_EMIT "elm,looping,right,done" "elm";
      }
      program { signal: "elm,action,looping,right,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program { signal: "elm,action,looping,up"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,up,done";
      }
      program { name: "looping,up,done";
         action: SIGNAL_EMIT "elm,looping,up,done" "elm";
      }
      program { signal: "elm,action,looping,up,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program { signal: "elm,action,looping,down"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,down,done";
      }
      program { name: "looping,down,done";
         action: SIGNAL_EMIT "elm,looping,down,done" "elm";
      }
      program { signal: "elm,action,looping,down,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
   }
}
#undef SBSIZE

//// IN-WIDGET FOCUS HIGHLIGHT MACROS /////////////////////////////////////////
#define FOCUS_HIGHLIGHT_INTRO() \
   images.image: "box_glow.png" COMP; \
   images.image: "box_outline.png" COMP; \
   data.item: "focus_highlight" "on";

#define FOCUS_HIGHLIGHT_PARTS(_R1_OFFSET, _R2_OFFSET) \
   image { "focus_hilight"; nomouse; \
      desc { "default"; \
         image.normal: "box_glow.png"; \
         image.border: 12 12 12 12; \
         image.middle: NONE; \
         rel1.offset: _R1_OFFSET; \
         rel2.offset: _R2_OFFSET; \
         fill.smooth: 0; \
         visible: 0; \
      } \
      desc { "visible"; \
         inherit: "default" 0.0; \
         visible: 1; \
      } \
   } \
   part { name: "focus_hilight_pulse"; nomouse; \
      description { state: "default" 0.0; \
         image.normal: "box_outline.png"; \
         image.border: 12 12 12 12; \
         image.middle: 0; \
         fill.smooth: 0; \
         rel1.to: "focus_hilight"; \
         rel2.to: "focus_hilight"; \
         color: 255 255 255 0; \
      } \
      description { state: "hi" 0.0; \
         inherit: "default" 0.0; \
         color: 255 255 255 150; \
      } \
   }

#define FOCUS_HIGHLIGHT_PROGRAMS(_SIG_ON, _SIG_OFF) \
   program { signal: _SIG_ON; source: "elm"; \
      action: STATE_SET "visible" 0.0; \
      target: "focus_hilight"; \
      after: "focus_pulse_start"; \
   } \
   program { signal: _SIG_OFF; source: "elm"; \
      action: STATE_SET "default" 0.0; \
      target: "focus_hilight"; \
      target: "focus_hilight_pulse"; \
      after: "focus_pulse_stop"; \
   } \
   program { name: "focus_pulse_start"; \
      action: STATE_SET "hi" 0.0; \
      target: "focus_hilight_pulse"; \
      after: "focus_pulse2"; \
   } \
   program { name: "focus_pulse1"; \
      action: STATE_SET "hi" 0.0; \
      transition: SINUSOIDAL 0.2; \
      in: 2.0 0.0; \
      target: "focus_hilight_pulse"; \
      after: "focus_pulse2"; \
   } \
   program { name: "focus_pulse2"; \
      action: STATE_SET "default" 0.0; \
      transition: SINUSOIDAL 0.4; \
      target: "focus_hilight_pulse"; \
      after: "focus_pulse1"; \
   } \
   program { name: "focus_pulse_stop"; \
      action: ACTION_STOP; \
      target: "focus_pulse_start"; \
      target: "focus_pulse1"; \
      target: "focus_pulse2"; \
   }

//// MAINMENU LISTS ///////////////////////////////////////////////////////////
group { name: "elm/list/base/mainmenu";         // Scroller for horizontal list
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
   }
}
group { name: "elm/list/base/mainmenu_sublist"; // Scroller for subitems list
   parts {
      part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.relative: -1.0 0.0;
            rel2.relative: 5.0 1.0;
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
         }
      }
   }
}
group { name: "elm/list/h_item/mainmenu";       // Main horizontal list item
   alias: "elm/list/h_item_odd/mainmenu";
   data.item: "selectraise" "on";
   data.item: "focusraise" "on";
   data.item: "focus_highlight" "on";
   parts {
      // DBG_SHOW("base", 0, 0, 100)
      // DBG_SHOW("icon_container", 0, 100, 0)
      part { name: "base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 128 128;
         }
      }
      part { name: "elm.text"; /* API */
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         effect: GLOW;
         description { state: "default" 0.0;
            visible: 0;
            color: FONT_COLOR;
            color2: FONT_COLOR3;
            color3: FONT_COLOR3;
            rel1.relative: 0.0 -1.0;
            rel2.relative: 1.0 0.0;
            text {
               font: FONT3;
               size: FONT_SIZE_BIGGER;
               ellipsis: -1;
               align: 0.5 1.0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "icon_container";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            FIXED_SIZE(128, 128)
            align: 0.5 0.0;
         }
      }
      part { name: "elm.swallow.icon"; /* API */
         type: SWALLOW;
         mouse_events: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            rel1.to: "icon_container";
            rel2.to: "icon_container";
            rel1.relative: 0.15 0.15;
            rel2.relative: 0.85 0.85;
            fixed: 1 1;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "sublist_clip";
         type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 0;
            rel1.relative: -1.0 0.0;
            rel2.relative: 5.0 1.0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "elm.swallow.end"; /* API */
         type: SWALLOW;
         clip_to: "sublist_clip";
         description { state: "default" 0.0;
            rel1.to: "icon_container";
            rel1.relative: 0.0 1.0;
            rel2.to: "base";
         }
      }
      program { signal: "elm,state,selected"; source: "elm"; /* API */
         action: STATE_SET "selected" 0.0;
         target: "elm.text";
         after: "selected2";
      }
      program { name: "selected2";
         action: STATE_SET "selected" 0.0;
         transition: LINEAR 0.2 CURRENT;
         target: "elm.swallow.icon";
         target: "sublist_clip";
      }
      program { signal: "elm,state,unselected"; source: "elm"; /* API */
         action: STATE_SET "default" 0.0;
         target: "elm.text";
         after: "unselected2";
      }
      program { name: "unselected2";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.2 CURRENT;
         target: "elm.swallow.icon";
         target: "sublist_clip";
      }
   }
}
group { name: "elm/list/item/mainmenu_sublist"; // Sub vertical list item
   alias: "elm/list/item_odd/mainmenu_sublist";
   data.item: "stacking" "above";
   data.item: "focus_highlight" "on";
   images {
      image: "menu_bg_submenu.png" COMP;
      image: "shine.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "bg";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            rel1 {
               offset: -5 0;
            }
            rel2 {
               offset: 6 -1;
            }
            image {
               normal: "menu_bg_submenu.png";
               border: 0 0 1 1;
            }
            image.middle: NONE;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon"; /* API */
         type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.5 0.5;
         }
      }
      part { name: "elm.swallow.end"; /* API */
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               relative: 1.0  0.0;
               offset:   -5    4;
            }
            rel2 {
               relative: 1.0  1.0;
               offset:   -5   -5;
            }
         }
      }
      part { name: "elm.text"; /* API */
         type: TEXT;
         effect: SOFT_SHADOW;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            color: FONT_COLOR;
            color3: FONT_COLOR3;
            text {
               font: FONT3;
               size: FONT_SIZE_BIG;
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
            }
         }
      }
      part { name: "shine"; nomouse;
         description { state: "default" 0.0;
            visible: 0;
            FIXED_SIZE(69, 5)
            rel1 {
               to: "bg";
            }
            rel2 {
               to: "bg";
               relative: 1.0 0.0;
            }
            image.normal: "shine.png";
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "bg";
         target:  "shine";
      }
      program { name: "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "bg";
         target:  "shine";
      }
   }
}

//// DIALOG LIST (big image without label) (elm/list/item/default) ////////////
group { name: "elm/list/item/image_list";
   alias: "elm/list/item_odd/image_list";
   alias: "elm/list/h_item/image_list";
   alias: "elm/list/h_item_odd/image_list";
   data.item: "stacking" "above";
   images {
      image: "bt_sm_base1.png" COMP;
      image: "bt_sm_shine.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sel_base";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            min: 300 300;
            color: 255 255 255 0;
            image {
               normal: "bt_sm_base1.png";
               border: 3 3 4 5;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 150;
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.5 0.5;
            rel1.offset: 10 10;
            rel2.offset: -11 -11;
         }
      }
      part { name: "sel_shine";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1.to: "sel_base";
            rel2.to: "sel_base";
            rel1.offset: -2 0;
            rel2.offset: 2 0;
            image {
               normal: "bt_sm_shine.png";
               border: 6 6 6 0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 255;
         }
      }
   }
   programs {
      program {
         name: "go_active";
         signal: "elm,state,selected";
         source: "elm";
         action: STATE_SET "selected" 0.0;
         target: "sel_base";
         target: "sel_shine";
      }
      program {
         name: "go_passive";
         signal: "elm,state,unselected";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sel_base";
         target: "sel_shine";
      }
   }
}

//// DIALOG LISTS (icons + text) (elm/list/item/default) //////////////////////
group { name: "elm/list/item/dialog";
   data.item: "selectraise" "on";
   images {
      image: "vgrad_med_dark.png" COMP;
      image: "shadow_rounded_horiz.png" COMP;
      image: "shine.png" COMP;
      image: "bevel_curved_horiz_out.png" COMP;
      image: "bevel_horiz_out.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "base";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 64 64 64 255;
         }
      }
      part { name: "bevel";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "bevel_curved_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
         }
      }
      part { name: "sel_shadow";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "shadow_rounded_horiz.png";
            image.border: 0 0 9 9;
            rel1.offset: 0 -4;
            rel2.offset: -1 5;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "sel_base";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "vgrad_med_dark.png";
            fill {
               smooth: 0;
               size {
                  relative: 0.0 1.0;
                  offset: 120 0;
               }
            }
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "sel_bevel"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "bevel_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0  0.0;
               offset:   4    4;
            }
            rel2 {
               relative: 0.0  1.0;
               offset:   4   -5;
            }
         }
      }
      part { name: "elm.swallow.end";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               relative: 1.0  0.0;
               offset:   -5    4;
            }
            rel2 {
               relative: 1.0  1.0;
               offset:   -5   -5;
            }
         }
      }
      part { name: "elm.text";
         clip_to: "disclip";
         type:           TEXTBLOCK;
         mouse_events:   0;
         scale: 1;
         description {
            state: "default" 0.0;
            rel1 {
               to_x:     "elm.swallow.icon";
               relative: 1.0  0.0;
               offset:   4 4;
            }
            rel2 {
               to_x:     "elm.swallow.end";
               relative: 0.0  1.0;
               offset:   -1 -5;
            }
            text {
               min: 0 1;
               align: 0.0 0.5;
               style: "epymc_dialog_list_style";
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            text.style: "epymc_dialog_list_style_sel";
         }
      }
      part { name: "sel_shine";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "shine.png";
            rel1.offset: 0 -2;
            rel1.to: "sel_base";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 2;
            rel2.to: "sel_base";
            min: 69 5;
            max: 69 5;
            fixed: 1 1;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "sel_base";
            rel2.to: "sel_base";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
   }
   programs {
      program {
         name:    "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "sel_base";
         target:  "sel_shine";
         target:  "sel_bevel";
         target:  "sel_shadow";
         target:  "elm.text";
      }
      program {
         name:    "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "sel_base";
         target:  "sel_shine";
         target:  "sel_bevel";
         target:  "sel_shadow";
         target:  "elm.text";
         transition: LINEAR 0.1;
      }
      program {
         name:    "go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program {
         name:    "go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
   }
}
group { name: "elm/list/item_odd/dialog";
   inherit: "elm/list/item/dialog";
   parts {
      part { name: "base";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 56 56 56 255;
         }
      }
   }
}
group { name: "elm/label/base/dia_list"; // end label inside dialog lists
   parts {
      part { name: "elm.text"; type: TEXTBLOCK;
         scale: 1;
         description { state: "default" 0.0;
            text {
               style: "epymc_dialog_list_style_end";
               min: 0 1;
            }
         }
      }
   }
}

//// FILEMANAGER LISTS (icon + text) (elm/list/item/default) //////////////////
group { name: "elm/list/item/browser"; alias: "elm/list/item_odd/browser";
   data.item: "selectraise" "on";
   images.image: "vgrad_med_dark.png" COMP;
   images.image: "shadow_rounded_horiz.png" COMP;
   images.image: "shine.png" COMP;
   images.image: "bevel_curved_horiz_out.png" COMP;
   images.image: "bevel_horiz_out.png" COMP;
   FOCUS_HIGHLIGHT_INTRO()

   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sep";
         type: IMAGE;
         description { state: "default" 0.0;
            max: 99999 2;
            align: 0.5 1.0;
            image.normal: "separator.png";
         }
      }
      part { name: "bg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 100;
            image {
               normal: "list_item_sel_bg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0  0.0;
               offset:   4    4;
            }
            rel2 {
               relative: 0.0  1.0;
               offset:   4   -5;
            }
         }
      }
      part { name: "elm.swallow.end";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               relative: 1.0  0.0;
               offset:   -5    4;
            }
            rel2 {
               relative: 1.0  1.0;
               offset:   -5   -5;
            }
         }
      }
      part { name: "elm.text";
         clip_to: "disclip";
         type: TEXT;
         mouse_events:   0;
         scale: 1;
         description {
            state: "default" 0.0;
            rel1 {
               to_x:     "elm.swallow.icon";
               relative: 1.0  0.0;
               offset:   4 4;
            }
            rel2 {
               to_x:     "elm.swallow.end";
               relative: 0.0  1.0;
               offset:   -1 -5;
            }
            color: FONT_COLOR;
            text {
               font: FONT;
               size: FONT_SIZE;
               min: 0 1;
               align: 0.0 0.5;
               text_class: "list_item";
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "fg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 100;
            rel1.to: "bg";
            rel2.to: "bg";
            rel2.relative: 1.0 0.5;
            image {
               normal: "list_item_sel_fg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
      FOCUS_HIGHLIGHT_PARTS(-7 -7, 5 5)
   }
   programs {
      program { name: "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "elm.text";
         target:  "bg";
         target:  "fg";
      }
      program { name: "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.1;
         target:  "elm.text";
         target:  "bg";
         target:  "fg";
         
      }
      program { name: "go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name: "go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
      FOCUS_HIGHLIGHT_PROGRAMS("elm,state,focused", "elm,state,unfocused")
   }
}

//// BROWSER GENLIST ITEM (elm/genlist/item_compress/default/default) /////////
group { name: "elm/genlist/item_compress/default/browser";
   data.item: "selectraise" "on";
   data.item: "focusraise" "on";
   data.item: "texts" "elm.text.main elm.text.end";
   data.item: "contents" "elm.swallow.icon elm.swallow.end";
   // data.item: "treesize" 16;
   // data.item: "flips" "elm.text.flip";
   images.image: "list_item_sel_bg.png" COMP;
   images.image: "list_item_sel_fg.png" COMP;
   images.image: "separator.png" COMP;
   FOCUS_HIGHLIGHT_INTRO()

   script {
      public g_duration, g_stopslide, g_timer_id, g_anim_id;
      
      public calc_duration() {
         new x, y, h, tw, cw;
         new Float:duration;
         new Float:width;
         get_geometry(PART:"elm.text.main", x, y, tw, h);
         get_geometry(PART:"text_clip", x, y, cw, h);
         width = tw - cw;
         duration = width / 50;
         set_float(g_duration, duration);
      }
      
      public slide_to_end_anim(val, Float:pos) {
         new stopflag;
         new id;
         stopflag = get_int(g_stopslide);
         if (stopflag == 1) return;
         set_tween_state(PART:"elm.text.main", pos, "slide_begin", 0.0, "slide_end", 0.0);
         if (pos >= 1.0) {
            id = timer(0.5, "slide_to_begin", 1);
            set_int(g_timer_id, id);
         }
      }
      public slide_to_begin() {
         new stopflag;
         new id;
         stopflag = get_int(g_stopslide);
         if (stopflag == 1) return;
         set_state(PART:"elm.text.main", "slide_begin", 0.0);
         id = timer(0.5, "slide_to_end", 1);
         set_int(g_timer_id, id);
      }
      public slide_to_end() {
         new stopflag;
         new id;
         stopflag = get_int(g_stopslide);
         if (stopflag == 1) return;
         id = anim(get_float(g_duration), "slide_to_end_anim", 1);
         set_int(g_anim_id, id);
      }
      public start_slide() {
         set_int(g_stopslide, 0);
         set_state(PART:"elm.text.main", "slide_begin", 0.0);
         calc_duration();
         slide_to_end();
      }
      public stop_slide() {
         new id;
         set_int(g_stopslide, 1);
         id = get_int(g_anim_id);
         cancel_anim(id);
         id = get_int(g_timer_id);
         cancel_timer(id);
         set_state(PART:"elm.text.main", "default", 0.0);
      }
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sep";
         type: IMAGE;
         description { state: "default" 0.0;
            max: 99999 2;
            align: 0.5 1.0;
            image.normal: "separator.png";
         }
      }
      part { name: "bg";
         scale: 1;
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 200 42;
            visible: 0;
            color: 255 255 255 100;
            image {
               normal: "list_item_sel_bg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         scale: 1;
         /* This should be enough, but the genlist cache mechanism will remember
          * the status of icons from previous item usage, so we need to force
          * the show/hide of icons everytime the item is realized.
          */
         // description { state: "default" 0.0;
         //   rel2.relative: 0.0 1.0;
         //   align: 0.0 0.5;
         // }
         description { state: "default" 0.0;
            FIXED_SIZE(1, 40)
            align: 0.0 0.5;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            FIXED_SIZE(40, 40)
         }
      }
      part { name: "elm.swallow.end";
         type: SWALLOW;
         scale: 1;
         /* see note for "elm.swallow.icon" */
         // description { state: "default" 0.0;
         //    rel1.relative: 1.0 0.0;
         //    align: 1.0 0.5;
         //}
         description { state: "default" 0.0;
            FIXED_SIZE(1, 40)
            align: 1.0 0.5;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            FIXED_SIZE(40, 40)
         }
      }
      part { name: "elm.text.end";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "elm.swallow.end";
               relative: 0.0 0.0;
               offset: -5 0;
            }
            rel2 {
               to: "elm.swallow.end";
               relative: 0.0 1.0;
               offset: -6 -1;
            }
            align: 1.0 0.5;
            color: FN_COL_DISABLE;
            text {
               font: FONT;
               size: (FONT_SIZE - 2);
               min: 1 0;
               ellipsis: -1;
            }
         }
      }
      part { name: "text_clip";
         type: RECT;
         description { state: "default" 0.0;
            rel1 {
               to_x: "elm.swallow.icon";
               relative: 1.0  0.0;
               offset: 1  1;
            }
            rel2 {
               to_x: "elm.text.end";
               relative: 0.0  1.0;
               offset: -1  -1;
            }
         }
      }
      part { name: "elm.text.main";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         clip_to: "text_clip";
         description { state: "default" 0.0;
            rel1.to: "text_clip";
            rel2.to: "text_clip";
            text {
               style: "epymc_browser_slide_style";
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
            }
            align: 0.0 0.5;
         }
         description { state: "slide_begin" 0.0;
            inherit: "default" 0.0;
            align: 0.0 0.5;
         }
         description { state: "slide_end" 0.0;
            inherit: "default" 0.0;
            align: 1.0 0.5;
         }
      }
      // DBG_SHOW("elm.swallow.icon", 80, 80, 0)
      // DBG_SHOW("elm.swallow.end", 80, 0, 80)
      // DBG_SHOW("elm.text.end", 0, 80, 0)
      // DBG_SHOW("text_clip", 0, 80, 80)//DBG_SHOW("elm.text.main", 0, 80, 80)
      part { name: "fg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 100;
            rel1.to: "bg";
            rel2.to: "bg";
            rel2.relative: 1.0 0.5;
            image {
               normal: "list_item_sel_fg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
      FOCUS_HIGHLIGHT_PARTS(-7 -7, 5 5)
   }
   programs {
      program { name:"go_active";
         signal:  "elm,state,selected"; source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "bg";
         target:  "fg";
      }
      program { name:"go_passive";
         signal:  "elm,state,unselected"; source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "bg";
         target:  "fg";
      }
      program { name: "start_slide";
         signal: "elm,state,selected"; source: "elm";
         script {
            start_slide();
         }
      }
      program { name: "stop_slide";
         signal: "elm,state,unselected"; source: "elm";
         script {
            stop_slide();
         }
      }
      program { name:"go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name:"go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
      program { signal: "icon,show"; source: "emc";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.icon";
      }
      program { signal: "icon,hide"; source: "emc";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.icon";
      }
      program { signal: "end,show"; source: "emc";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.end";
      }
      program { signal: "end,hide"; source: "emc";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.end";
      }
      FOCUS_HIGHLIGHT_PROGRAMS("elm,state,focused", "elm,state,unfocused")
   }
}
group { name: "elm/genlist/item/group_index/browser"; nomouse; program_source: "elm";
   data.item: "texts" "elm.text";
   data.item: "contents" "elm.swallow.icon elm.swallow.end";
   // data.item: "treesize" TREEPAD;
   
   images.image: "vgrad_med_dark.png" COMP;
   images.image: "shadow_square_tiny.png" COMP;
   images.image: "bevel_out.png" COMP;

   parts {
      image { "shadow_vbar";
         desc { "default";
            rel1.offset: -3 -2;
            rel1.to: "base_vbar";
            rel2.offset: 2 4;
            rel2.to: "base_vbar";
            image.normal: "shadow_square_tiny.png";
            image.border: 6 6 6 6;
            fill.smooth: 0;
         }
      }
      image { "base_vbar";
         desc { "default";
            image.normal: "vgrad_med_dark.png";
            fill.smooth: 0;
            min: 5 13;
            TILED_HORIZ(120)
            color: 255 255 255 200;
         }
      }
      image { "bevel_vbar";
         desc { "default";
            rel1.to: "base_vbar";
            rel2.to: "base_vbar";
            image.normal: "bevel_out.png";
            image.border: 1 1 1 1;
            image.middle: 0;
            fill.smooth: 0;
            min: 5 5;
         }
      }

      text { "elm.text";
         effect: SHADOW BOTTOM;
         scale;
         desc { "default";
            rel1.offset: 2 3;
            rel1.relative: 1.0 0.0;
            rel1.to_x: "elm.swallow.icon";
            rel2.offset: -3 -3;
            rel2.relative: 0.0 1.0;
            rel2.to_x: "elm.swallow.end";
            color: FONT_COLOR;
            color_class: "list_group_item";
            text { font: FONT; size: FONT_SIZE;
               // min: 1 1;
               // ellipsis: -1;
               ellipsis: 0.0;
               align: 0.5 0.5;
               text_class: "list_group_item";
            }
            link.base: "elm,state,enabled";
         }
         desc { "disabled";
            inherit: "default";
            color: FN_COL_DISABLE;
            color_class: "list_group_item_disabled";
            link.base: "elm,state,disabled";
         }
      }
      swallow { "elm.swallow.pad"; mouse;
         desc { "default";
            fixed: 1 0;
            align: 0.0 0.5;
            rel1.offset: 2 2;
            rel2.relative: 0.0 1.0;
            rel2.offset: 2 -3;
         }
      }
      swallow { "elm.swallow.icon"; mouse;
         desc { "default";
            fixed: 1 0;
            align: 0.0 0.5;
            rel1.to_x: "elm.swallow.pad";
            rel1.relative: 1.0 0.0;
            rel1.offset: -1 2;
            rel2.to_x: "elm.swallow.pad";
            rel2.relative: 1.0 1.0;
            rel2.offset: -1 -3;
         }
      }
      swallow { "elm.swallow.end"; mouse;
         desc { "default";
            fixed: 1 0;
            align: 1.0 0.5;
            rel1.offset: -3 2;
            // rel1.relative: 1.0 0.0;
            rel2.offset: -3 -3;
            aspect: 1 1; aspect_preference: BOTH;
            
         }
      }
   }
}
group { name: "elm/genlist/item_compress/group_index/browser"; nomouse;
   inherit: "elm/genlist/item/group_index/browser";
   parts {
      text { "elm.text";
         desc { "default";
            text.min: 0 1;
         }
         desc { "selected";
            text.min: 0 1;
         }
         desc { "disabled";
            text.min: 0 1;
         }
         desc { "flip_enabled";
            text.min: 0 1;
         }
      }
   }
}

//// BROWSER GENGRID ITEM (elm/gengrid/item/default/default) //////////////////
group { name: "elm/gengrid/item/default/browser";
   data.item: "texts" "elm.text";
   data.item: "contents" "elm.swallow.icon elm.swallow.end";
   images.image: "bt_sm_base1.png" COMP;
   images.image: "bt_sm_shine.png" COMP;
   images.image: "bt_sm_hilight.png" COMP;
   FOCUS_HIGHLIGHT_INTRO()

   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "bg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1 {
               relative: 0.0 0.0;
               offset: -5 -5;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: 4 4;
            }
            image {
               normal: "bt_sm_base1.png";
               border: 6 6 6 6;
            }
            image.middle: SOLID;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 100;
            rel1 {
               relative: 0.0 0.0;
               offset: -2 -2;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: 1 1;
            }
         }
      }
      FOCUS_HIGHLIGHT_PARTS(-6 -6, 5 5)
      part { name: "elm.swallow.pad";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0  1.0;
               offset:   0    -10;
            }
            rel2 {
               to_y: "elm.text";
               relative: 0.0  0.0;
               offset:   -1   -1;
            }
         }
      }
      part { name: "elm.swallow.icon";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.offset: 6 6;
            rel2.offset: -7 -7;
         }
      }
      part { name: "elm.swallow.end";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            rel1.relative: 0.6 -0.05;
            rel2.relative: 1.1  0.5;
            align: 1.0 0.0;
            aspect: 1 1;
            aspect_preference: BOTH;
         }
      }
      part { name: "elm.text";
         clip_to: "disclip";
         type: TEXTBLOCK;
         effect: SOFT_SHADOW;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
               to: "elm.swallow.icon";
               relative: 0.0  0.5;
            }
            rel2 {
               to: "elm.swallow.icon";
            }
            color: FONT_COLOR;
            color3: FONT_COLOR3;
            text {
               style: "epymc_browser_grid_style";
               align: 0.5 1.0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "fg1";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1.to: "bg";
            rel2.relative: 1.0 0.5;
            rel2.to: "bg";
            image {
               normal: "bt_sm_hilight.png";
               border: 6 6 6 0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 100;
         }
      }
      part { name: "fg2";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1.to: "bg";
            rel2.to: "bg";
            image {
               normal: "bt_sm_shine.png";
               border: 6 6 6 0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 100;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.relative: -0.2 -0.2;
            rel2.relative:  1.2  1.2;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
   }
   programs {
      // signal: elm,state,%s,active
      //   a "check" item named %s went active
      // signal: elm,state,%s,passive
      //   a "check" item named %s went passive
      // default is passive
      program { name:    "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "bg";
         target:  "fg1";
         target:  "fg2";
         target:  "elm.text";
      }
      program { name:    "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "bg";
         target:  "fg1";
         target:  "fg2";
         target:  "elm.text";
      }
      program { name:    "go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name:    "go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
      FOCUS_HIGHLIGHT_PROGRAMS("elm,state,focused", "elm,state,unfocused")
   }
}
group { name: "elm/gengrid/item/group_index/browser";
   inherit: "elm/genlist/item/group_index/browser";
}

//// PLAYLIST GENLIST ITEM (elm/genlist/item_compress/default/default) ////////
group { name: "elm/genlist/item_compress/default/playlist";
   data.item: "selectraise" "on";
   data.item: "focusraise" "on";
   data.item: "texts" "elm.text.tracknum elm.text.title elm.text.artist elm.text.len";
   // data.item: "contents" "elm.swallow.icon elm.swallow.end";
   // data.item: "treesize" 16;
   // data.item: "flips" "elm.text.flip";
   images.image: "separator.png" COMP;
   images.image: "vgrad_med_dark.png" COMP;
   images.image: "shadow_rounded_horiz.png" COMP;
   images.image: "bevel_horiz_out.png" COMP;
   FOCUS_HIGHLIGHT_INTRO()

   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sep";
         type: IMAGE;
         description { state: "default" 0.0;
            max: 99999 2;
            align: 0.5 1.0;
            image.normal: "separator.png";
         }
      }
      part { name: "shadow"; nomouse;
         description { state: "default" 0.0;
            image.normal: "shadow_rounded_horiz.png";
            image.border: 0 0 9 9;
            rel1.offset: 0 -4;
            rel2.offset: -1 5;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "bg"; nomouse; scale;
         clip_to: "disclip";
         description { state: "default" 0.0;
            min: 200 50;
            image.normal: "vgrad_med_dark.png";
            fill.smooth: 0;
            TILED_HORIZ(120)
            visible: 0;
            rel1.offset: 0 -1;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.text.tracknum"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            aspect: 1.0 0.8; aspect_preference: VERTICAL;
            align: 0.0 0.5;
            color: COLOR_WHITE 255;
            text {
               font: FONT;
               size: FONT_SIZE_SMALL;
            }
         }
      }
      part { name: "elm.text.title"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text.tracknum";
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 0.5;
            color: COLOR_WHITE 255;
            text {
               font: FONT;
               size: FONT_SIZE;
               align: 0.0 0.5;
            }
         }
      }
      part { name: "elm.text.artist"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text.tracknum";
            rel1.relative: 1.0 0.5;
            rel2.to: "elm.text.len";
            rel2.relative: 0.0 1.0;
            rel2.offset: -6 -1;
            color: COLOR_GRAY 255;
            text {
               font: FONT;
               size: FONT_SIZE_SMALL;
               align: 0.0 0.5;
            }
         }
      }
      part { name: "elm.text.len"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.relative: 1.0 0.5;
            rel2.relative: 1.0 1.0;
            rel2.offset: -6 -1;
            color: COLOR_GRAY 255;
            align: 1.0 0.0;
            text {
               font: FONT;
               size: FONT_SIZE_SMALL;
               align: 0.0 0.5;
               min: 1 0;
               ellipsis: -1;
            }
         }
      }
      // DBG_SHOW("elm.text.tracknum", 0, 80, 0)
      // DBG_SHOW("elm.text.title", 80, 0, 0)
      // DBG_SHOW("elm.text.artist", 0, 0, 80)
      part { name: "bevel"; nomouse;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "bevel_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "shine"; nomouse;
         // repeat_events: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel2.relative: 1.0 0.0;
            image.normal: "shine.png";
            visible: 0;
            FIXED_SIZE(69, 5)
         }
         description { state: "selected" 0.0;
            inherit:  "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip"; type: RECT; nomouse;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
      FOCUS_HIGHLIGHT_PARTS(-7 -7, 5 5)
   }
   programs {
      program { name:"go_active";
         signal:  "elm,state,selected"; source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "shadow";
         target:  "bg";
         target:  "bevel";
         target:  "shine";
      }
      program { name:"go_passive";
         signal:  "elm,state,unselected"; source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "shadow";
         target:  "bg";
         target:  "bevel";
         target:  "shine";
      }
      program { name:"go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name:"go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
      FOCUS_HIGHLIGHT_PROGRAMS("elm,state,focused", "elm,state,unfocused")
   }
}

//// DOWNLOAD MANAGER GENLIST ITEM (elm/genlist/item_compress/default/default) /
group { name: "elm/genlist/item_compress/default/dman";
   data.item: "selectraise" "on";
   data.item: "focusraise" "on";
   data.item: "texts" "elm.text.fname elm.text.folder elm.text.progress elm.text.status";
   // data.item: "contents" "elm.swallow.icon elm.swallow.end";
   // data.item: "treesize" 16;
   // data.item: "flips" "elm.text.flip";
   images.image: "separator.png" COMP;
   images.image: "vgrad_med_dark.png" COMP;
   images.image: "shadow_rounded_horiz.png" COMP;
   images.image: "bevel_horiz_out.png" COMP;
   // FOCUS_HIGHLIGHT_INTRO()

   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sep";
         type: IMAGE;
         description { state: "default" 0.0;
            max: 99999 2;
            align: 0.5 1.0;
            image.normal: "separator.png";
         }
      }
      part { name: "shadow"; nomouse;
         description { state: "default" 0.0;
            image.normal: "shadow_rounded_horiz.png";
            image.border: 0 0 9 9;
            rel1.offset: 0 -4;
            rel2.offset: -1 5;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "bg"; nomouse; scale;
         clip_to: "disclip";
         description { state: "default" 0.0;
            min: 200 50;
            image.normal: "vgrad_med_dark.png";
            fill.smooth: 0;
            TILED_HORIZ(120)
            visible: 0;
            rel1.offset: 0 -1;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      // // // // // // // // // // // // // // // // // // // // // // // // 
      part { name: "elm.text.fname"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            // rel1.to: "elm.text.tracknum";
            // rel1.relative: 1.0 0.0;
            rel1.offset: 5 0;
            rel2.to_x: "elm.text.progress";
            rel2.relative: 0.0 0.55;
            rel2.offset: -6 -1;
            color: COLOR_WHITE 255;
            text {
               font: FONT;
               size: FONT_SIZE;
               align: 0.0 0.5;
            }
         }
      }
      part { name: "elm.text.folder"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.relative: 0.0 0.55;
            rel1.offset: 5 0;
            rel2.to_x: "elm.text.progress";
            rel2.relative: 0.0 1.0;
            rel2.offset: -6 -1;
            color: COLOR_GRAY 255;
            text {
               font: FONT;
               size: FONT_SIZE_SMALL;
               align: 0.0 0.5;
            }
         }
      }
      part { name: "elm.text.progress"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
            rel2.offset: -6 -1;
            color: COLOR_GRAY 255;
            align: 1.0 0.0;
            text {
               font: FONT;
               size: FONT_SIZE;
               align: 0.0 1.0;
               min: 1 0;
               ellipsis: -1;
            }
         }
      }
      part { name: "elm.text.status"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text.progress";
            rel2.to: "elm.text.progress";
            color: COLOR_GRAY 255;
            text {
               font: FONT;
               size: FONT_SIZE_SMALL;
               align: 1.0 0.0;
               min: 1 0;
               ellipsis: -1;
            }
         }
      }
      // DBG_SHOW("elm.text.fname", 0, 80, 0)
      // DBG_SHOW("elm.text.folder", 80, 0, 0)
      // DBG_SHOW("elm.text.progress", 0, 0, 80)
      // // // // // // // // // // // // // // // // // // // // // // // // 
      part { name: "bevel"; nomouse;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "bevel_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "shine"; nomouse;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel2.relative: 1.0 0.0;
            image.normal: "shine.png";
            visible: 0;
            FIXED_SIZE(69, 5)
         }
         description { state: "selected" 0.0;
            inherit:  "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip"; type: RECT; nomouse;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
      // FOCUS_HIGHLIGHT_PARTS(-7 -7, 5 5)
   }
   programs {
      program { name:"go_active";
         signal:  "elm,state,selected"; source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "shadow";
         target:  "bg";
         target:  "bevel";
         target:  "shine";
      }
      program { name:"go_passive";
         signal:  "elm,state,unselected"; source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "shadow";
         target:  "bg";
         target:  "bevel";
         target:  "shine";
      }
      program { name:"go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name:"go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
      // FOCUS_HIGHLIGHT_PROGRAMS("elm,state,focused", "elm,state,unfocused")
   }
}

//// SCROLLED ENTRY (elm/entry/base-noedit/default) ///////////////////////////
group { name: "elm/entry/base-noedit/scrolledentry";
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         multiline: 1;
         source: "elm/entry/selection/emc"; // selection under
         source5: "elm/entry/anchor/emc"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "epymc_default_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/selection/emc";
   parts {
      part { name: "bg";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 128 128 128 128;
         }
      }
   }
}
group { name: "elm/entry/anchor/emc";
   parts {
      part { name: "bg";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 128 0 0 64;
         }
      }
   }
}

//// MENU (ctxpopup + list + separator) ///////////////////////////////////////
group { name: "elm/ctxpopup/bg/emc_menu";
   parts {
      part { name: "base"; type: RECT;
         description { state: "default";
            color: 0 0 0 0;
         }
         description { state: "visible";
            inherit: "default" 0.0;
            color: 0 0 0 192;
         }
      }
   }
   programs {
      program { signal: "mouse,clicked,*"; source: "base";
         action: SIGNAL_EMIT "elm,action,click" "elm";
      }
      program { signal: "elm,state,show"; source: "elm";
         action: STATE_SET "visible" 0.0;
         transition: LINEAR 0.2;
         target: "base";
      }
      program { signal: "elm,state,hide"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.2;
         target: "base";
      }
   }
}
group { name: "elm/ctxpopup/base/emc_menu";
   images {
      image: "bevel_out.png" COMP;
      image: "shine.png" COMP;
      image: "vgrad_med_lighter.png" COMP;
      image: "win_shadow.png" COMP;
   }
   parts {
      part { name: "shadow";
         clip_to: "clip";
         description { state: "default";
            image.normal: "win_shadow.png";
            image.border: 14 14 14 14;
            image.middle: 0;
            rel1.offset: -7  -3;
            rel2.offset: 6 11;
            fill.smooth: 0;
         }
      }
      part { name: "bg"; type: RECT;
         clip_to: "clip";
         description { state: "default";
           color: 64 64 64 255;
         }
      }
      part { name: "top";
         clip_to: "clip";
         description { state: "default";
            image.normal: "vgrad_med_lighter.png";
            rel2.to_y: "shine";
            rel2.offset: -1 0;
            min: 0 23;
            align: 0.0 0.0;
            fill.smooth: 0;
            TILED_HORIZ(120)
            fixed: 0 1;
         }
      }
      part { name: "bevel";
         clip_to: "clip";
         description { state: "default";
            image.normal: "bevel_out.png";
            image.border: 1 1 1 1;
            image.middle: 0;
            fill.smooth: 0;
         }
      }
      part { name: "shine";
         clip_to: "clip";
         description { state: "default";
            rel1.offset: 0 -2;
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 2;
            image.normal: "shine.png";
            FIXED_SIZE(69, 5)
         }
      }
      part { name: "elm.swallow.content"; type: SWALLOW;
         clip_to: "clip";
         description { state: "default";
            rel1.offset: 0 4;
            rel2.offset: -1 -3;
         }
      }
      part { name: "event"; type: RECT;
         description { state: "default";
            color: 0 0 0 0;
            visible: 1;
         }
         description { state: "visible";
            inherit: "default";
            visible: 0;
         }
      }
      part { name: "clip"; type: RECT;
         description { state: "default";
            rel1.offset: -11 -11;
            rel2.offset: 12 12;
            color: 255 255 255 0;
            visible: 0;
         }
         description { state: "visible";
            inherit: "default";
            color: 255 255 255 255;
            visible: 1;
         }
      }
   }
   programs {
      program { signal: "elm,state,show"; source: "elm";
         action: STATE_SET "visible" 0.0;
         transition: LINEAR 0.2;
         target: "clip";
         target: "event";
      }
      program { signal: "elm,state,hide"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.2;
         target: "clip";
         target: "event";
         after: "hide2";
      }
      program { name: "hide2";
         action: SIGNAL_EMIT "elm,action,hide,finished" "elm";
      }
   }
}
group { name: "elm/list/item/emc_menu";
   alias: "elm/list/item_odd/emc_menu";
   data.item: "selectraise" "on";
   data.item: "focus_highlight" "on";
   images {
      image: "vgrad_med_dark.png" COMP;
      image: "shadow_rounded_horiz.png" COMP;
      image: "shine.png" COMP;
      image: "bevel_horiz_out.png" COMP;
   }
   parts {
      part { name: "event"; type: RECT;
         repeat_events: 1;
         description { state: "default";
            color: 0 0 0 0;
         }
      }
      part { name: "sel_shadow";
         mouse_events: 0;
         description { state: "default";
            image.normal: "shadow_rounded_horiz.png";
            image.border: 0 0 9 9;
            rel1.offset: 0 -4;
            rel2.offset: -1 5;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected";
            inherit: "default";
            visible: 1;
         }
      }
      part { name: "sel_base";
         mouse_events: 0;
         description { state: "default";
            image.normal: "vgrad_med_dark.png";
            fill {
               smooth: 0;
               size {
                  relative: 0.0 1.0;
                  offset: 120 0;
               }
            }
            visible: 0;
         }
         description { state: "selected";
            inherit: "default";
            visible: 1;
         }
      }
      part { name: "sel_bevel"; mouse_events: 0;
         description { state: "default";
            image.normal: "bevel_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected";
            inherit: "default";
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon"; type: SWALLOW;
         clip_to: "disclip";
         description { state: "default";
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0  0.0;
               offset:   4    4;
            }
            rel2 {
               relative: 0.0  1.0;
               offset:   4   -5;
            }
         }
      }
      part { name: "elm.swallow.end"; type: SWALLOW;
         clip_to: "disclip";
         description { state: "default";
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               relative: 1.0  0.0;
               offset:   -5    4;
            }
            rel2 {
               relative: 1.0  1.0;
               offset:   -5   -5;
            }
         }
      }
      part { name: "elm.text"; type: TEXTBLOCK;
         clip_to: "disclip";
         mouse_events:   0;
         scale: 1;
         description { state: "default";
            rel1 {
               to_x:     "elm.swallow.icon";
               relative: 1.0  0.0;
               offset:   4 4;
            }
            rel2 {
               to_x:     "elm.swallow.end";
               relative: 0.0  1.0;
               offset:   -5 -5;
            }
            text {
               min: 1 1;
               align: 0.0 0.5;
               style: "epymc_dialog_list_style";
            }
         }
         description { state: "selected";
            inherit: "default";
            text.style: "epymc_dialog_list_style_sel";
         }
      }
      part { name: "sel_shine";
         mouse_events: 0;
         description { state: "default";
            image.normal: "shine.png";
            rel1.offset: 0 -2;
            rel1.to: "sel_base";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 2;
            rel2.to: "sel_base";
            min: 69 5;
            max: 69 5;
            fixed: 1 1;
            visible: 0;
         }
         description { state: "selected";
            inherit: "default";
            visible: 1;
         }
      }
      part { name: "disclip"; type: RECT;
         description { state: "default";
            rel1.to: "sel_base";
            rel2.to: "sel_base";
         }
         description { state: "disabled";
            inherit: "default";
            color: 255 255 255 64;
         }
      }
   }
   programs {
      program { name: "go_active";
         signal: "elm,state,selected";
         source: "elm";
         action: STATE_SET "selected" 0.0;
         target: "sel_base";
         target: "sel_shine";
         target: "sel_bevel";
         target: "sel_shadow";
         target: "elm.text";
      }
      program { name: "go_passive";
         signal: "elm,state,unselected";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sel_base";
         target: "sel_shine";
         target: "sel_bevel";
         target: "sel_shadow";
         target: "elm.text";
      }
      program { name: "go_disabled";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "disclip";
      }
      program { name: "go_enabled";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "disclip";
      }
   }
}
group { name: "elm/separator/horizontal/emc_menu";
   images.image: "separator_horiz.png" COMP;
   parts {
      part { name: "separator";
         description { state: "default";
            min: 2 2;
            rel1.offset: 0 2;
            rel2.offset: -1 -3;
            image.normal: "separator_horiz.png";
            fill.smooth: 0;
         }
      }
   }
}

//// VKEYBOARD ENTRY (elm/entry/base-single/default) //////////////////////////
group { name: "elm/entry/base-single/vkeyboard";
   images.image: "box_glow.png" COMP;
   FOCUS_HIGHLIGHT_INTRO()
   parts {
      FOCUS_HIGHLIGHT_PARTS(-8 -7, 7 6)
      part { name: "elm.text";
         scale: 1;
         type: TEXTBLOCK;
         entry_mode: EDITABLE;
         select_mode: DEFAULT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/vkeyboard"; // selection under
         source4: "elm/entry/cursor/vkeyboard"; // cursorover
         description { state: "default" 0.0;
            rel1.offset: 3 2;
            rel2.offset: -4 -3;
            text {
               style: "epymc_default_style";
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
            }
         }
      }
      program {
         signal: "load"; source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      FOCUS_HIGHLIGHT_PROGRAMS("elm,action,focus", "elm,action,unfocus")
   }
}
group { name: "elm/entry/selection/vkeyboard";
   parts {
      part { name: "base"; type: RECT;
         description { state: "default" 0.0;
            color: 51 153 255 255;
         }
      }
   }
}
group { name: "elm/entry/cursor/vkeyboard";
   min: 1 0;
   images.image: "white_bar_vert_glow.png" COMP;
   parts {
      part { name: "cursor"; mouse_events: 0;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1.offset: -4 -4;
            rel2.offset: 3 3;
            image.normal: "white_bar_vert_glow.png";
            image.border: 4 4 4 4;
            fill.smooth: 0;
            color: 255 255 255 0;
            color_class: "entry_cursor";
            min: 9 10;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "clipper"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "cursor";
            rel2.to: "cursor";
            fixed: 1 1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
   }
   programs {
      program {
         signal: "selection,changed"; source: "elm.text";
         action: STATE_SET "hidden" 0.0;
         target: "clipper";
      }
      program {
         signal: "selection,cleared"; source: "elm.text";
         action: STATE_SET "default" 0.0;
         target: "clipper";
      }
      program {
         signal: "selection,reset"; source: "elm.text";
         action: STATE_SET "default" 0.0;
         target: "clipper";
      }
      program {
         signal: "elm,action,focus"; source: "elm";
         action: ACTION_STOP;
         target: "cursor_show";
         target: "cursor_hide";
         target: "cursor_show_timer";
         target: "cursor_hide_timer";
         after: "cursor_show";
      }
      // program {
      //    signal: "elm,action,unfocus"; source: "elm";
      //    action: ACTION_STOP;
      //    target: "cursor_show";
      //    target: "cursor_hide";
      //    target: "cursor_show_timer";
      //    target: "cursor_hide_timer";
      //    after: "cursor_hide_stop";
      // }
      program {
         signal: "elm,action,show,cursor"; source: "elm";
         action: ACTION_STOP;
         target: "cursor_show";
         target: "cursor_hide";
         target: "cursor_show_timer";
         target: "cursor_hide_timer";
         after: "cursor_show";
      }
      program { name: "cursor_hide_stop";
         action: STATE_SET "default" 0.0;
         target: "cursor";
      }
      program { name: "cursor_show";
         action: STATE_SET "visible" 0.0;
         target: "cursor";
         after: "cursor_show_timer";
      }
      program { name: "cursor_hide";
         action: STATE_SET "default" 0.0;
         target: "cursor";
         transition: SINUSOIDAL 0.2;
         after: "cursor_hide_timer";
      }
      program { name: "cursor_show_timer";
         in: 0.5 0.0;
         after: "cursor_hide";
      }
      program { name: "cursor_hide_timer";
         in: 0.2 0.0;
         after: "cursor_show";
      }
   }
}

//// BUTTONS (elm/button/base/default) ////////////////////////////////////////
group { name: "elm/button/base/emc";
   images.image: "button_normal.png" COMP;
   images.image: "button_clicked.png" COMP;
   images.image: "button_toggled.png" COMP;
   FOCUS_HIGHLIGHT_INTRO()

#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4
#define PRESSED  8
#define TOGGLED  16
   script {
      public btmode;
      public eval_mode(m) {
         new m1 = m & MASK;
         new d = m & DISABLE;
         new p = m & PRESSED;
         new t = m & TOGGLED;
         if (m1 == (ICON | LABEL)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
               set_state(PART:"event", "default", 0.0);
               if (!p) {
                  set_state(PART:"elm.text", "visible", 0.0);
                  set_state(PART:"icon_clip", "default", 0.0);
                  if (t) {
                     set_state(PART:"base", "toggled", 0.0);
                  } else {
                     set_state(PART:"base", "default", 0.0);
                  }
               } else {
                  set_state(PART:"elm.text", "pressed_visible", 0.0);
                  set_state(PART:"icon_clip", "pressed", 0.0);
                  set_state(PART:"base", "pressed", 0.0);
               }
            } else {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
               set_state(PART:"elm.text", "disabled_visible", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
               set_state(PART:"base", "disabled", 0.0);
            }
         } else if (m1 == (ICON)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "icononly", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
               set_state(PART:"event", "default", 0.0);
               set_state(PART:"elm.text", "default", 0.0);
               if (!p) {
                  set_state(PART:"icon_clip", "default", 0.0);
                  if (t) {
                     set_state(PART:"base", "toggled", 0.0);
                  } else {
                     set_state(PART:"base", "default", 0.0);
                  }
               } else {
                  set_state(PART:"icon_clip", "pressed", 0.0);
                  set_state(PART:"base", "pressed", 0.0);
               }
            } else {
               set_state(PART:"elm.swallow.content", "icononly", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
               set_state(PART:"elm.text", "default", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
               set_state(PART:"base", "disabled", 0.0);
            }
         } else if (m1 == (LABEL)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"icon_clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
               if (!p) {
                  set_state(PART:"elm.text", "textonly", 0.0);
                  if (t) {
                     set_state(PART:"base", "toggled", 0.0);
                  } else {
                     set_state(PART:"base", "default", 0.0);
                  }
               } else {
                  set_state(PART:"elm.text", "pressed_textonly", 0.0);
                  set_state(PART:"base", "pressed", 0.0);
               }
            } else {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"elm.text", "disabled_textonly", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
               set_state(PART:"base", "disabled", 0.0);
            }
         } else {
            if (!d) {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               // set_state(PART:"elm.text", "icononly", 0.0);
               set_state(PART:"icon_clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
               if (!p) {
                  if (t) {
                     set_state(PART:"base", "toggled", 0.0);
                  } else {
                     set_state(PART:"base", "default", 0.0);
                  }
               } else {
                  set_state(PART:"base", "pressed", 0.0);
               }
            } else {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               // set_state(PART:"elm.text", "icononly", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
               set_state(PART:"base", "disabled", 0.0);
            }
         }
      }
   }
   parts {
      FOCUS_HIGHLIGHT_PARTS(-6 -6, 5 5)
      image { "base"; nomouse;
         scale: 1;
         desc { "default";
            min: 42 0;
            image.normal: "button_normal.png";
            image.border: 4 4 3 5;
            image.middle: SOLID;
            rel1.offset: -1 0;
            rel2.offset: 0 1;
            fill.smooth: 0;
            color_class: "button_bg";
         }
         desc { "pressed";
            inherit: "default";
            image.normal: "button_clicked.png";
            image.border: 5 5 4 6;
            color_class: "button_bg_pressed";
         }
         desc { "disabled";
            inherit: "default";
            color_class: "button_bg_disabled";
         }
         desc { "toggled";
            inherit: "default";
            image.normal: "button_toggled.png";
         }
      }
      rect { "icon_clip";
         desc { "default";
            color_class: "button_icon";
         }
         desc { "pressed";
            inherit: "default";
            color_class: "button_icon_pressed";
         }
         desc { "disabled";
            inherit: "default";
            color: 255 255 255 64;
            color_class: "button_icon_disabled";
         }
      }
      swallow { "elm.swallow.content"; nomouse;
         clip_to: "icon_clip";
         desc { "default";
            fixed: 1 0;
            align: 0.0 0.5;
            rel1.offset: 6 5;
            rel1.to: "base";
            rel2.relative: 0.0 1.0;
            rel2.offset: 6 -8;
            rel2.to: "base";
            visible: 0;
         }
         desc { "visible";
            inherit: "default";
            fixed: 1 0;
            aspect: 1.0 1.0;
            visible: 1;
         }
         desc { "icononly";
            inherit: "default";
            fixed: 0 0;
            align: 0.5 0.5;
            rel2.relative: 1.0 1.0;
            rel2.offset: -7 -8;
            visible: 1;
         }
      }
      text { "sizer.content"; nomouse;
         scale: 1;
         desc { "default";
//            fixed: 1 1;
            visible: 0;
            text { font: FONT; size: FONT_SIZE;
               min: 0 0;
               text_class: "button_text";
            }
         }
         desc { "visible";
            inherit: "default";
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
         desc { "icononly";
            inherit: "default";
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
      }
      text { "elm.text"; nomouse;
         effect: SHADOW BOTTOM;
         scale: 1;
         desc { "default";
            rel1.offset: 0 5;
            rel1.relative: 1.0 0.0;
            rel1.to_x: "elm.swallow.content";
            rel1.to_y: "base";
            rel2.offset: -8 -8;
            rel2.to: "base";
            color_class: "button_text";
            color: FONT_COLOR;
            color3: FONT_COLOR3;
            text { font: FONT; size: FONT_SIZE;
               align: 0.5 0.5;
               min: 0 0;
               text_class: "button";
            }
            visible: 0;
            fixed: 1 1;
         }
         desc { "visible";
            inherit: "default";
            rel1.offset: 2 5;
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
         desc { "pressed_visible";
            inherit: "default";
            rel1.offset: 2 5;
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
            color_class: "button_text_pressed";
         }
         desc { "textonly";
            inherit: "default";
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
         desc { "pressed_textonly";
            inherit: "default";
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
            color_class: "button_text_pressed";
         }
         desc { "disabled_visible";
            inherit: "default";
            rel1.offset: 2 5;
            color_class: "button_text_disabled";
            color: FONT_COLOR_NOSEL;
            color3: FONT_COLOR3_NOSEL;
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
         desc { "disabled_textonly";
            inherit: "default";
            color_class: "button_text_disabled";
            color: FONT_COLOR_NOSEL;
            color3: FONT_COLOR3_NOSEL;
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
      }
      rect { "event";
         desc { "default";
            color: 0 0 0 0;
         }
         desc { "disabled";
            inherit: "default";
            visible: 0;
         }
      }
   }
   programs {
      // default elm programs
      program {
         signal: "mouse,down,1"; source: "event";
         action: SIGNAL_EMIT "elm,action,press" "elm";
         after: "button_click_anim";
      }
      program { name: "button_click_anim";
         script {
            new m = get_int(btmode);
            m |= PRESSED; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_unclick";
         signal: "mouse,up,1"; source: "event";
         action: SIGNAL_EMIT "elm,action,unpress" "elm";
         after: "button_unclick_anim";
      }
      program { name: "button_unclick_anim";
         script {
            new m = get_int(btmode);
            m &= ~PRESSED; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "buttonactivate";
         signal: "elm,anim,activate"; source: "elm";
         action: STATE_SET "pressed" 0.0;
         target: "base";
         after: "button_unpressed_anim";
      }
      program { name: "button_unpressed_anim";
         action: STATE_SET "default" 0.0;
         in: 0.15 0.0;
         target: "base";
      }
      program {
         signal: "mouse,clicked,1"; source: "event";
         action: SIGNAL_EMIT "elm,action,click" "elm";
      }
      program { name: "button_text_visible";
         signal: "elm,state,text,visible"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= LABEL; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_text_hidden";
         signal: "elm,state,text,hidden"; source: "elm";
         script {
            new m = get_int(btmode);
            m &= ~LABEL; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_icon_visible";
         signal: "elm,state,icon,visible"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= ICON; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_icon_hidden";
         signal: "elm,state,icon,hidden"; source: "elm";
         action:  STATE_SET "default" 0.0;
         script {
            new m = get_int(btmode);
            m &= ~ICON; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_state_disabled";
         signal: "elm,state,disabled"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= DISABLE; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_state_enabled";
         signal: "elm,state,enabled"; source: "elm";
         script {
            new m = get_int(btmode);
            m &= ~DISABLE; set_int(btmode, m);
            eval_mode(m);
         }
      }
      // emc added programs
      program { signal: "emc,state,toggled"; source: "emc";
         script {
            new m = get_int(btmode);
            m |= TOGGLED; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { signal: "emc,state,untoggled"; source: "emc";
         script {
            new m = get_int(btmode);
            m &= ~TOGGLED; set_int(btmode, m);
            eval_mode(m);
         }
      }
      FOCUS_HIGHLIGHT_PROGRAMS("elm,action,focus", "elm,action,unfocus")
   }
#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE
#undef PRESSED
#undef TOGGLED
}

//// SLIDER (elm/slider/horizontal/default) ///////////////////////////////////
group { name: "elm/slider/hidden/limit";
   parts {
      part { name: "elm.units.min"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 1.0 0.5;
            text { font: FONT; size: FONT_SIZE;
               text_class: "slider_text";
               min: 1 1;
               align: 0.0 0.5;
               ellipsis: -1;
            }
         }
      }
      part { name: "elm.units.max"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 1.0 0.5;
            text { font: FONT; size: FONT_SIZE;
               text_class: "slider_text";
               min: 1 1;
               align: 0.0 0.5;
               ellipsis: -1;
            }
         }
      }
   }
}
group { name: "elm/slider/horizontal/emc";
   alias: "elm/slider/horizontal/disabled";
   // alias: "elm/slider/horizontal/media_player/position/default";
   // alias: "elm/slider/horizontal/media_player/position/flush";
   // alias: "elm/slider/horizontal/media_player/volume/default";
   // alias: "elm/slider/horizontal/media_player/volume/flush";
   images.image: "slider_run_base_horiz.png" COMP;
   images.image: "slider_run_bevel_horiz.png" COMP;
   images.image: "slider_run_base_light_horiz.png" COMP;
   images.image: "horiz_glow_run.png" COMP;
   images.image: "horiz_glow_run_rev.png" COMP;
   // images.image: "knob_round_small_normal.png" COMP;
   // images.image: "knob_round_small_selected.png" COMP;
   set { name: "knob";
      // XXX: add more sizes (at least up to 128x128)
      image { image: "knob_sz_24.png"  COMP; size: 31 31 32 32; }
      // image { image: "knob_sz_22.png"  COMP; size: 29 29 30 30; }
      // image { image: "knob_sz_20.png"  COMP; size: 27 27 28 28; }
      // image { image: "knob_sz_18.png"  COMP; size: 25 25 26 26; }
      // image { image: "knob_sz_16.png"  COMP; size: 23 23 24 24; }
      // image { image: "knob_sz_14.png"  COMP; size: 21 21 22 22; }
      // image { image: "knob_sz_12.png"  COMP; size: 19 19 20 20; }
      // image { image: "knob_sz_10.png"  COMP; size: 17 17 18 18; }
      // image { image: "knob_sz_08.png"  COMP; size: 15 15 16 16; }
      // image { image: "knob_sz_06.png"  COMP; size: 13 13 14 14; }
      // image { image: "knob_sz_04.png"  COMP; size:  0  0 12 12; }
   }
   FOCUS_HIGHLIGHT_INTRO()

#define ICON    1
#define LABEL   2
#define END     4
#define UNITS   8
#define MASK    15
#define INVERT  16
#define DISABLE 32
   script {
      public slmode;
      public eval_mode(m) {
         new ic = m & ICON;
         new l = m & LABEL;
         new e = m & END;
         new u = m & UNITS;
         new d = m & DISABLE;
         new i = m & INVERT;
         if (i) {
            if (!d) {
               set_state(PART:"base", "default", 0.0);
               set_state(PART:"glow", "inverted", 0.0);
            } else {
               set_state(PART:"base", "disabled", 0.0);
               set_state(PART:"glow", "disabled_inverted", 0.0);
            }
         } else {
            if (!d) {
               set_state(PART:"base", "default", 0.0);
               set_state(PART:"glow", "default", 0.0);
            } else {
               set_state(PART:"base", "disabled", 0.0);
               set_state(PART:"glow", "disabled", 0.0);
            }
         }
         if (l) {
            if (!d) {
               set_state(PART:"elm.text", "visible", 0.0);
            } else {
               set_state(PART:"elm.text", "disabled_visible", 0.0);
            }
         } else {
            set_state(PART:"elm.text", "default", 0.0);
         }
         if (u) {
            if (!d) {
               set_state(PART:"elm.units", "visible", 0.0);
               set_state(PART:"limits", "visible", 0.0);
            } else {
               set_state(PART:"elm.units", "disabled_visible", 0.0);
               set_state(PART:"limits", "disabled_visible", 0.0);
            }
         } else {
            set_state(PART:"elm.units", "default", 0.0);
            set_state(PART:"limits", "default", 0.0);
         }
         if (ic) {
            set_state(PART:"elm.swallow.icon", "visible", 0.0);
            set_state(PART:"sizer.content", "visible", 0.0);
         } else {
            set_state(PART:"elm.swallow.icon", "default", 0.0);
            set_state(PART:"sizer.content", "default", 0.0);
         }
         if (e) {
            set_state(PART:"elm.swallow.end", "visible", 0.0);
            set_state(PART:"sizer.content.end", "visible", 0.0);
         } else {
            set_state(PART:"elm.swallow.end", "default", 0.0);
            set_state(PART:"sizer.content.end", "default", 0.0);
         }
         if (!d) {
            set_state(PART:"event", "default", 0.0);
            set_state(PART:"dis_clip", "default", 0.0);
         } else {
            set_state(PART:"event", "disabled", 0.0);
            set_state(PART:"dis_clip", "disabled", 0.0);
         }
      }
   }
   parts {
      FOCUS_HIGHLIGHT_PARTS(-8 -8, 7 7)
      part { name: "elm.swallow.bar"; type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: 42 21;
            max: 99999 21;
            align: 1.0 0.5;
            rel1.to_x: "elm.text";
            rel1.relative: 1.0 0.0;
            rel1.offset: 2 0;
            rel2.to_x: "limits";
            rel2.relative: 0.0 1.0;
            rel2.offset: -3 -1;
         }
      }
      part { name: "base"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.bar";
            rel2.to: "elm.swallow.bar";
            image.normal: "slider_run_base_horiz.png";
            image.border: 4 4 0 0;
            fill.smooth: 0;
            min: 8 5;
            max: 99999 5;
            fixed: 0 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            image.normal: "slider_run_base_light_horiz.png";
         }
      }
      part { name: "glow"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "horiz_glow_run.png";
            rel1.offset: 1 1;
            rel1.to: "base";
            rel2.relative: 0.5 1.0;
            rel2.offset: -1 -2;
            rel2.to_x: "button";
            rel2.to_y: "base";
            image.border: 0 4 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
         description { state: "inverted" 0.0;
            image.normal: "horiz_glow_run_rev.png";
            rel1.relative: 0.5 0.0;
            rel1.offset: 0 1;
            rel1.to_x: "button";
            rel1.to_y: "base";
            rel2.offset: -2 -2;
            rel2.to: "base";
            image.border: 4 0 0 0;
         }
         description { state: "disabled_inverted" 0.0;
            inherit: "inverted" 0.0;
            color: 255 255 255 64;
         }
      }
      part { name: "bevel"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            image.normal: "slider_run_bevel_horiz.png";
            image.border: 5 5 0 0;
            fill.smooth: 0;
         }
      }
      part { name: "dis_clip"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.end";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
      part { name: "elm.swallow.icon"; type: SWALLOW;
         clip_to: "dis_clip";
         description { state: "default" 0.0;
            fixed: 1 0;
            visible: 0;
            align: 0.0 0.5;
            rel1.offset: 0 2;
            rel1.to_y: "elm.swallow.bar";
            rel2.offset: -1 -3;
            rel2.relative: 0.0 1.0;
            rel2.to_y: "elm.swallow.bar";
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            aspect: 1.0 1.0; aspect_preference: VERTICAL;
            rel1.offset: 2 2;
            rel2.offset: 2 -3;
         }
      }
      part { name: "sizer.content"; type: TEXT; mouse_events:  0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            text { font: FONT; size: FONT_SIZE;
               min: 0 0;
               text_class: "slider_text";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.icon";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
      }
      part { name: "elm.text"; type: TEXT; mouse_events: 0;
         effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.0 0.5;
            rel1.to_x: "elm.swallow.icon";
            rel1.relative: 1.0 0.0;
            rel1.offset: -1 2;
            rel2.to_x: "elm.swallow.icon";
            rel2.relative: 1.0 1.0;
            rel2.offset: -1 -3;
            color: FONT_COLOR;
            color_class: "slider_text";
            text { font: FONT; size: FONT_SIZE;
               text_class: "slider";
               min: 0 0;
               align: 0.0 0.5;
            }
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            fixed: 1 0;
            visible: 1;
            rel1.offset: 2 2;
            rel2.offset: 2 -3;
            text.min: 1 1;
            text.ellipsis: -1;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "visible" 0.0;
            color_class: "slider_text_disabled";
            color: FN_COL_DISABLE;
            color3: FN_COL3_DISABLE;
         }
      }
      part { name: "elm.swallow.end"; type: SWALLOW;
         clip_to: "dis_clip";
         description { state: "default" 0.0;
            fixed: 1 0;
            visible: 0;
            align: 1.0 0.5;
            rel1.offset: 0 2;
            rel1.relative: 1.0 0.0;
            rel2.offset: -1 -3;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            aspect: 1.0 1.0;
            aspect_preference: VERTICAL;
            // rel1.offset: -3 2;
            // rel2.offset: -3 -3;
            rel1.offset: -3 0;
            rel2.offset: -3 -1;
         }
      }
      part { name: "sizer.content.end"; type: TEXT; mouse_events:  0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            text { font: FONT; size: FONT_SIZE;
               min: 0 0;
               text_class: "slider_text";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            rel1.to: "elm.swallow.end";
            rel2.to: "elm.swallow.end";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
      }
      alias: "elm.units.min" "limits:elm.units.min";
      alias: "elm.units.max" "limits:elm.units.max";
      part { name: "limits"; type: GROUP; mouse_events: 0;
         source: "elm/slider/hidden/limit";
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 1.0 0.5;
            min: SOURCE;
            fixed: 1 1;
            rel1.to_x: "elm.swallow.end";
            rel1.relative: 0.0 0.0;
            rel1.offset: 0 2;
            rel2.to_x: "elm.swallow.end";
            rel2.relative: 0.0 1.0;
            rel2.offset: -1 -3;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            rel1.offset: -3 2;
            rel2.offset: -3 -3;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            rel1.offset: -3 2;
            rel2.offset: -3 -3;
            color: 255 255 255 64;
         }
      }
      part { name: "elm.units"; type: TEXT; mouse_events: 0;
         // effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            rel1.to_x: "limits";
            rel2.to_x: "limits";
            color: FONT_COLOR;
            color_class: "slider_text";
            text { font: FONT; size: FONT_SIZE;
               text_class: "slider";
               align: 1.0 0.5;
               min: 1 1;
               ellipsis: -1;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "visible" 0.0;
            color_class: "slider_text_disabled";
            color: FN_COL_DISABLE;
            color3: FN_COL3_DISABLE;
         }
      }
      part { name: "button"; type: GROUP; mouse_events: 0;
         source: "elm/slider/horizontal/indicator/default";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.dragable.slider"; type: RECT;
         scale: 1;
         dragable.x: 1 1 0;
         dragable.y: 0 0 0;
         dragable.confine: "elm.swallow.bar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            min: 16 16;
            max: 16 16;
            fixed: 1 1;
            rel1.relative: 0.5 0.0;
            rel1.to_x: "elm.swallow.bar";
            rel2.relative: 0.5 1.0;
            rel2.to_x: "elm.swallow.bar";
         }
      }
      part { name: "knob";
         description { state: "default" 0.0;
            image.normal: "knob";
            fixed: 1 1;
            min: 12 12;
            step: 2 2;
            max: 32 32; // XXX allow bigger sizes with more knob images
            rel1.to: "elm.dragable.slider";
            rel1.offset: -4 -4;
            rel2.to: "elm.dragable.slider";
            rel2.offset: 3 3;
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "slideevent"; type: RECT; repeat_events: 1;
         scale: 1;
         ignore_flags: ON_HOLD;
         dragable.events: "elm.dragable.slider";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
            color: 0 0 0 0;
         }
      }
      part { name: "elm.track.slider"; type: SWALLOW; mouse_events: 0;
         description { state: "default" 0.0;
            max: 0 0;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
         }
      }
      part { name: "event"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         signal: "mouse,down,1"; source: "elm.dragable.slider";
         action:  STATE_SET "clicked" 0.0;
         target: "knob";
      }
      program {
         signal: "mouse,up,1"; source: "elm.dragable.slider";
         action:  STATE_SET "default" 0.0;
         target: "knob";
      }
      program {
         signal: "elm,state,indicator,show"; source: "elm";
         action:  SIGNAL_EMIT "elm,popup,show" "elm";
         after: "popup_show2";
      }
      program {
         signal: "elm,state,indicator,hide"; source: "elm";
         action:  SIGNAL_EMIT "elm,popup,hide" "elm";
         after: "popup_hide2";
      }
      program {
         signal: "mouse,down,1"; source: "slideevent";
         action:  SIGNAL_EMIT "elm,popup,show" "elm";
         after: "popup_show2";
      }
      program { name: "popup_show2";
         action:  STATE_SET "hidden" 0.0;
         target: "button";
      }
      program {
         signal: "mouse,up,1"; source: "slideevent";
         action:  SIGNAL_EMIT "elm,popup,hide" "elm";
         after: "popup_hide2";
      }
      program { name: "popup_hide2";
         action:  STATE_SET "default" 0.0;
         target: "button";
      }
      program {
         signal: "elm,state,text,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= LABEL; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,text,hidden"; source: "elm";
         script {
            new m = get_int(slmode);
            m &= ~LABEL; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,icon,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= ICON; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,icon,hidden"; source: "elm";
         script {
            new m = get_int(slmode);
            m &= ~ICON; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program { name: "end_show";
         signal: "elm,state,end,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= END; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program { name: "end_hide";
         signal: "elm,state,end,hidden"; source: "elm";
         script {
            new m = get_int(slmode);
            m &= ~END; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,units,visible"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= UNITS; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,units,visible"; source: "elm";
         action: SIGNAL_EMIT "limits,visible" "elm";
         target: "limits";
      }
      program {
         signal: "elm,state,units,hidden"; source: "elm";
         action:  STATE_SET "default" 0.0;
         script {
            new m = get_int(slmode);
            m &= ~UNITS; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,units,hidden"; source: "elm";
         action: SIGNAL_EMIT "limits,hide" "elm";
         target: "limits";
      }
      program {
         signal: "elm,state,inverted,on"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= INVERT; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,inverted,off"; source: "elm";
         script {
            new m = get_int(slmode);
            m &= ~INVERT; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         script {
            new m = get_int(slmode);
            m |= DISABLE; set_int(slmode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         script {
            new m = get_int(slmode);
            m &= ~DISABLE; set_int(slmode, m);
            eval_mode(m);
         }
      }
      FOCUS_HIGHLIGHT_PROGRAMS("elm,action,focus", "elm,action,unfocus")
   }
#undef ICON
#undef LABEL
#undef END
#undef UNITS
#undef MASK
#undef INVERT
#undef DISABLE
}
group { name: "elm/slider/horizontal/indicator/default";
   alias: "elm/slider/horizontal/indicator/disabled";
   alias: "elm/slider/horizontal/popup/default";
   // alias: "elm/slider/horizontal/indicator/media_player/position/default";
   // alias: "elm/slider/horizontal/indicator/media_player/position/flush";
   // alias: "elm/slider/horizontal/indicator/media_player/volume/default";
   // alias: "elm/slider/horizontal/indicator/media_player/volume/flush";
   images.image: "darken_rounded_square.png" COMP;
   parts {
      part { name: "base"; type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 16 16;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "clip"; type: RECT;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.indicator";
            rel1.offset: -100 -100;
            rel2.to: "elm.indicator";
            rel2.offset: 99 99;
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "bevel"; mouse_events: 0;
         clip_to: "clip";
         description { state: "default" 0.0;
            rel1.offset: -12 -12;
            rel1.to: "elm.indicator";
            rel2.offset: 11 11;
            rel2.to: "elm.indicator";
            image.normal: "darken_rounded_square.png";
            image.border: 15 15 15 15;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.indicator"; type: TEXT; mouse_events: 0;
         clip_to: "clip";
         effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.5 1.0;
            rel1.to: "base";
            rel1.relative: 0.0 -0.1;
            rel1.offset: 0 -12;
            rel2.to: "base";
            rel2.relative: 1.0 -0.1;
            rel2.offset: -1 -12;
            color_class: "slider_indicator";
            color: FONT_COLOR;
            text { font: FONT; size: FONT_SIZE;
               min: 1 1;
               align: 0.5 1.0;
               text_class: "slider_indicator";
               ellipsis: -1;
            }
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         signal: "elm,popup,show"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal: "elm,popup,hide"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal: "elm,popup,hide"; source: "elm";
         action:  SIGNAL_EMIT "elm,popup,hide,done" "elm";
      }
      program {
         signal: "elm,state,val,show"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target: "clip";
      }
      program {
         signal: "elm,state,val,hide"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "clip";
      }
      program {
         signal: "elm,state,indicator,show"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal: "elm,state,indicator,hide"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target:  "elm.indicator";
         target:  "bevel";
      }
      program {
         signal:  "elm,state,disabled"; source: "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "base";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target:  "base";
      }
   }
}
