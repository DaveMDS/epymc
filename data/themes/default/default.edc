
#define DEBUG_ENABLE 0
// #if DEBUG_ENABLE
// #define DBG(...) { \
   // new _buf[128]; \
   // snprintf(_buf, sizeof(_buf), __VA_ARGS__); \
   // set_text(PART:"embryo_dbg", _buf); }
// #else
// #define DBG(...)
// #endif

#define FONT "Cuprum"
#define FONT_BOLD "AsapBold"
// #define FONT "Sans"
// #define FONT_BOLD "Sans:style=Bold"
#define FONT_SIZE 22
#define FONT_SIZE_BIG 26
#define FONT_SIZE_BIGGER 48
#define FONT_COLOR 255 255 255 255
#define FONT_COLOR3 0 0 0 64

#define COLOR_BLUE 63 108 168
#define COLOR_GREEN 63 168 108
#define COLOR_ORANGE 240 164 10
#define COLOR_ORANGE_HEX F0A40A

data {
   item: "theme.name" "The default one";
   item: "theme.version" "0.8";
   item: "theme.author" "davemds";
   item: "theme.info" "A more long description of the theme";
   item: "theme.generation" "1";
}

images {
   image: "background.jpg" COMP;
   image: "frame.png" COMP;
   image: "frame_box.png" COMP;
   image: "frame2.png" COMP;
   image: "frame3.png" COMP;
   image: "frame4.png" COMP;
   image: "button_bar.png" COMP;
   image: "separator.png" COMP;
   image: "header.png" COMP;
   image: "volume.png" COMP;
   image: "volume_muted.png" COMP;
}

fonts {
   font: "Cuprum.otf" "Cuprum";
   font: "Asap-Regular.otf" "Asap";
   font: "Asap-Bold.otf" "AsapBold";
   // font: "Asap-Italic.otf" "AsapItalic";
   // font: "Asap-BoldItalic.otf" "AsapBoldItalic";
   
   font: "CinemaRegular.ttf" "Cinema";
   font: "Aclonica.ttf" "Aclonica";
}

styles {
   style { name: "epymc_default_style";
      base: "font="FONT" font_size="FONT_SIZE" color=#fff wrap=word";
      tag:  "br" "\n";
      tag:  "tab" "\t";
      tag:  "em" "+ font="FONT":style=Oblique";
      tag:  "b" "+ font="FONT_BOLD;
      tag:  "title" "+ font="FONT_BOLD" color=#"COLOR_ORANGE_HEX" font_size="FONT_SIZE_BIG;
      tag:  "hilight" "+ font="FONT_BOLD;
      //~ tag:  "link" "+ color=#800 underline=on underline_color=#8008";
   }

   style { name: "epymc_dialog_style";
      base: "font="FONT" font_size="FONT_SIZE" color=#FFF wrap=word";
      tag:  "br" "\n";
      tag:  "tab" "\t";
      tag:  "em" "+ font="FONT":style=Oblique";
      tag:  "b" "+ font="FONT_BOLD;
      tag:  "title" "+ font="FONT_BOLD" color=#b00 font_size="FONT_SIZE_BIG;
      tag:  "hilight" "+ font="FONT_BOLD;
      tag:  "center" "+ align=center";
      //~ tag:  "link" "+ color=#800 underline=on underline_color=#8008";
   }

   style { name: "epymc_dialog_title_style";
      base: "font=Aclonica align=center font_size="FONT_SIZE_BIG" color=#"COLOR_ORANGE_HEX" wrap=none";
   }

   style { name: "epymc_label_slide_style";
      base:  "font="FONT" font_size="FONT_SIZE" color=#fff wrap=none";
   }

   // font=Sans font_size=10 align=center color=#fff wrap=mixed ellipsis=1.0
   // font=Sans text_class=fileman_icon wrap=[word,mixed,none] style=soft_shadow shadow_color=#0002
   // left_margin=4 right_margin=4
}

color_classes {
   color_class {
      name:  "button_color";
      color: 56 171 80 255; //green
      // color: 240 240 240 255; //white
      // color: 16 16 16 255; //black
      // color: 128 62 142 255; //purple
      // color: 26 143 178 255; //cyan
      // color: 155 20 29 255; //red
      color2:  0 0 0 0;
      color3:  0 0 0 0;
   }
}

externals {
   external: "elm";
}

collections {

   #include "elm_extension.edc"
   #include "icons.edc"

/// main UI
   group { name: "emc/main/layout"; /* API */

/// clock embryo script
      script {
          public clock_cb(val) {
            new year, month, day, yearday, weekday, hour, minute;
            new Float:second;
            new buf[32];

            date(year, month, day, yearday, weekday, hour, minute, second);
            timer(60.0 - (second), "clock_cb", 1);

            buf[0] = 0;
            if (minute < 10 && hour < 10) { snprintf(buf, 10, "0%i:0%i", hour, minute); }
            else if (minute < 10)         { snprintf(buf, 10, "%i:0%i", hour, minute); }
            else if (hour < 10)           { snprintf(buf, 10, "0%i:%i", hour, minute); }
            else                          { snprintf(buf, 10, "%i:%i", hour, minute); }
            set_text(PART:"topbar.clock", buf);
         }
      }

      parts {

/// main background
         part { name: "bg.bg";
            type: IMAGE;
            description { state: "default" 0.0;
               // min: 1280 720;
               min: 800 600;
               image.normal: "background.jpg";
            }
         }
         part { name: "bg.swallow.backdrop1"; /* API */
            type: SWALLOW;
            description { state: "default" 0.0;
            }
         }
         part { name: "bg.swallow.backdrop2"; /* API _unused_ */
            type: SWALLOW;
            description { state: "default" 0.0;
            }
         }

/// browser top bar
         part { name: "topbar.clip";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               max: 9999 40;
               align: 0.5 0.0;
               rel1.relative: 0.0 -0.3;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
            }
         }
         part { name: "topbar.bg";
            type: IMAGE;
            description { state: "default" 0.0;
               rel1.to: "topbar.clip";
               rel2.to: "topbar.clip";
               rel2.offset: 0 28;
               image.normal: "header.png";
               image.border: 31 39 2 39;
            }
         }
         part { name: "topbar.home_icon";
            type: IMAGE;
            description { state: "default" 0.0;
               image.normal: "icon_home.png";
               color: 255 255 255 170;
               aspect: 1 1;
               aspect_preference: BOTH;
               align: 0.0 0.5;
               rel1 {
                  to: "topbar.clip";
                  offset: 20 0;
               }
               rel2 {
                  to: "topbar.clip";
               }
            }
         }
         part { name: "topbar.title"; /* API */
            type: TEXT;
            scale: 1;
            effect: GLOW;
            description { state: "default" 0.0;
               color: 255 255 255 200;
               rel1 {
                  to: "topbar.clip";
                  to_x: "topbar.home_icon";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "topbar.clip";
               }
               text {
                  font: "Aclonica";
                  size: FONT_SIZE;
                  align: 0.0 1.0;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.offset: 60 0;
               rel2.offset: -1 0;
            }
         }
         part { name: "topbar.box"; /* API */
            type: BOX;
            mouse_events: 1;
            repeat_events: 1;
            description { state: "default" 0.0;
               max: 200 -1;
               align: 0.8 0.5;
               rel1 {
                  to: "topbar.title";
                  offset: 0 4;
               }
               rel2 {
                  to: "topbar.clock";
                  offset: -1 -4;
               }
               box {
                  layout: "horizontal";
                  padding: 4 4;
               }
            }
         }
         part { name: "topbar.clock";
            type: TEXT;
            clip_to: "topbar.clip";
            scale: 1;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               rel1 {
                  to: "topbar.clip";
               }
               rel2 {
                  to: "topbar.clip";
                  offset: -40 0;
               }
               text {
                  font: "Aclonica";
                  size: FONT_SIZE_BIG;
                  align: 1.0 0.7;
               }
            }
         }
         part { name: "topbar.list.spacer";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               max: 9999 40;
               align: 0.5 0.0;
            }
         }

/// browser view: list
         part { name: "browser.list.clip";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.list.list_frame";
            type: IMAGE;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               rel1.offset: 0 10;
               rel1.to: "topbar.list.spacer";
               rel1.relative: 0.0 1.0;
               rel2.relative: 0.5 1.0;
               rel2.offset: -1 -10;
               image.normal: "frame.png";
               image.border: 32 32 92 78;
            }
         }
         part { name: "browser.list.list_clip";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
               color: 255 255 255 0;
               rel1 {
                  to: "browser.list.list_frame";
                  offset: 19 18;
               }
               rel2 {
                  to: "browser.list.list_frame";
                  offset: -20 -78;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.list.genlist1"; /* API */
            type: EXTERNAL;
            source: "elm/genlist";
            clip_to: "browser.list.list_clip";
            description { state: "default" 0.0;
               rel1.to: "browser.list.list_clip";
               rel2.to: "browser.list.list_clip";
            }
            description { state: "center" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "left" 0.0;
               inherit: "default" 0.0;
               rel1.relative: -1.0 0.0;
               rel2.relative: 0.0 1.0;
            }
            description { state: "right" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 1.0 0.0;
               rel2.relative: 2.0 1.0;
            }
         }
         part { name: "browser.list.genlist2"; /* API */
            type: EXTERNAL;
            source: "elm/genlist";
            clip_to: "browser.list.list_clip";
            description { state: "default" 0.0;
               rel1 {
                  to: "browser.list.genlist1";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "browser.list.genlist1";
                  relative: 2.0 1.0;
               }
            }
            description { state: "on_the_right" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "on_the_left" 0.0;
               rel1 {
                  to: "browser.list.genlist1";
                  relative: -1.0 0.0;
               }
               rel2 {
                  to: "browser.list.genlist1";
                  relative: 0.0 1.0;
               }
            }
         }
         part { name: "browser.list.total.bg";
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               image {
                  normal: "frame_box.png";
                  border: 3 3 3 3;
               }
               rel1.to: "browser.list.total";
               rel1.offset: -15 -3;
               rel2.to: "browser.list.total";
               rel2.offset: 14 2;
            }
         }
         part { name: "browser.list.total"; /* API */
            type: TEXT;
            clip_to: "browser.list.clip";
            effect: SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: 0 0 0 255;
               rel1 {
                  to: "browser.list.list_frame";
                  relative: 0.0 1.0;
                  offset: 0 -105;
               }
               rel2 {
                  to: "browser.list.list_frame";
               }
               text {
                  text: "X items";
                  font: FONT;
                  size: FONT_SIZE;
                  align: 0.5 0.5;
                  max: 1 1;
               }
            }
         }
         part { name: "browser.list.poster"; /* API */
            type: SWALLOW;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               rel1 {
                  to_y: "topbar.list.spacer";
                  relative: 0.5 1.0;
                  offset: 20 20;
               }
               rel2 {
                  to_y: "browser.list.info_bg";
                  relative: 1.0 0.0;
                  offset: -20 0;
               }
            }
         }
         part { name: "browser.list.info_bg";
            type: IMAGE;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               image {
                  normal: "frame2.png";
                  border: 8 8 8 8;
               }
               rel1 {
                  relative: 0.5 (1.0 + 0.0);
                  offset: 10 -5;
               }
               rel2 {
                  relative: 1.0 (1.0 + 0.35);
                  offset: -12 -22;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1 {
                  relative: 0.5 (1.0 - 0.35);
                  offset: 10 -5;
               }
               rel2 {
                  relative: 1.0 (1.0 + 0.0);
                  offset: -12 -22;
               }
            }
         }
         part { name: "browser.list.info"; /* API */
            type: TEXTBLOCK;
            clip_to: "browser.list.clip";
            multiline: 1;
            scale: 1;
            description { state: "default" 0.0;
               rel1 {
                  to: "browser.list.info_bg";
                  offset: 15 15;
               }
               rel2 {
                  to: "browser.list.info_bg";
                  offset: -15 -10;
               }
               text {
                  style: "epymc_default_style";
                  align: 0.0 0.0;
               }
            }
         }

/// browser view: grid
         part { name: "browser.grid.gengrid"; /* API */
            type: SWALLOW;
            clip_to: "browser.grid.clip";
            description { state: "default" 0.0;
               color: 255 255 255 100;
               rel1.offset: 0 100;
            }
         }
         part { name: "browser.grid.title"; /* API */
            type: TEXT;
            clip_to: "browser.grid.clip";
            effect: FAR_SOFT_SHADOW;
            description { state: "default" 0.0;
               color: 200 200 200 255;
               color3: 50 50 50 100;
               rel1.offset: 0 40;
               rel2.relative: 1.0 0.0;
               rel2.offset: 0 100;
               text {
                  font: FONT_BOLD;
                  size: 40;
               }
            }
         }
         part { name: "browser.grid.clip";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }

/// mainmenu
         part { name: "mainmenu.list"; /* API */
            type: EXTERNAL;
            source: "elm/list";
            description { state: "default" 0.0;
               rel1.relative: 0.0 -1.0;
               rel2.relative: 1.0 0.0;
               align: 1.0 1.0;
               params {
                  choice: "horizontal mode" "scroll";
                  choice: "scroll horizontal" "off";
                  choice: "scroll vertical" "off";
                  bool: "multi" "0";
                  bool: "always_select" "1";
               }
            }
            description { state: "visible" 0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 1.0;
            }
         }

/// videoplayer
         part { name: "videoplayer.bg";
            type: RECT;
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
               color: 0 0 0 255;
            }
         }
         part { name: "videoplayer.video"; /* API */
            type: SWALLOW;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
            }
         }
         part { name: "videoplayer.clip";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "videoplayer.events"; /* API */
            type: RECT;
            mouse_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 0 0 0 0;
               visible: 1;
            }
         }
         part { name: "videoplayer.controls.bg";
            type: IMAGE;
            mouse_events: 1;
            repeat_events: 0;
            clip_to: "videoplayer.clip";
            scale: 1;
            description { state: "default" 0.0;
               min: 9999 100;
               max: 9999 100;
               fixed: 1 1;
               align: 0.5 0.0;
               rel1.relative: 0 -0.5;
               image {
                  normal: "frame4.png";
                  border: 2 2 2 2;
               }
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
               visible: 1;
            }
         }
         part { name: "videoplayer.controls.btn_box.bg";
            type: IMAGE;
            mouse_events: 1;
            repeat_events: 0;
            clip_to: "videoplayer.clip";
            scale: 1;
            description { state: "default" 0.0;
               min: 9999 45;
               max: 9999 45;
               fixed: 1 1;
               align: 0.5 0.08;
               rel1.to: "videoplayer.controls.bg";
               rel2.to: "videoplayer.controls.bg";
               image {
                  normal: "button_bar.png";
                  border: 2 2 2 2;
               }
            }
         }
         part { name: "videoplayer.controls.btn_box"; /* API */ 
            type: BOX;
            description { state: "default" 0.0;
               rel1 {
                  to: "videoplayer.controls.btn_box.bg";
                  to_x: "videoplayer.controls.poster";
                  offset: 5 2;
                  relative: 1.0 0.0;
               }
               rel2.to: "videoplayer.controls.btn_box.bg";
               box {
                  layout: "horizontal";
                  padding: 2 0;
                  align: 0.0 0.5;
               }
            }
         }
         part { name: "videoplayer.controls.btn_box2"; /* API */ 
            type: BOX;
            description { state: "default" 0.0;
               rel1 {
                  to_y: "videoplayer.controls.btn_box.bg";
                  to_x: "videoplayer.controls.poster";
                  offset: 5 2;
                  relative: 1.0 0.0;
               }
               rel2 {
                  to_y: "videoplayer.controls.btn_box.bg";
               }
               box {
                  layout: "horizontal";
                  padding: 2 0;
                  align: 1.0 0.5;
               }
            }
         }
         part { name: "videoplayer.controls.slider"; /* API */
            type: GROUP;
            source: "emc/slider/default";
            mouse_events: 1;
            repeat_events: 1;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to_y: "videoplayer.controls.bg";
                  to_x: "videoplayer.controls.poster";
                  relative: 1.0 0.6;
                  offset: 5 0;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
                  to_x: "videoplayer.controls.length";
                  relative: 0.0 1.0;
                  // offset: -10 0;
               }
            }
         }
         part { name: "videoplayer.controls.position"; /* API */
            type: TEXT;
            mouse_events: 0;
            scale: 1;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               rel1 {
                  to_y: "videoplayer.controls.bg";
                  relative: 0.7 0.5;
                  // offset: 10 0;
               }
               rel2 {
                  to_y: "videoplayer.controls.bg";
                  to_x: "videoplayer.controls.length";
                  relative: 0.0 1.0;
               }
               text {
                  text: "0:00:00";
                  font: FONT_BOLD;
                  size: (FONT_SIZE + 2);
                  // fit: 1 0;
                  align: 0.5 1.0;
               }
            }
         }
         part { name: "videoplayer.controls.length"; /* API */
            type: TEXT;
            mouse_events: 0;
            scale: 1;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               rel1 {
                  to_y: "videoplayer.controls.bg";
                  relative: 0.90 0.5;
               }
               rel2 {
                  to_y: "videoplayer.controls.bg";
               }
               text {
                  text: "0:00:00";
                  font: "Sans:style=Bold";
                  size: (FONT_SIZE + 2);
                  // fit: 1 0;
                  align: 0.5 1.0;
               }
            }
         }
         part { name: "videoplayer.controls.poster"; /* API */
            type: SWALLOW;
            mouse_events: 0;
            //scale: 1; not work :/
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
               visible: 0;
               rel1.relative: 0.0 (0.0 - 0.9);
               rel2.relative: 0.2 (0.45 - 0.9);
               rel1.offset: 5 5;
               align: 0.0 0.0;  // not work :/
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel1.relative: 0.0 0.0;
               rel2.relative: 0.2 0.45;
            }
         }
         part { name: "videoplayer.controls.title"; /* API */
            type: TEXT;
            mouse_events: 0;
            scale: 1;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               color3: 0 0 0 0;
               rel1 {
                  to_y: "videoplayer.controls.bg";
                  to_x: "videoplayer.controls.poster";
                  relative: 1.0 1.0;
                  offset: 5 0;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
                  relative: 1.0 1.5;
                  offset: 0 0;
               }
               text {
                  text: "Title";
                  font: FONT;
                  size: FONT_SIZE_BIGGER;
                  align: 0.0 0.0;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
            }
         }

/// volume
         part { name: "volume.bg";
            type: IMAGE;
            mouse_events: 1;
            repeat_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               min: 400 40;
               max: 400 40;
               color: 255 255 255 180;
               align: 0.5 1.0;
               rel1.offset: 0 40;
               rel2.offset: -1 40;
               image.normal: "bt_dis_base.png";
               image.border: 5 5 5 5;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel1.offset: 0 0;
               rel2.offset: -1 -1;
            }
         }
         part { name: "volume.slider"; /* API */
            type: GROUP;
            source: "emc/slider/default";
            mouse_events: 1;
            repeat_events: 1;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to_y: "volume.bg";
                  to_x: "volume.icon";
                  relative: 1.0 0.0;
                  offset: 8 0;
               }
               rel2 {
                  to: "volume.bg";
                  offset: -8 0;
               }
            }
         }
         part { name: "volume.icon";
            type: IMAGE;
            description { state: "default" 0.0;
               image.normal: "volume.png";
               align: 0.0 0.5;
               aspect: 1 1;
               aspect_preference: VERTICAL;
               rel1 {
                  to: "volume.bg";
                  // relative: 0.0 0.0;
                  offset: 8 0;
               }
               rel2 {
                  to: "volume.bg";
                  // relative: 1.0 1.0;
                  // offset: -1 -3;
               }
            }
            description { state: "muted" 0.0;
               inherit: "default" 0.0;
               image.normal: "volume_muted.png";
            }
         }


/// dialog & notify container boxes
         part { name: "dialogs.box.stack"; /* API */
            type: BOX;
            description { state: "default" 0.0;
               box {
                  layout: "stack";
                  min: 0 0;
                  // layout: "horizontal"; # funny...with more than one dialog
               }
            }
         }
         part { name: "notify.box.stack"; /* API todoc*/
            type: BOX;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 0.0;
               rel1 {
                  relative: 0.5 1.0;
                  to_y: "topbar.list.spacer";
                  offset: 0 25;
               }
               box {
                  layout: "vertical";
                  align: 1.0 0.0;
                  padding: 6 6;
                  // min: 1 0; # this should be correct, but in some ways break the movie-info-panel :/
               }
            }
         }



/// debug label for embryo scripting
         #if DEBUG_ENABLE
         part { name: "embryo_dbg";
            type: TEXT;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               text {
                  text: "EMBRYO DEBUG ENABLED";
                  font: FONT;
                  size: FONT_SIZE;
                  align: 1.0 1.0;
               }
            }
         }
         #endif
      }
      programs {
         program { name: "init";
            signal: "load";
            source: "";
            script {
               clock_cb(0);
            }
         }
///
         program { name: "mainmenu_show"; /* API */
            signal: "mainmenu,show";
            source: "emc";
            action: STATE_SET "visible" 0.00;
            transition: DECELERATE 0.5;
            target: "mainmenu.list";
         }
         program { name: "mainmenu_hide"; /* API */
            signal: "mainmenu,hide";
            source: "emc";
            action: STATE_SET "default" 0.00;
            transition: ACCELERATE 0.5;
            target: "mainmenu.list";
         }
///
         program { name: "browser_list_show"; /* API */
            signal: "browser,list,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: LINEAR 1.0;
            target: "browser.list.clip";
            target: "browser.list.list_clip";
         }
         program { name: "browser_list_hide"; /* API */
            signal: "browser,list,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 1.0;
            target: "browser.list.clip";
            target: "browser.list.list_clip";
         }
         program { name: "browser_list_info_show"; /* API */
            signal: "browser,list,info,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.35;
            target: "browser.list.info_bg";
         }
         program { name: "browser_list_info_hide"; /* API */
            signal: "browser,list,info,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.35;
            target: "browser.list.info_bg";
         }
         program { name: "browser_list_flip_left"; /* API */
            signal: "browser,list,flip_left";
            source: "emc";
            script {
               new buf[16];
               new Float:val;
               get_state(PART:"browser.list.genlist1", buf, sizeof(buf), val);
               // DBG("%s   %f", buf, val)
               if (!strcmp(buf, "default") || !strcmp(buf, "center")) {
                  // DBG("CASE 1")
                  set_state(PART:"browser.list.genlist2", "on_the_right", 0.0);
                  run_program(PROGRAM:"gl1_to_left");
               }
               else if (!strcmp(buf, "left")) {
                  // DBG("CASE 2")
                  set_state(PART:"browser.list.genlist1", "right", 0.0);
                  set_state(PART:"browser.list.genlist2", "on_the_left", 0.0);
                  run_program(PROGRAM:"gl1_to_center");
               }
               else if (!strcmp(buf, "right")) {
                  // DBG("CASE 3")
                  run_program(PROGRAM:"gl1_to_center");
               }
            }
         }
         program { name: "browser_list_flip_right"; /* API */
            signal: "browser,list,flip_right";
            source: "emc";
            script {
               new buf[16];
               new Float:val;
               get_state(PART:"browser.list.genlist1", buf, sizeof(buf), val);
               // DBG("%s   %f", buf, val)
               if (!strcmp(buf, "default") || !strcmp(buf, "center")) {
                  // DBG("CASE 1 (back)")
                  set_state(PART:"browser.list.genlist2", "on_the_left", 0.0);
                  run_program(PROGRAM:"gl1_to_right");
               }
               else if (!strcmp(buf, "right")) {
                  // DBG("CASE 2 (back)")
                  set_state(PART:"browser.list.genlist1", "left", 0.0);
                  set_state(PART:"browser.list.genlist2", "on_the_right", 0.0);
                  run_program(PROGRAM:"gl1_to_center");
               }
               else if (!strcmp(buf, "left")) {
                  // DBG("CASE 3 (back)")
                  run_program(PROGRAM:"gl1_to_center");
               }
            }
         }
         program { name: "gl1_to_left";
            action: STATE_SET "left" 0.0;
            transition: DECELERATE 0.25;
            target: "browser.list.genlist1";
         }
         program { name: "gl1_to_right";
            action: STATE_SET "right" 0.0;
            transition: DECELERATE 0.25;
            target: "browser.list.genlist1";
         }
         program { name: "gl1_to_center";
            action: STATE_SET "center" 0.0;
            transition: DECELERATE 0.25;
            target: "browser.list.genlist1";
         }
///
         program { name: "browser_grid_show"; /* API */
            signal: "browser,grid,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: LINEAR 1.0;
            target: "browser.grid.clip";
         }
         program { name: "browser_grid_hide"; /* API */
            signal: "browser,grid,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 1.0;
            target: "browser.grid.clip";
         }
///
         program { name: "topbar_show"; /* API */
            signal: "topbar,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.4;
            target: "topbar.clip";
         }
         program { name: "topbar_hide"; /* API */
            signal: "topbar,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.4;
            target: "topbar.clip";
         }
///
         program { name: "videoplayer_show"; /* API */
            signal: "videoplayer,show";
            source: "emc";
            action: STATE_SET "visible" 0.00;
            transition: LINEAR 0.4;
            target: "videoplayer.clip";
            target: "videoplayer.events";
            
         }
         program { name: "videoplayer_hide"; /* API */
            signal: "videoplayer,hide";
            source: "emc";
            action: STATE_SET "default" 0.00;
            transition: LINEAR 0.4;
            target: "videoplayer.clip";
            target: "videoplayer.events";
         }
         program { name: "videoplayer_controls_show"; /* API */
            signal: "videoplayer,controls,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.4;
            target: "videoplayer.controls.bg";
            target: "videoplayer.controls.title";
            target: "videoplayer.controls.poster";
         }
         program { name: "videoplayer_controls_hide"; /* API */
            signal: "videoplayer,controls,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.4;
            target: "videoplayer.controls.bg";
            target: "videoplayer.controls.title";
            target: "videoplayer.controls.poster";
         }
///
         program { name: "volume_show"; /* API */
            signal: "volume,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.3;
            target: "volume.bg";
         }
         program { name: "volume_hide"; /* API */
            signal: "volume,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.3;
            target: "volume.bg";
         }
         program { name: "volume_mute_on"; /* API */
            signal: "volume,mute,on";
            source: "emc";
            action: STATE_SET "muted" 0.0;
            target: "volume.icon";
         }
         program { name: "volume_mute_off"; /* API */
            signal: "volume,mute,off";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "volume.icon";
         }
      }
   }

/// browser list item
   group { name: "emc/browser/list_item/normal"; /* API todoc */
      parts {
         part { name: "brower.item.icon"; /* API todoc */
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 1 40;
               max: 1 40;
               align: 0.0 0.5;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: 40 40;
               max: 40 40;
            }
         }
         part { name: "brower.item.icon_end"; /* API todoc */
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 1 40;
               max: 1 40;
               align: 1.0 0.5;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: 40 40;
               max: 40 40;
            }
         }

         part { name: "brower.item.label1"; /* API todoc */
            type: EXTERNAL;
            source: "elm/label";
            mouse_events: 0;
            scale: 1;

            description { state: "default" 0.0;
               rel1 {
                  to_x: "brower.item.icon";
                  relative: 1.0  0.0;
                  offset: 1  1;
               }
               rel2 {
                  to_x: "brower.item.icon_end";
                  relative: 0.0  1.0;
                  offset: -1  -1;
               }
            }
         }
         /* DEBUG START
         part { name: "TESTING_ICON";
            type: RECT;
            description { state: "default" 0.0;
               color: 80 80 0 80;
               rel1.to: "brower.item.icon";
               rel2.to: "brower.item.icon";
            }
         }
         part { name: "TESTING_TEXT";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 80 80 80;
               rel1.to: "brower.item.label1";
               rel2.to: "brower.item.label1";
            }
         }
         part { name: "TESTING_END";
            type: RECT;
            description { state: "default" 0.0;
               color: 80 0 80 80;
               rel1.to: "brower.item.icon_end";
               rel2.to: "brower.item.icon_end";
            }
         }
         DEBUG END */
      }
      programs {
         program { signal: "icon,show"; source: "emc"; /* API todoc */
            action: STATE_SET "visible" 0.0;
            target: "brower.item.icon";
         }
         program { signal: "icon_end,show"; source: "emc"; /* API todoc */
            action: STATE_SET "visible" 0.0;
            target: "brower.item.icon_end";
         }
      }
   }

/// dialogs
   group { name: "emc/dialog/panel"; /* API */
      images {
         image: "dialog_bg.png" COMP;
         image: "dialog_header.png" COMP;
         image: "roundclose.png" COMP;
      }
      parts {
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "bg";
            type: RECT;
            clip_to: "clipper";
            description { state: "default" 0.0;
               color: 0 0 0 64;
            }
         }
         part { name: "base";
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.relative: 0.1 0.1;
               rel2.relative: 0.9 0.9;
               image {
                  normal: "dialog_bg.png";
                  border: 3 4 3 5;
               }
            }
         }
         part { name: "emc.swallow.content"; /* API */
            type: SWALLOW;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1 {
                  to: "emc.text.title";
                  relative: 0.0 1.0;
                  offset: 10 5;
               }
               rel2 {
                  to_y: "emc.box.buttons";
                  to_x: "base";
                  relative: 1.0 0.0;
                  offset: -10 -10;
               }
            }
         }
         part { name: "titlebg";
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "emc.text.title";
               rel2.to: "emc.text.title";
               rel1.offset: 4 1;
               rel2.offset: -4 25;
               color: 255 255 255 200;
               image.normal: "dialog_header.png";
               image.border: 0 0 0 40;
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "emc.text.title"; /* API */
            type: TEXTBLOCK;
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 0.0;
               visible: 0;
               text {
                  text:"missing title...";
                  align: 0.5 0.7;
                  style: "epymc_dialog_title_style";
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel2.offset: 0 55;
            }
         }
         part { name: "close";
            type: IMAGE;
            clip_to: "clipper";
            mouse_events: 1;
            description { state: "default" 0.0;
               min: 60 60;
               fixed: 1 1;
               aspect: 1 1;
               color: 255 255 255 140;
               image.normal: "roundclose.png";
               rel1 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
            }
            description { state: "bigger" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 240;
            }
         }
         part { name: "emc.box.buttons"; /* API */
            type: BOX;
            clip_to: "clipper";
            description { state: "default" 0.0;
               box {
                  layout: "horizontal";
                  padding: 0 4;
                  min: 0 1; // this doesn't work...it should
               }
               rel1 {
                  to: "base";
                  relative: 0.0 1.0;
                  offset: 8 8;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 1.0;
                  offset: -9 -15;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.offset: 0 -45;
            }
         }
      }
      programs {
         program { name: "close_mouse_in";
            signal: "mouse,in";
            source: "close";
            action: STATE_SET "bigger" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_out";
            signal: "mouse,out";
            source: "close";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_click"; /* API */
            signal: "mouse,down,1";
            source: "close";
            action: SIGNAL_EMIT "emc,dialog,close" "";
         }
         program { name: "show"; /* API */
            signal: "emc,dialog,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "show_done";
         }
         program { name: "show_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,show,done" "";
         }
         program { name: "hide"; /* API */
            signal: "emc,dialog,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "hide_done";
         }
         program { name: "hide_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,hide,done" "";
         }
         program { name: "show_title"; /* API */
            signal: "emc,dialog,title,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.text.title";
            target: "titlebg";
         }
         program { name: "hide_title"; /* API */
            signal: "emc,dialog,title,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.text.title";
            target: "titlebg";
         }
         program { name: "show_buttons"; /* API */
            signal: "emc,dialog,buttons,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "hide_buttons"; /* API */
            signal: "emc,dialog,buttons,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.box.buttons";
         }
      }
   }
   group { name: "emc/dialog/minimal"; /* API */
      images {
         image: "dialog_bg.png" COMP;
         image: "dialog_header.png" COMP;
         image: "bulb-0.png" COMP;
         image: "warning.png" COMP;
         image: "error.png" COMP;
      }
      parts {
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "base";
            type: RECT;
            clip_to: "clipper";
            description { state: "default" 0.0;
               color: 0 0 0 64;
            }
         }
         part { name: "pop";
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "titlebg";
               rel1.offset: -2 -2;
               rel2.to_x: "emc.swallow.content";
               rel2.to_y: "emc.box.buttons";
               rel2.offset: 15+2 0;
               image {
                  normal: "dialog_bg.png";
                  border: 3 4 3 5;
               }
            }
         }
         part { name: "tagimage";
            type: IMAGE;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "pop";
               rel2.to: "pop";
               rel1.relative: 0.0 0.4;
               aspect: 1 1;
               aspect_preference: BOTH;
               align: 0.95 0.9;
               visible: 0;
            }
            description { state: "info" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
            description { state: "warning" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "warning.png";
               color: 170 170 170 170;
            }
            description { state: "error" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "error.png";
            }
            description { state: "yesno" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
            description { state: "cancel" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
         }
         part { name: "titlebg";
            type: IMAGE;
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "emc.swallow.content";
               rel2.to: "emc.swallow.content";
               rel2.relative: 1.0 0.0;
               rel1.offset: -15 -53;
               rel2.offset: 15 20;
               color: 255 255 255 200;
               image.normal: "dialog_header.png";
               image.border: 0 0 0 40;
            }
         }
         part { name: "emc.text.title"; /* API */
            type: TEXTBLOCK;
            clip_to: "clipper";
            scale: 1; // TODO why doesn't it scale ??
            description { state: "default" 0.0;
               rel1.to: "titlebg";
               rel2.to: "titlebg";
               rel2.offset: 0 -27;
               text {
                  text:"missing title...";
                  min: 1 1;
                  align: 0.5 0.7;
                  style: "epymc_dialog_title_style";
               }
            }
         }
         part { name: "emc.swallow.content"; /* API */
            type: SWALLOW;
            clip_to: "clipper";
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 500 200;
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
         }
         part { name: "close";
            type: IMAGE;
            clip_to: "clipper";
            mouse_events: 1;
            description { state: "default" 0.0;
               min: 60 60;
               fixed: 1 1;
               aspect: 1 1;
               color: 255 255 255 140;
               image.normal: "roundclose.png";
               rel1 {
                  to: "pop";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
               rel2 {
                  to: "pop";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
            }
            description { state: "bigger" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 240;
            }
         }
         part { name: "emc.box.buttons"; /* API */
            type: BOX;
            clip_to: "clipper";
            description { state: "default" 0.0;
               box {
                  layout: "horizontal";
                  padding: 0 4;
                  align: 0.5 0.5;
                  min: 0 1; // this doesn't work...it should
               }
               rel1 {
                  to: "emc.dialog.progress";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "emc.dialog.progress";
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel2.offset: 0 60;
            }
         }
         part { name: "emc.dialog.progress"; /* API */
            type: EXTERNAL;
            clip_to: "clipper";
            source: "elm/progressbar";
            description { state: "default" 0.0;
               visible: 0;
               rel1 {
                  to: "emc.swallow.content";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "emc.swallow.content";
                  relative: 1.0 1.0;
                  offset: 0 1;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel2.offset: 0 50;
            }
         }
      }
      programs {
         program { name: "close_mouse_in";
            signal: "mouse,in";
            source: "close";
            action: STATE_SET "bigger" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_out";
            signal: "mouse,out";
            source: "close";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_click"; /* API */
            signal: "mouse,down,1";
            source: "close";
            action: SIGNAL_EMIT "emc,dialog,close" "";
         }
         program { name: "show"; /* API */
            signal: "emc,dialog,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "show_done";
         }
         program { name: "show_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,show,done" "";
         }
         program { name: "hide"; /* API */
            signal: "emc,dialog,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "hide_done";
         }
         program { name: "hide_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,hide,done" "";
         }
         program { name: "show_buttons"; /* API */
            signal: "emc,dialog,buttons,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "hide_buttons"; /* API */
            signal: "emc,dialog,buttons,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "set_info"; /* API */
            signal: "emc,dialog,info,set";
            source: "emc";
            action: STATE_SET "info" 0.0;
            target: "tagimage";
         }
         program { name: "set_warning"; /* API */
            signal: "emc,dialog,warning,set";
            source: "emc";
            action: STATE_SET "warning" 0.0;
            target: "tagimage";
         }
         program { name: "set_error"; /* API */
            signal: "emc,dialog,error,set";
            source: "emc";
            action: STATE_SET "error" 0.0;
            target: "tagimage";
         }
         program { name: "set_yesno"; /* API */
            signal: "emc,dialog,yesno,set";
            source: "emc";
            action: STATE_SET "yesno" 0.0;
            target: "tagimage";
         }
         program { name: "set_cancel"; /* API */
            signal: "emc,dialog,cancel,set";
            source: "emc";
            action: STATE_SET "cancel" 0.0;
            target: "tagimage";
         }
         program { name: "set_progress_visible"; /* API */
            signal: "emc,dialog,progress,set";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.dialog.progress";
         }
      }
   }

/// notify items
   group { name: "emc/notify/default"; /* API todoc  */
      min: 400 100;
      parts {
         part { name: "clipper";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "bg";
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               image.normal: "frame3.png";
               image.border: 5 5 5 5;
            }
         }
         part { name: "emc.swallow.icon";  /* API to doc    */
            type: SWALLOW;
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               aspect:1.0 1.0;
               aspect_preference: VERTICAL;
               align: 0.0 0.5;
            }
         }
         part { name: "emc.text.caption";  /* API to doc    */
            type: TEXTBLOCK;
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               color: 0 0 0 255;
               rel1 {
                  relative: 1.0 0.0;
                  to_x: "emc.swallow.icon";
                  offset: 5 0;
               }
               text {
                  text:"";
                  // min: 1 1;
                  style: "epymc_dialog_style";
                  align: 0.0 0.0;
               }
            }
         }
      }
      programs {
      }
   }

/// sliders
   group { name: "emc/slider/default"; /* API */
      images {
         image: "slider_bg.png" COMP;
         image: "slider_bg_over.png" COMP;
         image: "slider_indicator.png" COMP;
      }
      parts {
         part { name: "base";
            mouse_events: 0;
            description { state: "default" 0.0;
               max: 99999 20;
               min: 0 6;
               rel1 {
                  offset: 1 0;
               }
               rel2 {
                  offset: -2 -1;
               }
               image.normal: "slider_bg.png";
               fill.smooth: 0;
            }
         }
         part { name: "level2";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "base";
               rel2 {
                  to_y: "base";
                  to_x: "dragable2";
                  relative: 0.5 1.0;
               }
               color: COLOR_GREEN 200;
            }
         }
         part { name: "level";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "base";
               rel2 {
                  to_y: "base";
                  to_x: "dragable1";
                  relative: 0.5 1.0;
               }
               color: COLOR_BLUE 200;
            }
         }
         part { name: "base_over";
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel1.offset: -1 -1;
               rel2.to: "base";
               rel2.offset: 0 0;
               image {
                  normal: "slider_bg_over.png";
                  border: 3 3 3 3;
               }
               fill.smooth: 0;
            }
         }
         part { name: "dragable1"; /* API */
            type: RECT;
            mouse_events: 1;
            repeat_events: 1;
            scale: 1;
            dragable {
               x: 1 1 0;
               y: 0 0 0;
               confine: "base";
              
            }
            description { state: "default" 0.0;
               min: 0 20;
               max: 0 20;
               fixed: 1 1;
               rel1 {
                  relative: 0.5 0.0;
                  to_x: "base";
               }
               rel2 {
                  relative: 0.5 1.0;
                  to_x: "base";
               }
            }
         }
         part { name: "dragable_image";
            type: IMAGE;
            dragable {
               x: 0 0 0;
               y: 0 0 0;
               confine: "base";
               events: "dragable1";
            }
            description { state: "default" 0.0;
               min: 16 22;
               max: 16 22;
               fixed: 1 1;
               align: 0.5 1.0;
               rel1.to: "dragable1";
               rel2.to: "dragable1";
               image {
                  normal: "slider_indicator.png";
                  border: 0 0 0 8;
               }
            }
         }
         part { name: "dragable2"; /* API */
            type: RECT;
            scale: 1;
            dragable {
               x: 1 1 0;
               y: 0 0 0;
               confine: "base";
            }
            description { state: "default" 0.0;
               min: 0 20;
               max: 0 20;
               fixed: 1 1;
               rel1 {
                  relative: 0.5 0.0;
                  to_x: "base";
               }
               rel2 {
                  relative: 0.5 1.0;
                  to_x: "base";
               }
            }
         }
      }
   }
}

