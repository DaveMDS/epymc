//// SCROLLER (elm/scroller/base/default) /////////////////////////////////////
#define SBSIZE 14
group { name: "elm/scroller/base/dialog";     // dialog text scroller
   alias: "elm/list/base/dialog";             // dialog lists
   alias: "elm/list/base/image_list";         // dialog lists (poster/fanart)
   alias: "elm/list/base/browser";            // Filemanager lists
   alias: "elm/genlist/base/browser";         // browser genlist
   alias: "elm/gengrid/base/browser";         // browser gengrid
   alias: "elm/scroller/entry/scrolledentry"; // EmcScrolledEntry

   data.item: "focus_highlight" "off";
   images {
      image: "sb_horiz_slider.png" COMP;
      image: "sb_vert_slider.png" COMP;
      image: "inset_bar_horiz_base.png" COMP;
      image: "inset_bar_horiz_light.png" COMP;
      image: "inset_bar_vert_base.png" COMP;
      image: "inset_bar_vert_light.png" COMP;
   }

   parts {
      program {
         signal: "load"; source: "";
         script {
            emit("reload", "elm");
         }
      }
      // vert bar /////
      part { name: "sb_vbar_show"; type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_vbar"; type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE 1;
            align: 1.0 0.0;
            rel1.relative: 1.0 0.0;
            rel1.offset: -1 0;
            rel2.relative: 1.0 0.0;
            rel2.to_y: "sb_hbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 99999;
         }
      }
      part { name: "sb_vbar_base"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 1.0;
            rel1.to: "sb_vbar_a1";
            rel2.relative: 1.0 0.0;
            rel2.to: "sb_vbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "sb_vbar_p1"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 1.0;
            rel1.to: "sb_vbar_a1";
            rel2.relative: 1.0 0.0;
            rel2.to: "elm.dragable.vbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_vbar_p2"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 1.0;
            rel1.to: "elm.dragable.vbar";
            rel2.relative: 1.0 0.0;
            rel2.to: "sb_vbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "elm.dragable.vbar"; type: RECT;
         clip_to: "sb_vbar";
         scale: 1;
         dragable.x: 0 0 0;
         dragable.y: 1 1 0;
         dragable.confine: "sb_vbar_base";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE SBSIZE;
            rel1.relative: 0.5  0.5;
            rel1.to: "sb_vbar_base";
            rel2.relative: 0.5  0.5;
            rel2.to: "sb_vbar_base";
            color: 0 0 0 0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_vbar_a1"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE 1;
            align: 0.5 0.0;
            color: 0 0 0 0;
            rel1.to: "sb_vbar";
            rel2.to: "sb_vbar";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_vbar_a2"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE 1;
            align: 0.5 1.0;
            color: 0 0 0 0;
            rel1.to: "sb_vbar";
            rel1.offset: 0 -1;
            rel1.relative: 0.0 1.0;
            rel2.to: "sb_vbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      program { signal: "elm,action,show,vbar"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sb_vbar";
         target: "sb_vbar_show";
         target: "elm.dragable.vbar";
         target: "sb_vbar_a1";
         target: "sb_vbar_a2";
      }
      program { signal: "elm,action,hide,vbar"; source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "sb_vbar";
         target: "sb_vbar_show";
         target: "elm.dragable.vbar";
         target: "sb_vbar_a1";
         target: "sb_vbar_a2";
      }
      program { signal: "mouse,down,1*"; source: "sb_vbar_p1";
         action: DRAG_VAL_PAGE 0.0 -1.0;
         target: "elm.dragable.vbar";
      }
      program { signal: "mouse,down,1*"; source: "sb_vbar_p2";
         action: DRAG_VAL_PAGE  0.0 1.0;
         target: "elm.dragable.vbar";
      }
      // horiz bar /////
      part { name: "sb_hbar_show"; type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_hbar"; type: RECT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 1 SBSIZE;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 -1;
            rel2.relative: 0.0 1.0;
            rel2.to_x: "sb_vbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 99999 0;
         }
      }
      part { name: "sb_hbar_base"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 1.0 0.0;
            rel1.to: "sb_hbar_a1";
            rel2.relative: 0.0 1.0;
            rel2.to: "sb_hbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "sb_hbar_p1"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 1.0 0.0;
            rel1.to: "sb_hbar_a1";
            rel2.relative: 0.0 1.0;
            rel2.to: "elm.dragable.hbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_hbar_p2"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 1.0 0.0;
            rel1.to: "elm.dragable.hbar";
            rel2.relative: 0.0 1.0;
            rel2.to: "sb_hbar_a2";
            fixed: 1 1;
         }
      }
      part { name: "elm.dragable.hbar"; type: RECT;
         clip_to: "sb_hbar";
         scale: 1;
         dragable.x: 1 1 0;
         dragable.y: 0 0 0;
         dragable.confine: "sb_hbar_base";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SBSIZE SBSIZE;
            rel1.relative: 0.5  0.5;
            rel1.to: "sb_hbar_base";
            rel2.relative: 0.5  0.5;
            rel2.to: "sb_hbar_base";
            color: 0 0 0 0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_hbar_a1"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 1 SBSIZE;
            align: 0.0 0.5;
            color: 0 0 0 0;
            rel1.to: "sb_hbar";
            rel2.to: "sb_hbar";
            rel2.relative: 0.0 1.0;
            rel2.offset: 0 -1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "sb_hbar_a2"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 1 SBSIZE;
            align: 1.0 0.5;
            color: 0 0 0 0;
            rel1.to: "sb_hbar";
            rel1.offset: -1 0;
            rel1.relative: 1.0 0.0;
            rel2.to: "sb_hbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      program { signal: "elm,action,show,hbar"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sb_hbar";
         target: "sb_hbar_show";
         target: "elm.dragable.hbar";
         target: "sb_hbar_a1";
         target: "sb_hbar_a2";
      }
      program { signal: "elm,action,hide,hbar"; source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "sb_hbar";
         target: "sb_hbar_show";
         target: "elm.dragable.hbar";
         target: "sb_hbar_a1";
         target: "sb_hbar_a2";
      }
      program { signal: "mouse,down,1*"; source: "sb_hbar_p1";
         action: DRAG_VAL_PAGE -1.0 0.0;
         target: "elm.dragable.hbar";
      }
      program { signal: "mouse,down,1*"; source: "sb_hbar_p2";
         action: DRAG_VAL_PAGE  1.0 0.0;
         target: "elm.dragable.hbar";
      }
      // content /////
      part { name: "bg"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.background";
            rel2.to: "elm.swallow.background";
            color: 0 0 0 0;
            color_class: "scrollframe_base";
         }
      }
      part { name: "clipper"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.background";
            rel2.to: "elm.swallow.background";
         }
      }
      part { name: "elm.swallow.background"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel2.relative: 0.0 0.0;
            rel2.to_x: "sb_vbar";
            rel2.to_y: "sb_hbar";
         }
      }
      part { name: "elm.swallow.content"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel2.relative: 0.0 0.0;
            rel2.to_x: "sb_vbar";
            rel2.to_y: "sb_hbar";
         }
      }
      part { name: "elm.swallow.overlay"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
      }
      // bars images /////
      part { name: "hbar_bg_light";
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "hbar_bg";
            rel1.offset: 0 1;
            rel2.to: "hbar_bg";
            rel2.offset: -1 0;
            image {
               normal: "inset_bar_horiz_light.png";
               border: 32 32 0 0;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "hbar_bg"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "sb_hbar_a1";
            rel1.relative: 1.0 0.0;
            rel2.to: "sb_hbar_a2";
            rel2.relative: 0.0 1.0;
            color: 255 255 255 128;
            image {
               normal: "inset_bar_horiz_base.png";
               border: 32 32 0 0;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "hbar_slider"; mouse_events: 0;
         clip_to: "sb_hbar_show";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "elm.dragable.hbar";
               offset: 0 1;
            }
            rel2 {
               to: "elm.dragable.hbar";
               offset: -1 -2;
            }
            color: 255 255 255 128;
            image {
               normal: "sb_horiz_slider.png";
               border: 32 32 2 2;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "vbar_bg_light";
         mouse_events:  0;
         description { state: "default" 0.0;
            rel1.to: "vbar_bg";
            rel1.offset: 0 1;
            rel2.to: "vbar_bg";
            rel2.offset: -1 0;
            image {
               normal: "inset_bar_vert_light.png";
               border: 0 0 32 32;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "vbar_bg"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "sb_vbar_a1";
            rel1.relative: 0.0 1.0;
            rel2.to: "sb_vbar_a2";
            rel2.relative: 1.0 0.0;
            color: 255 255 255 128;
            image {
               normal: "inset_bar_vert_base.png";
               border: 0 0 32 32;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "vbar_slider"; mouse_events: 0;
         clip_to: "sb_vbar_show";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "elm.dragable.vbar";
               offset: 1 0;
            }
            rel2 {
               to: "elm.dragable.vbar";
               offset: -2 -1;
            }
            color: 255 255 255 128;
            image {
               normal: "sb_vert_slider.png";
               border: 2 2 32 32;
               border_scale_by: 0.25;
               border_scale: 1;
            }
         }
      }
      part { name: "dim_effect"; type: RECT; mouse_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "effect" 0.0;
            color: 50 50 50 255;
         }
      }
   }
   programs {
      program { signal: "mouse,down,1*"; source: "elm.dragable.vbar";
         action: STATE_SET "clicked" 0.0;
         target: "elm.dragable.vbar";
      }
      program { signal: "mouse,down,*"; source: "elm.dragable.vbar";
         action: SIGNAL_EMIT "elm,vbar,press" "elm";
      }
      program { signal: "mouse,up,1"; source: "elm.dragable.vbar";
         action: STATE_SET "default" 0.0;
         target: "elm.dragable.vbar";
      }
      program { signal: "mouse,up,*"; source: "elm.dragable.vbar";
         action: SIGNAL_EMIT "elm,vbar,unpress" "elm";
      }
      program { signal: "mouse,down,1*"; source: "elm.dragable.hbar";
         action: STATE_SET "clicked" 0.0;
         target: "elm.dragable.hbar";
      }
      program { signal: "mouse,down,*"; source: "elm.dragable.hbar";
         action: SIGNAL_EMIT "elm,hbar,press" "elm";
      }
      program { signal: "mouse,up,1"; source: "elm.dragable.hbar";
         action: STATE_SET "default" 0.0;
         target: "elm.dragable.hbar";
      }
      program { signal: "mouse,up,*"; source: "elm.dragable.hbar";
         action: SIGNAL_EMIT "elm,hbar,unpress" "elm";
      }
      program { signal: "elm,action,looping,left"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,left,done";
      }
      program { name: "looping,left,done";
         action: SIGNAL_EMIT "elm,looping,left,done" "elm";
      }
      program { signal: "elm,action,looping,left,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program { signal: "elm,action,looping,right"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,right,done";
      }
      program { name: "looping,right,done";
         action: SIGNAL_EMIT "elm,looping,right,done" "elm";
      }
      program { signal: "elm,action,looping,right,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program { signal: "elm,action,looping,up"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,up,done";
      }
      program { name: "looping,up,done";
         action: SIGNAL_EMIT "elm,looping,up,done" "elm";
      }
      program { signal: "elm,action,looping,up,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program { signal: "elm,action,looping,down"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,down,done";
      }
      program { name: "looping,down,done";
         action: SIGNAL_EMIT "elm,looping,down,done" "elm";
      }
      program { signal: "elm,action,looping,down,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
   }
}
#undef SBSIZE

//// MAINMENU LISTS ///////////////////////////////////////////////////////////
group { name: "elm/list/base/mainmenu";         // Scroller for horizontal list
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
   }
}
group { name: "elm/list/base/mainmenu_sublist"; // Scroller for subitems list
   parts {
      part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.relative: -1.0 0.0;
            rel2.relative: 5.0 1.0;
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
         }
      }
   }
}
group { name: "elm/list/h_item/mainmenu";       // Main horizontal list item
   alias: "elm/list/h_item_odd/mainmenu";

   data.item: "selectraise" "on";
   data.item: "focusraise" "on";
   
   parts {
      // DBG_SHOW("base", 0, 0, 100)
      // DBG_SHOW("icon_container", 0, 100, 0)
      part { name: "base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 128 128;
         }
      }
      part { name: "elm.text"; /* API */
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         effect: GLOW;
         description { state: "default" 0.0;
            visible: 0;
            color: FONT_COLOR;
            color2: FONT_COLOR3;
            color3: FONT_COLOR3;
            rel1.relative: 0.0 -1.0;
            rel2.relative: 1.0 0.0;
            text {
               font: FONT3;
               size: FONT_SIZE_BIGGER;
               ellipsis: -1;
               align: 0.5 1.0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "icon_container";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            FIXED_SIZE(128, 128)
            align: 0.5 0.0;
         }
      }
      part { name: "elm.swallow.icon"; /* API */
         type: SWALLOW;
         mouse_events: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            rel1.to: "icon_container";
            rel2.to: "icon_container";
            rel1.relative: 0.15 0.15;
            rel2.relative: 0.85 0.85;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "sublist_clip";
         type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 0;
            rel1.relative: -1.0 0.0;
            rel2.relative: 5.0 1.0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "elm.swallow.end"; /* API */
         type: SWALLOW;
         clip_to: "sublist_clip";
         description { state: "default" 0.0;
            rel1.to: "icon_container";
            rel1.relative: 0.0 1.0;
            rel2.to: "base";
         }
      }
      program { signal: "elm,state,selected"; source: "elm"; /* API */
         action: STATE_SET "selected" 0.0;
         target: "elm.text";
         after: "selected2";
      }
      program { name: "selected2";
         action: STATE_SET "selected" 0.0;
         transition: LINEAR 0.2 CURRENT;
         target: "elm.swallow.icon";
         target: "sublist_clip";
      }
      program { signal: "elm,state,unselected"; source: "elm"; /* API */
         action: STATE_SET "default" 0.0;
         target: "elm.text";
         after: "unselected2";
      }
      program { name: "unselected2";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.2 CURRENT;
         target: "elm.swallow.icon";
         target: "sublist_clip";
      }
   }
}
group { name: "elm/list/item/mainmenu_sublist"; // Sub vertical list item
   alias: "elm/list/item_odd/mainmenu_sublist";
   data.item: "stacking" "above";
   images {
      image: "menu_bg_submenu.png" COMP;
      image: "shine.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "bg";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            rel1 {
               offset: -5 0;
            }
            rel2 {
               offset: 6 -1;
            }
            image {
               normal: "menu_bg_submenu.png";
               border: 0 0 1 1;
            }
            image.middle: NONE;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon"; /* API */
         type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.5 0.5;
         }
      }
      part { name: "elm.swallow.end"; /* API */
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               relative: 1.0  0.0;
               offset:   -5    4;
            }
            rel2 {
               relative: 1.0  1.0;
               offset:   -5   -5;
            }
         }
      }
      part { name: "elm.text"; /* API */
         type: TEXT;
         effect: SOFT_SHADOW;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            color: FONT_COLOR;
            color3: FONT_COLOR3;
            text {
               font: FONT3;
               size: FONT_SIZE_BIG;
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
            }
         }
      }
      part { name: "shine";
            description { state: "default" 0.0;
               visible: 0;
               FIXED_SIZE(69, 5)
               rel1 {
                  to: "bg";
               }
               rel2 {
                  to: "bg";
                  relative: 1.0 0.0;
               }
               image.normal: "shine.png";
            }
            description { state: "selected" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
   }
   programs {
      program { name: "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "bg";
         target:  "shine";
      }
      program { name: "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "bg";
         target:  "shine";
      }
   }
}

//// DIALOG LIST (big image without label) (elm/list/item/default) ////////////
group { name: "elm/list/item/image_list";
   alias: "elm/list/item_odd/image_list";
   alias: "elm/list/h_item/image_list";
   alias: "elm/list/h_item_odd/image_list";
   data.item: "stacking" "above";
   images {
      image: "bt_sm_base1.png" COMP;
      image: "bt_sm_shine.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sel_base";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            min: 300 300;
            color: 255 255 255 0;
            image {
               normal: "bt_sm_base1.png";
               border: 3 3 4 5;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 150;
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.5 0.5;
            rel1.offset: 10 10;
            rel2.offset: -11 -11;
         }
      }
      part { name: "sel_shine";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1.to: "sel_base";
            rel2.to: "sel_base";
            rel1.offset: -2 0;
            rel2.offset: 2 0;
            image {
               normal: "bt_sm_shine.png";
               border: 6 6 6 0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 255;
         }
      }
   }
   programs {
      program {
         name: "go_active";
         signal: "elm,state,selected";
         source: "elm";
         action: STATE_SET "selected" 0.0;
         target: "sel_base";
         target: "sel_shine";
      }
      program {
         name: "go_passive";
         signal: "elm,state,unselected";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sel_base";
         target: "sel_shine";
      }
   }
}

//// DIALOG LISTS (icon + text) (elm/list/item/default) ///////////////////////
group { name: "elm/list/item/default";
   data.item: "selectraise" "on";
   images {
      image: "vgrad_med_dark.png" COMP;
      image: "shadow_rounded_horiz.png" COMP;
      image: "shine.png" COMP;
      image: "bevel_curved_horiz_out.png" COMP;
      image: "bevel_horiz_out.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "base";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 64 64 64 255;
         }
      }
      part { name: "bevel";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "bevel_curved_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
         }
      }
      part { name: "sel_shadow";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "shadow_rounded_horiz.png";
            image.border: 0 0 9 9;
            rel1.offset: 0 -4;
            rel2.offset: -1 5;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "sel_base";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "vgrad_med_dark.png";
            fill {
               smooth: 0;
               size {
                  relative: 0.0 1.0;
                  offset: 120 0;
               }
            }
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "sel_bevel"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "bevel_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0  0.0;
               offset:   4    4;
            }
            rel2 {
               relative: 0.0  1.0;
               offset:   4   -5;
            }
         }
      }
      part { name: "elm.swallow.end";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               relative: 1.0  0.0;
               offset:   -5    4;
            }
            rel2 {
               relative: 1.0  1.0;
               offset:   -5   -5;
            }
         }
      }
      part { name: "elm.text";
         clip_to: "disclip";
         type:           TEXTBLOCK;
         mouse_events:   0;
         scale: 1;
         description {
            state: "default" 0.0;
            rel1 {
               to_x:     "elm.swallow.icon";
               relative: 1.0  0.0;
               offset:   4 4;
            }
            rel2 {
               to_x:     "elm.swallow.end";
               relative: 0.0  1.0;
               offset:   -1 -5;
            }
            text {
               min: 0 1;
               align: 0.0 0.5;
               style: "epymc_dialog_list_style";
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            text.style: "epymc_dialog_list_style_sel";
         }
      }
      part { name: "sel_shine";
         mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "shine.png";
            rel1.offset: 0 -2;
            rel1.to: "sel_base";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 2;
            rel2.to: "sel_base";
            min: 69 5;
            max: 69 5;
            fixed: 1 1;
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "sel_base";
            rel2.to: "sel_base";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
   }
   programs {
      program {
         name:    "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "sel_base";
         target:  "sel_shine";
         target:  "sel_bevel";
         target:  "sel_shadow";
         target:  "elm.text";
      }
      program {
         name:    "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "sel_base";
         target:  "sel_shine";
         target:  "sel_bevel";
         target:  "sel_shadow";
         target:  "elm.text";
         transition: LINEAR 0.1;
      }
      program {
         name:    "go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program {
         name:    "go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
   }
}
group { name: "elm/list/item_odd/default";
   inherit: "elm/list/item/default";
   parts {
      part { name: "base";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 56 56 56 255;
         }
      }
   }
}

//// FILEMANAGER LISTS (icon + text) (elm/list/item/default) //////////////////
group { name: "elm/list/item/browser"; alias: "elm/list/item_odd/browser";
   data.item: "selectraise" "on";
   images {
      image: "vgrad_med_dark.png" COMP;
      image: "shadow_rounded_horiz.png" COMP;
      image: "shine.png" COMP;
      image: "bevel_curved_horiz_out.png" COMP;
      image: "bevel_horiz_out.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sep";
         type: IMAGE;
         description { state: "default" 0.0;
            max: 99999 2;
            align: 0.5 1.0;
            image.normal: "separator.png";
         }
      }
      part { name: "bg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 100;
            image {
               normal: "list_item_sel_bg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0  0.0;
               offset:   4    4;
            }
            rel2 {
               relative: 0.0  1.0;
               offset:   4   -5;
            }
         }
      }
      part { name: "elm.swallow.end";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               relative: 1.0  0.0;
               offset:   -5    4;
            }
            rel2 {
               relative: 1.0  1.0;
               offset:   -5   -5;
            }
         }
      }
      part { name: "elm.text";
         clip_to: "disclip";
         type: TEXT;
         mouse_events:   0;
         scale: 1;
         description {
            state: "default" 0.0;
            rel1 {
               to_x:     "elm.swallow.icon";
               relative: 1.0  0.0;
               offset:   4 4;
            }
            rel2 {
               to_x:     "elm.swallow.end";
               relative: 0.0  1.0;
               offset:   -1 -5;
            }
            color: FONT_COLOR;
            text {
               font: FONT;
               size: FONT_SIZE;
               min: 0 1;
               align: 0.0 0.5;
               text_class: "list_item";
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "fg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 100;
            rel1.to: "bg";
            rel2.to: "bg";
            rel2.relative: 1.0 0.5;
            image {
               normal: "list_item_sel_fg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
   }
   programs {
      program { name: "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "elm.text";
         target:  "bg";
         target:  "fg";
      }
      program { name: "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.1;
         target:  "elm.text";
         target:  "bg";
         target:  "fg";
         
      }
      program { name: "go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name: "go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
   }
}

//// BROWSER GENLIST ITEM (elm/genlist/item_compress/default/default) /////////
group { name: "elm/genlist/item_compress/default/browser";
   data.item: "selectraise" "on";
   data.item: "focusraise" "on";
   data.item: "texts" "elm.text.main elm.text.end";
   data.item: "contents" "elm.swallow.icon elm.swallow.end";
   // data.item: "treesize" 16;
   // data.item: "flips" "elm.text.flip";
   images {
      image: "list_item_sel_bg.png" COMP;
      image: "list_item_sel_fg.png" COMP;
      image: "separator.png" COMP;
   }
   script {
      public g_duration, g_stopslide, g_timer_id, g_anim_id;
      
      public calc_duration() {
         new x, y, h, tw, cw;
         new Float:duration;
         new Float:width;
         get_geometry(PART:"elm.text.main", x, y, tw, h);
         get_geometry(PART:"text_clip", x, y, cw, h);
         width = tw - cw;
         duration = width / 50;
         set_float(g_duration, duration);
      }
      
      public slide_to_end_anim(val, Float:pos) {
         new stopflag;
         new id;
         stopflag = get_int(g_stopslide);
         if (stopflag == 1) return;
         set_tween_state(PART:"elm.text.main", pos, "slide_begin", 0.0, "slide_end", 0.0);
         if (pos >= 1.0) {
            id = timer(0.5, "slide_to_begin", 1);
            set_int(g_timer_id, id);
         }
      }
      public slide_to_begin() {
         new stopflag;
         new id;
         stopflag = get_int(g_stopslide);
         if (stopflag == 1) return;
         set_state(PART:"elm.text.main", "slide_begin", 0.0);
         id = timer(0.5, "slide_to_end", 1);
         set_int(g_timer_id, id);
      }
      public slide_to_end() {
         new stopflag;
         new id;
         stopflag = get_int(g_stopslide);
         if (stopflag == 1) return;
         id = anim(get_float(g_duration), "slide_to_end_anim", 1);
         set_int(g_anim_id, id);
      }
      public start_slide() {
         set_int(g_stopslide, 0);
         set_state(PART:"elm.text.main", "slide_begin", 0.0);
         calc_duration();
         slide_to_end();
      }
      public stop_slide() {
         new id;
         set_int(g_stopslide, 1);
         id = get_int(g_anim_id);
         cancel_anim(id);
         id = get_int(g_timer_id);
         cancel_timer(id);
         set_state(PART:"elm.text.main", "default", 0.0);
      }
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "sep";
         type: IMAGE;
         description { state: "default" 0.0;
            max: 99999 2;
            align: 0.5 1.0;
            image.normal: "separator.png";
         }
      }
      part { name: "bg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 200 42;
            visible: 0;
            color: 255 255 255 100;
            image {
               normal: "list_item_sel_bg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         scale: 1;
         /* This should be enough, but the genlist cache mechanism will remember
          * the status of icons from previous item usage, so we need to force
          * the show/hide of icons everytime the item is realized.
          */
         // description { state: "default" 0.0;
         //   rel2.relative: 0.0 1.0;
         //   align: 0.0 0.5;
         // }
         description { state: "default" 0.0;
            FIXED_SIZE(1, 40)
            align: 0.0 0.5;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            FIXED_SIZE(40, 40)
         }
      }
      part { name: "elm.swallow.end";
         type: SWALLOW;
         scale: 1;
         /* see note for "elm.swallow.icon" */
         // description { state: "default" 0.0;
         //    rel1.relative: 1.0 0.0;
         //    align: 1.0 0.5;
         //}
         description { state: "default" 0.0;
            FIXED_SIZE(1, 40)
            align: 1.0 0.5;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            FIXED_SIZE(40, 40)
         }
      }
      part { name: "elm.text.end";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "elm.swallow.end";
               relative: 0.0 0.0;
               offset: -5 0;
            }
            rel2 {
               to: "elm.swallow.end";
               relative: 0.0 1.0;
               offset: -6 -1;
            }
            align: 1.0 0.5;
            color: FN_COL_DISABLE;
            text {
               font: FONT;
               size: (FONT_SIZE - 2);
               min: 1 0;
               ellipsis: -1;
            }
         }
      }
      part { name: "text_clip";
         type: RECT;
         description { state: "default" 0.0;
            rel1 {
               to_x: "elm.swallow.icon";
               relative: 1.0  0.0;
               offset: 1  1;
            }
            rel2 {
               to_x: "elm.text.end";
               relative: 0.0  1.0;
               offset: -1  -1;
            }
         }
      }
      part { name: "elm.text.main";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         clip_to: "text_clip";
         description { state: "default" 0.0;
            rel1.to: "text_clip";
            rel2.to: "text_clip";
            text {
               style: "epymc_browser_slide_style";
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
            }
            align: 0.0 0.5;
         }
         description { state: "slide_begin" 0.0;
            inherit: "default" 0.0;
            align: 0.0 0.5;
         }
         description { state: "slide_end" 0.0;
            inherit: "default" 0.0;
            align: 1.0 0.5;
         }
      }
      // DBG_SHOW("elm.swallow.icon", 80, 80, 0)
      // DBG_SHOW("elm.swallow.end", 80, 0, 80)
      // DBG_SHOW("elm.text.end", 0, 80, 0)
      // DBG_SHOW("text_clip", 0, 80, 80)//DBG_SHOW("elm.text.main", 0, 80, 80)
      part { name: "fg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 100;
            rel1.to: "bg";
            rel2.to: "bg";
            rel2.relative: 1.0 0.5;
            image {
               normal: "list_item_sel_fg.png";
               border: 0 0 1 1;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
   }
   programs {
      program { name:"go_active";
         signal:  "elm,state,selected"; source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "bg";
         target:  "fg";
      }
      program { name:"go_passive";
         signal:  "elm,state,unselected"; source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "bg";
         target:  "fg";
         transition: LINEAR 0.1;
      }
      program { name: "start_slide";
         signal: "elm,state,selected"; source: "elm";
         script {
            start_slide();
         }
      }
      program { name: "stop_slide";
         signal: "elm,state,unselected"; source: "elm";
         script {
            stop_slide();
         }
      }
      program { name:"go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name:"go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
      program { signal: "icon,show"; source: "emc";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.icon";
      }
      program { signal: "icon,hide"; source: "emc";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.icon";
      }
      program { signal: "end,show"; source: "emc";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.end";
      }
      program { signal: "end,hide"; source: "emc";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.end";
      }
   }
}

//// BROWSER GENGRID ITEM (elm/gengrid/item/default/default) //////////////////
group { name: "elm/gengrid/item/default/browser";
   data.item: "texts" "elm.text";
   data.item: "contents" "elm.swallow.icon elm.swallow.end";
   images {
      image: "bt_sm_base1.png" COMP;
      image: "bt_sm_shine.png" COMP;
      image: "bt_sm_hilight.png" COMP;
   }
   parts {
      part { name: "event";
         type: RECT;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      // DBG_SHOW("event", 0, 0, 100)
      part { name: "bg";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1 {
               relative: 0.0 0.0;
               offset: -5 -5;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: 4 4;
            }
            image {
               normal: "bt_sm_base1.png";
               border: 6 6 6 6;
            }
            image.middle: SOLID;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 100;
            rel1 {
               relative: 0.0 0.0;
               offset: -2 -2;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: 1 1;
            }
         }
      }
      part { name: "elm.swallow.pad";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0  1.0;
               offset:   0    -10;
            }
            rel2 {
               to_y: "elm.text";
               relative: 0.0  0.0;
               offset:   -1   -1;
            }
         }
      }
      part { name: "elm.swallow.icon";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.offset: 6 6;
            rel2.offset: -7 -7;
         }
      }
      part { name: "elm.swallow.end";
         clip_to: "disclip";
         type: SWALLOW;
         description { state: "default" 0.0;
            rel1.relative: 0.6 -0.05;
            rel2.relative: 1.1  0.5;
            align: 1.0 0.0;
            aspect: 1 1;
            aspect_preference: BOTH;
         }
      }
      part { name: "elm.text";
         clip_to: "disclip";
         type: TEXTBLOCK;
         effect: SOFT_SHADOW;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
               to: "elm.swallow.icon";
               relative: 0.0  0.5;
            }
            rel2 {
               to: "elm.swallow.icon";
            }
            color: FONT_COLOR;
            color3: FONT_COLOR3;
            text {
               style: "epymc_browser_grid_style";
               align: 0.5 1.0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "fg1";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1.to: "bg";
            rel2.relative: 1.0 0.5;
            rel2.to: "bg";
            image {
               normal: "bt_sm_hilight.png";
               border: 6 6 6 0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 100;
         }
      }
      part { name: "fg2";
         clip_to: "disclip";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            rel1.to: "bg";
            rel2.to: "bg";
            image {
               normal: "bt_sm_shine.png";
               border: 6 6 6 0;
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 100;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            rel1.relative: -0.2 -0.2;
            rel2.relative:  1.2  1.2;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 64;
         }
      }
   }
   programs {
      // signal: elm,state,%s,active
      //   a "check" item named %s went active
      // signal: elm,state,%s,passive
      //   a "check" item named %s went passive
      // default is passive
      program { name:    "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "bg";
         target:  "fg1";
         target:  "fg2";
         target:  "elm.text";
      }
      program { name:    "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "bg";
         target:  "fg1";
         target:  "fg2";
         target:  "elm.text";
         transition: LINEAR 0.1;
      }
      program { name:    "go_disabled";
         signal:  "elm,state,disabled";
         source:  "elm";
         action:  STATE_SET "disabled" 0.0;
         target:  "disclip";
      }
      program { name:    "go_enabled";
         signal:  "elm,state,enabled";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "disclip";
      }
   }
}

//// SCROLLED ENTRY (elm/entry/base-noedit/default) ////////////////////
group { name: "elm/entry/base-noedit/scrolledentry";
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         multiline: 1;
         source: "elm/entry/selection/emc"; // selection under
         source5: "elm/entry/anchor/emc"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "epymc_default_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/selection/emc";
   parts {
      part { name: "bg";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 128 128 128 128;
         }
      }
   }
}
group { name: "elm/entry/anchor/emc";
   parts {
      part { name: "bg";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 128 0 0 64;
         }
      }
   }
}

//// MENU (elm/menu/item/default) /////////////////////////////////////////////
group { name: "elm/menu/item/emc";
   images.image: "vgrad_med_dark.png" COMP;
   images.image: "bevel_horiz_out.png" COMP;
   images.image: "shadow_rounded_horiz.png" COMP;
   images.image: "shine.png" COMP;
   script {
      public menu_text_visible; //0:hide (default), 1:visible
      public menu_disable; //0:enable, 1:disable
   }
   parts {
      part { name: "shadow"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "shadow_rounded_horiz.png";
            image.border: 0 0 9 9;
            rel1.offset: 0 -4;
            rel2.offset: -1 5;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
         }
      }
      part { name: "base"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "vgrad_med_dark.png";
            fill.smooth: 0;
            TILED_HORIZ(120)
            visible: 0;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
         }
      }
      part { name: "elm.swallow.content"; type: SWALLOW; mouse_events:  0;
         clip_to: "disabler";
         scale: 1;
         description { state: "default" 0.0;
            min: 32 32;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1.offset: 3 3;
            rel2.offset: 3 -5;
            rel2.relative: 0.0 1.0;
         }
         description { state: "noicon" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      // XXX: check/radio goes next (right of) content, no radio/check handle
      // XXX: need to handle no text?
      // XXX: need arrowspace on/off based on submenus in menu
      part { name: "arrowspace"; type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 15 15;
            max: 15 15;
            rel1.offset: -2 0;
            rel1.relative: 1.0 0.0;
            rel2.offset: -2 -1;
            align: 1.0 0.5;
         }
      }
      part { name: "elm.text"; type: TEXT; mouse_events:  0;
         // effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to_x: "elm.swallow.content";
            rel1.relative: 1.0 0.0;
            rel1.offset: 5 -1;
            rel2.to_x: "arrowspace";
            rel2.offset: -6 -1;
            rel2.relative: 0.0 1.0;
            //color: FN_COL_DEFAULT;
            color: 0 0 0 255;
            text { font: FONT; size: FONT_SIZE;
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
               text_class: "menu_item";
            }
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
            visible: 0;
         }
      }
      part { name: "label2"; type: TEXT; mouse_events: 0;
         effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            color: FN_COL_DISABLE;
            color3: FN_COL3_DISABLE;
            color_class: "menu_item_disabled";
            text { font: FONT; size: FONT_SIZE;
               text_source: "elm.text";
               align: 0.0 0.5;
               text_class: "menu_item";
            }
            visible: 0;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "label3"; type: TEXT; mouse_events: 0;
         // effect: GLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: -2 -3;
            rel1.to: "elm.text";
            rel2.offset: 2 1;
            rel2.to: "elm.text";
            //color: FN_COL_HIGHLIGHT;
            color: FONT_COLOR;
            color_class: "menu_item_active";
            text { font: FONT; size: FONT_SIZE;
               text_source: "elm.text";
               align: 0.0 0.5;
               text_class: "menu_item";
            }
            visible: 0;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "bevel"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "bevel_horiz_out.png";
            image.border: 0 0 2 2;
            image.middle: 0;
            fill.smooth: 0;
            visible: 0;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
         }
      }
      part { name: "shine";
         repeat_events: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel1.offset: 0 -2;
            rel2.to: "base";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 2;
            image.normal: "shine.png";
            visible: 0;
            FIXED_SIZE(69, 5)
         }
         description { state: "active" 0.0;
            inherit:  "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
         }
      }
      part { name: "event"; type: RECT;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 255 255 255 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "disabler"; type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 255;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 128;
         }
      }
   }
   programs {
      program { signal: "mouse,in"; source: "event";
         action: SIGNAL_EMIT "elm,action,activate" "elm";
         after: "selected";
      }
      program { signal: "mouse,out"; source: "event";
//         action: SIGNAL_EMIT "elm,action,inactivate" "elm";
         after: "unselected";
      }
      program { signal: "mouse,down,1"; source: "event";
         after: "selected";
      }
      program { signal: "mouse,up,1"; source: "event";
         action: SIGNAL_EMIT "elm,action,click" "elm";
      }
      program { name: "text_show";
         signal: "elm,state,text,visible"; source: "elm";
         script {
            set_int(menu_text_visible, 1);
//            set_state(PART:"elm.text", "active", 0.0);
//            set_state(PART:"elm.text2", "active", 0.0);
         }
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden"; source: "elm";
         script {
            set_int(menu_text_visible, 0);
//            set_state(PART:"elm.text", "default", 0.0);
//            set_state(PART:"elm.text2", "default", 0.0);
         }
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.content";
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden"; source: "elm";
         action: STATE_SET "noicon" 0.0;
         target: "elm.swallow.content";
      }
      program { name: "selected";
         signal: "elm,state,selected"; source: "elm";
         action: STATE_SET "active" 0.0;
         target: "shadow";
         target: "base";
         target: "bevel";
         target: "shine";
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program { name: "unselected";
         signal: "elm,state,unselected"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "shadow";
         target: "base";
         target: "bevel";
         target: "shine";
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program { signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "shadow";
         target: "base";
         target: "bevel";
         target: "shine";
         target: "event";
         target: "disabler";
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program { signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "shadow";
         target: "base";
         target: "bevel";
         target: "shine";
         target: "event";
         target: "disabler";
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
   }
}
group { name: "elm/menu/separator/emc";
   images {
      image: "separator_horiz.png" COMP;
   }
   parts {
      part { name: "separator";
         description { state: "default" 0.0;
            min: 2 2;
            rel1.offset: 0 2;
            rel2.offset: -1 -3;
            image.normal: "separator_horiz.png";
            fill.smooth: 0;
         }
      }
   }
}
group { name: "elm/hover/base/menu/emc";
   images {
      image: "vgrad_med_lighter.png" COMP;
      image: "bevel_out.png" COMP;
      image: "shine.png" COMP;
      image: "win_shadow.png" COMP;
   }
   parts {
      part { name: "elm.swallow.offset"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 0.0;
         }
      }
      part { name: "elm.swallow.size"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            rel1.to: "elm.swallow.offset";
            rel1.relative: 1.0 1.0;
            rel2.to: "elm.swallow.offset";
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "base"; type: RECT; repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "elm.swallow.slot.left"; type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
      part { name: "elm.swallow.slot.right"; type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
      part { name: "elm.swallow.slot.top"; type: SWALLOW;
         description { state: "default" 0.0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "bottomclip"; type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "shadow";
         clip_to: "bottomclip";
         description { state: "default" 0.0;
            image.normal: "win_shadow.png";
            image.border: 14 14 14 14;
            image.middle: 0;
            rel1.to: "bottom";
            rel1.offset: -7  -3;
            rel2.to: "bottom";
            rel2.offset: 6 11;
            fill.smooth: 0;
         }
      }
      part { name: "top";
         clip_to: "bottomclip";
         description { state: "default" 0.0;
            image.normal: "vgrad_med_lighter.png";
            rel1.to: "bottom";
            rel2.to_x: "bottom";
            rel2.to_y: "shine";
            rel2.offset: -1 0;
            min: 0 23;
            align: 0.0 0.0;
            fill.smooth: 0;
            TILED_HORIZ(120)
            fixed: 0 1;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "bg"; type: RECT; mouse_events: 0;
         clip_to: "bottomclip";
         description { state: "default" 0.0;
            rel1.to_x: "bottom";
            rel1.to_y: "top";
            rel1.relative: 0.0 1.0;
            rel2.to: "bottom";
            color: 64 64 64 255;
         }
      }

      part { name: "bottom";
         clip_to: "bottomclip";
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.slot.bottom";
            rel1.offset: 0 -5;
            rel2.to: "elm.swallow.slot.bottom";
            rel2.offset: -1 4;
            image.normal: "bevel_out.png";
            image.border: 1 1 1 1;
            image.middle: 0;
            fill.smooth: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "elm.swallow.slot.bottom"; type: SWALLOW;
         clip_to: "bottomclip";
         description { state: "default" 0.0;
            align: 0.5 0.0;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 1.0;
            rel2.offset: -1 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "bevel"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "bottom";
            rel2.to: "bottom";
            image.normal: "bevel_out.png";
            image.border: 1 1 1 1;
            image.middle: 0;
            fill.smooth: 0;
         }
      }
      part { name: "shine"; mouse_events: 1;
         repeat_events:1;
         description { state: "default" 0.0;
            rel1.to: "bottom";
            rel1.offset: 0 -2;
            rel2.to: "bottom";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 2;
            image.normal: "shine.png";
            FIXED_SIZE(69, 5)
         }
      }
      part { name: "elm.swallow.slot.middle"; type: SWALLOW;
         repeat_events:1;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.size";
            rel2.to: "elm.swallow.size";
         }
      }
   }
   programs {
      program { name: "end";
         signal: "mouse,up,1"; source: "base";
         action: SIGNAL_EMIT "elm,action,dismiss" "elm";
      }
      program { name: "bottomshow";
         signal: "elm,action,slot,bottom,show"; source: "elm";
         action: STATE_SET "visible" 0.0;
         transition: DECELERATE 0.5;
         target: "bottomclip";
         target: "bottom";
         target: "elm.swallow.slot.bottom";
      }
      program { name: "bottomhide";
         signal: "elm,action,slot,bottom,hide"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: DECELERATE 0.5;
         target: "bottomclip";
         target: "bottom";
         target: "elm.swallow.slot.bottom";
      }
   }
}

//// VKEYBOARD ENTRY (elm/entry/base-single/default) //////////////////////////
group { name: "elm/entry/base-single/vkeyboard";
   images.image: "box_glow.png" COMP;
   parts {
      part { name: "focus"; type: IMAGE; nomouse;
         description { state: "default" 0.0;
            visible: 0;
            rel1.offset: -7 -7;
            rel2.offset: 5 5;
            image {
               normal: "box_glow.png";
               border: 12 12 12 12;
               middle: NONE;
            }
            fill.smooth: 0;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         entry_mode: EDITABLE;
         select_mode: DEFAULT;
         cursor_mode: BEFORE;
         multiline: 0;
         // source: "elm/entry/selection/emc"; // selection under
         source4: "elm/entry/cursor/vkeyboard"; // cursorover
         description { state: "default" 0.0;
            rel1.offset: 2 0;
            rel2.offset: -3 -1;
            text {
               style: "epymc_default_style";
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
            }
         }
      }
      program {
         signal: "load"; source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "entry_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "focus";
      }
      program { name: "entry_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "focus";
      }
   }
}
group { name: "elm/entry/cursor/vkeyboard";
   parts {
      part { name: "cursor"; type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 0;
         }
         description { state: "visible" 0.0;
            color: 255 255 255 255;
         }
      }
   }
   programs {
      program { name: "pulse1";
         signal: "load";
         source: "";
         action: STATE_SET "visible" 0.0;
         transition: LINEAR 0.5;
         target: "cursor";
         after: "pulse2";
      }
      program { name: "pulse2";
         in: 1.0 0.0;
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "cursor";
         after: "pulse1";
      }
   }
}

//// BUTTONS (elm/button/base/default) ////////////////////////////////////////
group { name: "elm/button/base/emc";
   images.image: "button_normal.png" COMP;
   images.image: "button_clicked.png" COMP;
   images.image: "button_selected.png" COMP;
#define ICON     1
#define LABEL    2
#define MASK     3
#define DISABLE  4
   script {
      public btmode;
      public eval_mode(m) {
         new m1 = m & MASK;
         new d = m & DISABLE;
         if (m1 == (ICON | LABEL)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
               set_state(PART:"elm.text", "visible", 0.0);
               set_state(PART:"icon_clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
               set_state(PART:"elm.text", "disabled_visible", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
            }
         } else if (m1 == (ICON)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "icononly", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
               set_state(PART:"elm.text", "default", 0.0);
               set_state(PART:"icon_clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "icononly", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
               set_state(PART:"elm.text", "default", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
            }
         } else if (m1 == (LABEL)) {
            if (!d) {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"elm.text", "textonly", 0.0);
               set_state(PART:"icon_clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"elm.text", "disabled_textonly", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
            }
         } else {
            if (!d) {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"elm.text", "icononly", 0.0);
               set_state(PART:"icon_clip", "default", 0.0);
               set_state(PART:"event", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "default", 0.0);
               set_state(PART:"sizer.content", "default", 0.0);
               set_state(PART:"elm.text", "icononly", 0.0);
               set_state(PART:"icon_clip", "disabled", 0.0);
               set_state(PART:"event", "disabled", 0.0);
            }
         }
      }
   }
   parts {
      image { "base"; nomouse;
         desc { "default";
            min: 50 35;
            image.normal: "button_normal.png";
            image.border: 4 4 3 5;
            image.middle: SOLID;
            rel1.offset: -1 0;
            rel2.offset: 0 1;
            fill.smooth: 0;
         }
         desc { "clicked";
            inherit: "default";
            image.normal: "button_clicked.png";
            image.border: 5 5 4 6;
         }
         desc { "focused";
            inherit: "default";
            image.normal: "button_selected.png";
         }
      }
      rect { "icon_clip";
         desc { "default";
         }
         desc { "disabled";
            inherit: "default";
            color: 255 255 255 64;
         }
      }
      swallow { "elm.swallow.content"; nomouse;
         clip_to: "icon_clip";
         desc { "default";
            fixed: 1 0;
            align: 0.0 0.5;
            rel1.offset: 6 5;
            rel1.to: "base";
            rel2.relative: 0.0 1.0;
            rel2.offset: 6 -8;
            rel2.to: "base";
            visible: 0;
         }
         desc { "visible";
            inherit: "default";
            fixed: 1 0;
            aspect: 1.0 1.0;
            visible: 1;
         }
         desc { "icononly";
            inherit: "default";
            fixed: 0 0;
            align: 0.5 0.5;
            rel2.relative: 1.0 1.0;
            rel2.offset: -7 -8;
            visible: 1;
         }
      }
      text { "sizer.content"; nomouse;
         scale: 1;
         desc { "default";
//            fixed: 1 1;
            visible: 0;
            text { font: FONT; size: FONT_SIZE;
               min: 0 0;
               text_class: "button_text";
            }
         }
         desc { "visible";
            inherit: "default";
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
         desc { "icononly";
            inherit: "default";
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            text {
               min: 1 1;
               ellipsis: -1;
               text: "M";
            }
         }
      }
      text { "elm.text"; nomouse;
         effect: SHADOW BOTTOM;
         scale: 1;
         desc { "default";
            rel1.offset: 0 5;
            rel1.relative: 1.0 0.0;
            rel1.to_x: "elm.swallow.content";
            rel1.to_y: "base";
            rel2.offset: -8 -8;
            rel2.to: "base";
            color_class: "button_text";
            color: FONT_COLOR;
            color3: FONT_COLOR3;
            text { font: FONT; size: FONT_SIZE;
               align: 0.5 0.5;
               min: 0 0;
               text_class: "button";
            }
            visible: 0;
            fixed: 1 1;
         }
         desc { "visible";
            inherit: "default";
            rel1.offset: 2 5;
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
         desc { "textonly";
            inherit: "default";
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
         desc { "disabled_visible";
            inherit: "default";
            rel1.offset: 2 5;
            color_class: "button_text_disabled";
            color: FONT_COLOR_NOSEL;
            color3: FONT_COLOR3_NOSEL;
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
         desc { "disabled_textonly";
            inherit: "default";
            color_class: "button_text_disabled";
            color: FONT_COLOR_NOSEL;
            color3: FONT_COLOR3_NOSEL;
            text.min: 1 1;
            text.ellipsis: -1;
            visible: 1;
            fixed: 0 0;
         }
      }
      rect { "event";
         desc { "default";
            color: 0 0 0 0;
         }
         desc { "disabled";
            inherit: "default";
            visible: 0;
         }
      }
   }
   programs {
      program {
         signal: "mouse,down,1"; source: "event";
         action: SIGNAL_EMIT "elm,action,press" "elm";
         after: "button_click_anim";
      }
      program { name: "button_click_anim";
         action: STATE_SET "clicked" 0.0;
         target: "base";
      }
      program { name: "button_unclick";
         signal: "mouse,up,1"; source: "event";
         action: SIGNAL_EMIT "elm,action,unpress" "elm";
         after: "button_unclick_anim";
      }
      program { name: "button_unclick_anim";
         action: STATE_SET "default" 0.0;
         target: "base";
      }
      program { name: "buttonactivate";
         signal: "elm,anim,activate"; source: "elm";
         action: STATE_SET "clicked" 0.0;
         target: "base";
         after: "button_unpressed_anim";
      }
      program { name: "button_unpressed_anim";
         action: STATE_SET "default" 0.0;
         in: 0.5 0.0;
         target: "base";
      }
      program {
         signal: "mouse,clicked,1"; source: "event";
         action: SIGNAL_EMIT "elm,action,click" "elm";
      }
      program { name: "button_text_visible";
         signal: "elm,state,text,visible"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= LABEL; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_text_hidden";
         signal: "elm,state,text,hidden"; source: "elm";
         script {
            new m = get_int(btmode);
            m &= ~LABEL; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_icon_visible";
         signal: "elm,state,icon,visible"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= ICON; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_icon_hidden";
         signal: "elm,state,icon,hidden"; source: "elm";
         action:  STATE_SET "default" 0.0;
         script {
            new m = get_int(btmode);
            m &= ~ICON; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_state_disabled";
         signal: "elm,state,disabled"; source: "elm";
         script {
            new m = get_int(btmode);
            m |= DISABLE; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_state_enabled";
         signal: "elm,state,enabled"; source: "elm";
         script {
            new m = get_int(btmode);
            m &= ~DISABLE; set_int(btmode, m);
            eval_mode(m);
         }
      }
      program { name: "button_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "base";
      }
      program { name: "button_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "base";
      }
   }
#undef ICON
#undef LABEL
#undef MASK
#undef DISABLE
}
