
#define DEBUG_ENABLE 0
// #if DEBUG_ENABLE
// #define DBG(...) { \
   // new _buf[128]; \
   // snprintf(_buf, sizeof(_buf), __VA_ARGS__); \
   // set_text(PART:"embryo_dbg", _buf); }
// #else
// #define DBG(...)
// #endif

#define FONT "Cuprum"
#define FONT_BOLD "Cuprum:style=Bold"
#define FONT_SIZE 16
#define FONT_SIZE_BIG 24
#define FONT_SIZE_BIGGER 48
#define FONT_COLOR 255 255 255 255
#define FONT_COLOR3 0 0 0 64

#define COLOR_BLUE 63 108 168

images {
   image: "background.jpg" COMP;
   image: "frame.png" COMP;
   image: "frame2.png" COMP;
   image: "frame3.png" COMP;
   image: "separator.png" COMP;
   image: "header.png" COMP;
   image: "volume.png" COMP;
}

fonts {
   font: "Cuprum.ttf" "Cuprum";
   font: "Lobster.ttf" "Lobster";
}

styles {
   style { name: "epymc_default_style";
      base: "font="FONT" font_size="FONT_SIZE" color=#fff wrap=word";
      tag:  "br" "\n";
      tag:  "tab" "\t";
      tag:  "em" "+ font=Sans:style=Oblique";
      tag:  "b" "+ font=Sans:style=Bold";
      tag:  "title" "+ font=Sans:style=Bold font_size="FONT_SIZE_BIG;
      tag:  "hilight" "+ font=Sans:style=Bold";
      //~ tag:  "link" "+ color=#800 underline=on underline_color=#8008";
   }

   style { name: "epymc_dialog_style";
      base: "font=Sans font_size="FONT_SIZE" color=#777 wrap=word";
      tag:  "br" "\n";
      tag:  "tab" "\t";
      tag:  "em" "+ font=Sans:style=Oblique";
      tag:  "b" "+ font=Sans:style=Bold";
      tag:  "title" "+ font=Sans:style=Bold color=#b00 font_size="FONT_SIZE_BIG;
      tag:  "hilight" "+ font=Sans:style=Bold";
      //~ tag:  "link" "+ color=#800 underline=on underline_color=#8008";
   }

   style { name: "epymc_dialog_title_style";
      base: "font=Cuprum align=center font_size="FONT_SIZE_BIGGER" color=#B00 wrap=none";
   }
   // font=Sans font_size=10 align=center color=#fff wrap=mixed ellipsis=1.0
   // font=Sans text_class=fileman_icon wrap=[word,mixed,none] style=soft_shadow shadow_color=#0002
   // left_margin=4 right_margin=4
}

externals {
   external: "elm";
}

collections {

   #include "elm_extension.edc"
   #include "icons.edc"
   
   group { name: "emc/main/layout"; /* API */

/// clock embryo script
      script {
          public clock_cb(val) {
            new year, month, day, yearday, weekday, hour, minute;
            new Float:second;
            new buf[32];

            date(year, month, day, yearday, weekday, hour, minute, second);
            timer(60.0 - (second), "clock_cb", 1);

            buf[0] = 0;
            if (minute < 10 && hour < 10) { snprintf(buf, 10, "0%i:0%i", hour, minute); }
            else if (minute < 10)         { snprintf(buf, 10, "%i:0%i", hour, minute); }
            else if (hour < 10)           { snprintf(buf, 10, "0%i:%i", hour, minute); }
            else                          { snprintf(buf, 10, "%i:%i", hour, minute); }
            set_text(PART:"topbar.clock", buf);
         }
      }

      parts {

/// main background
         part { name: "bg.bg";
            type: IMAGE;
            description { state: "default" 0.0;
               min: 1280 720;
               image.normal: "background.jpg";
            }
         }
         part { name: "bg.swallow.backdrop1"; /* API */
            type: SWALLOW;
            description { state: "default" 0.0;
            }
         }
         part { name: "bg.swallow.backdrop2"; /* API _unused_ */
            type: SWALLOW;
            description { state: "default" 0.0;
            }
         }

/// browser top bar
         part { name: "topbar.clip";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               max: 9999 40;
               align: 0.5 0.0;
               rel1.relative: 0.0 -0.3;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
            }
         }
         part { name: "topbar.bg";
            type: IMAGE;
            description { state: "default" 0.0;
               rel1.to: "topbar.clip";
               rel2.to: "topbar.clip";
               rel2.offset: 0 28;
               image.normal: "header.png";
               image.border: 31 39 2 39;
            }
         }
         part { name: "topbar.home_icon";
            type: IMAGE;
            description { state: "default" 0.0;
               image.normal: "icon_home.png";
               color: 255 255 255 170;
               aspect: 1 1;
               aspect_preference: BOTH;
               align: 0.0 0.5;
               rel1 {
                  to: "topbar.clip";
                  offset: 20 0;
               }
               rel2 {
                  to: "topbar.clip";
               }
            }
         }
         part { name: "topbar.title"; /* API */
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               color: 200 200 200 200;
               rel1 {
                  to: "topbar.clip";
                  to_x: "topbar.home_icon";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "topbar.clip";
               }
               text {
                  font: FONT;
                  size: FONT_SIZE_BIG;
                  align: 0.0 0.7;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.offset: 60 0;
               rel2.offset: -1 0;
            }
         }
         part { name: "topbar.box"; /* API */
            type: BOX;
            mouse_events: 1;
            repeat_events: 1;
            description { state: "default" 0.0;
               max: 200 -1;
               align: 0.8 0.5;
               rel1 {
                  to: "topbar.title";
                  offset: 0 4;
               }
               rel2 {
                  to: "topbar.clock";
                  offset: -1 -4;
               }
               box {
                  layout: "horizontal";
                  padding: 4 4;
               }
            }
         }
         part { name: "topbar.clock";
            type: TEXT;
            clip_to: "topbar.clip";
            scale: 1;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color: COLOR_BLUE 200;
               rel1 {
                  to: "topbar.clip";
               }
               rel2 {
                  to: "topbar.clip";
                  offset: -40 0;
               }
               text {
                  font: FONT;
                  size: FONT_SIZE_BIG;
                  align: 1.0 0.7;
               }
            }
         }
         part { name: "topbar.list.spacer";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               max: 9999 40;
               visible: 0;
               align: 0.5 0.0;
            }
         }

/// browser view: list
         part { name: "browser.list.clip";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.list.list_frame";
            type: IMAGE;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               rel1.offset: 5 10;
               rel1.to: "topbar.list.spacer";
               rel1.relative: 0.0 1.0;
               rel2.relative: 0.5 1.0;
               rel2.offset: -1 -10;
               image.normal: "frame.png";
               image.border: 0 0 92 78;
            }
         }
         part { name: "browser.list.list_clip";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
               color: 255 255 255 0;
               rel1 {
                  to: "browser.list.list_frame";
                  offset: 14 20;
               }
               rel2 {
                  to: "browser.list.list_frame";
                  offset: -17 -75;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.list.genlist1"; /* API */
            type: EXTERNAL;
            source: "elm/genlist";
            clip_to: "browser.list.list_clip";
            description { state: "default" 0.0;
               rel1.to: "browser.list.list_clip";
               rel2.to: "browser.list.list_clip";
            }
            description { state: "center" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "left" 0.0;
               inherit: "default" 0.0;
               rel1.relative: -1.0 0.0;
               rel2.relative: 0.0 1.0;
            }
            description { state: "right" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 1.0 0.0;
               rel2.relative: 2.0 1.0;
            }
         }
         part { name: "browser.list.genlist2"; /* API */
            type: EXTERNAL;
            source: "elm/genlist";
            clip_to: "browser.list.list_clip";
            description { state: "default" 0.0;
               rel1 {
                  to: "browser.list.genlist1";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "browser.list.genlist1";
                  relative: 2.0 1.0;
               }
            }
            description { state: "on_the_right" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "on_the_left" 0.0;
               rel1 {
                  to: "browser.list.genlist1";
                  relative: -1.0 0.0;
               }
               rel2 {
                  to: "browser.list.genlist1";
                  relative: 0.0 1.0;
               }
            }
         }
         part { name: "browser.list.total"; /* API */
            type: TEXT;
            clip_to: "browser.list.clip";
            effect: SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: 0 0 0 255;
               rel1 {
                  to: "browser.list.list_frame";
                  relative: 1.0 1.0;
                  offset: -185 -70;
               }
               rel2 {
                  to: "browser.list.list_frame";
                  relative: 1.0 1.0;
                  offset: -27 -38;
               }
               text {
                  text: "Total: 10";
                  font: FONT;
                  size: FONT_SIZE_BIG-4;
               }
            }
         }
         part { name: "browser.list.poster"; /* API */
            type: SWALLOW;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               rel1 {
                  to_y: "topbar.list.spacer";
                  relative: 0.5 1.0;
                  offset: 20 20;
               }
               rel2 {
                  relative: 1.0 0.62;
                  offset: -20 0;
               }
            }
         }
         part { name: "browser.list.info_bg";
            type: IMAGE;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               image.normal: "frame2.png";
               image.border: 8 8 8 8;
               rel1 {
                  to: "browser.list.info";
                  offset: -20 -15;
               }
               rel2 {
                  to: "browser.list.info";
                  offset: 8 8;
               }
            }
         }
         part { name: "browser.list.info"; /* API */
            type: TEXTBLOCK;
            clip_to: "browser.list.clip";
            multiline: 1;
            scale: 1;
            description { state: "default" 0.0;
               rel1 {
                  relative: 0.5 0.65;
                  offset: 30 10;
               }
               rel2 {
                  offset: -20 -30;
               }
               text {
                  style: "epymc_default_style";
                  align: 0.0 0.0;
               }
            }
         }

/// browser view: grid
         part { name: "browser.grid.gengrid"; /* API */
            type: SWALLOW;
            clip_to: "browser.grid.clip";
            description { state: "default" 0.0;
               color: 255 255 255 100;
               rel1.offset: 0 100;
            }
         }
         part { name: "browser.grid.title"; /* API */
            type: TEXT;
            clip_to: "browser.grid.clip";
            effect: FAR_SOFT_SHADOW;
            description { state: "default" 0.0;
               color: 200 200 200 255;
               color3: 50 50 50 100;
               rel1.offset: 0 40;
               rel2.relative: 1.0 0.0;
               rel2.offset: 0 100;
               text {
                  font: FONT_BOLD;
                  size: 40;
               }
            }
         }
         part { name: "browser.grid.clip";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }

/// mainmenu
         part { name: "mainmenu.list"; /* API */
            type: EXTERNAL;
            source: "elm/list";
            description { state: "default" 0.0;
               rel1 {
                  relative: 0.3 -0.9;
                  offset: 0 0;
               }
               rel2 {
                  relative: 0.7 -0.1;
                  offset: 0 0;
               }
               params {
                  choice: "horizontal mode" "scroll";
                  choice: "scroll horizontal" "off";
                  choice: "scroll vertical" "off";
                  bool: "multi" "0";
                  bool: "always_select" "1";
               }
            }
            description { state: "visible" 0;
               inherit: "default" 0.0;
               rel1 {
                  relative: 0.3 0.1;
                  offset: 0 0;
               }
               rel2 {
                  relative: 0.7 0.9;
                  offset: 0 0;
               }
            }
         }

/// videoplayer
         part { name: "videoplayer.bg";
            type: RECT;
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
               color: 0 0 0 255;
            }
         }
         part { name: "videoplayer.video"; /* API */
            type: SWALLOW;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
            }
         }
         part { name: "videoplayer.clip";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "videoplayer.controls.bg";
            type: IMAGE;
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
               color: 255 255 255 255;
               rel1.relative: 0.0 1.0;
               rel2.relative: 1.0 1.0;
               rel2.offset: 0 100;
               image.normal: "frame3.png";
               image.border: 2 2 2 2;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.offset: 0 -100;
               rel2.offset: 0.0 0.0;
            }
         }
         part { name: "videoplayer.controls.btn_box"; /* API   todoc*/ 
            type: BOX;
            description { state: "default" 0.0;
               rel1.to: "videoplayer.controls.bg";
               rel1.offset: 0 15;
               rel2.relative: 1.0 0.0;
               rel2.to: "videoplayer.controls.bg";
               rel2.offset: 0 50;
               box {
                  layout: "horizontal";
                  padding: 5 0;
               }
            }
         }
         part { name: "videoplayer.controls.length"; /* API */
            type: TEXT;
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               rel1 {
                  to: "videoplayer.controls.bg";
                  offset: 10 0;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
                  offset: -11 0;
               }
               text {
                  text: "0:00:00";
                  font: FONT_BOLD;
                  size: FONT_SIZE_BIGGER;
                  align: 1.0 0.0;
               }
            }
         }
         part { name: "videoplayer.controls.position"; /* API */
            type: TEXT;
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               rel1 {
                  to: "videoplayer.controls.bg";
                  offset: 10 0;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
               }
               text {
                  text: "0:00:00";
                  font: FONT_BOLD;
                  size: FONT_SIZE_BIGGER;
                  align: 0.0 0.0;
               }
            }
         }
         part { name: "videoplayer.controls.slider"; /* API */
            type: EXTERNAL;
            clip_to: "videoplayer.clip";
            source: "elm/slider";
            description { state: "default" 0.0;
               rel1 {
                  to: "videoplayer.controls.bg";
                  relative: 0.0 0.5;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
               }
               params {
                  string: "label" "";
                  double: "min" "0";
                  double: "max" "1";
                  double: "value" "0.5";
                  bool: "horizontal" "1";
                  bool: "inverted" "0";
                  int: "span" "0";
                  string: "unit format" " ";
                  string: "indicator format" "";
               }
            }
         }

/// volume
         part { name: "volume.bg";
            type: IMAGE;
            mouse_events: 0;
            description { state: "default" 0.0;
               visible: 0;
               color: 255 255 255 180;
               rel1 {
                  relative: 0.3 0.0;
                  offset: 0 -50;
               }
               rel2 {
                  relative: 0.7 0.05;
                  offset: -1 -50;
               }
               image.normal: "bt_dis_base.png";
               image.border: 5 5 5 5;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel1.offset: 0 0;
               rel2.offset: 0 0;
            }
         }
         part { name: "volume.slider"; /* API */
            type: EXTERNAL;
            source: "elm/slider";
            description { state: "default" 0.0;
               rel1 {
                  to: "volume.bg";
                  relative: 0.1 0.0;
               }
               rel2 {
                  to: "volume.bg";
               }
               params {
                  string: "label" "";
                  double: "min" "0";
                  double: "max" "100";
                  double: "value" "10";
                  bool: "horizontal" "1";
                  bool: "inverted" "0";
                  int: "span" "0";
                  string: "unit format" "";
                  string: "indicator format" "";
               }
            }
         }
         part { name: "volume.icon";
            type: IMAGE;
            description { state: "default" 0.0;
               image.normal: "volume.png";
               align: 0.0 0.5;
               aspect: 1 1;
               aspect_preference: VERTICAL;
               rel1 {
                  to: "volume.bg";
                  relative: 0.0 0.0;
                  offset: 8 2;
               }
               rel2 {
                  to: "volume.bg";
                  relative: 1.0 1.0;
                  offset: -1 -3;
               }
            }
         }

/// debug label for embryo scripting
         #if DEBUG_ENABLE
         part { name: "embryo_dbg";
            type: TEXT;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               text {
                  text: "EMBRYO DEBUG ENABLED";
                  font: FONT;
                  size: FONT_SIZE;
                  align: 1.0 1.0;
               }
            }
         }
         #endif
      }
      programs {
         program { name: "init";
            signal: "load";
            source: "";
            script {
               clock_cb(0);
            }
         }
///
         program { name: "mainmenu_show"; /* API */
            signal: "mainmenu,show";
            source: "emc";
            action: STATE_SET "visible" 0.00;
            transition: DECELERATE 0.5;
            target: "mainmenu.list";
         }
         program { name: "mainmenu_hide"; /* API */
            signal: "mainmenu,hide";
            source: "emc";
            action: STATE_SET "default" 0.00;
            transition: ACCELERATE 0.5;
            target: "mainmenu.list";
         }
///
         program { name: "browser_list_show"; /* API */
            signal: "browser,list,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: LINEAR 1.0;
            target: "browser.list.clip";
            target: "browser.list.list_clip";
         }
         program { name: "browser_list_hide"; /* API */
            signal: "browser,list,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 1.0;
            target: "browser.list.clip";
            target: "browser.list.list_clip";
         }
         program { name: "browser_list_flip_left"; /* API */
            signal: "browser,list,flip_left";
            source: "emc";
            script {
               new buf[16];
               new Float:val;
               get_state(PART:"browser.list.genlist1", buf, sizeof(buf), val);
               // DBG("%s   %f", buf, val)
               if (!strcmp(buf, "default") || !strcmp(buf, "center")) {
                  // DBG("CASE 1")
                  set_state(PART:"browser.list.genlist2", "on_the_right", 0.0);
                  run_program(PROGRAM:"gl1_to_left");
               }
               else if (!strcmp(buf, "left")) {
                  // DBG("CASE 2")
                  set_state(PART:"browser.list.genlist1", "right", 0.0);
                  set_state(PART:"browser.list.genlist2", "on_the_left", 0.0);
                  run_program(PROGRAM:"gl1_to_center");
               }
               else if (!strcmp(buf, "right")) {
                  // DBG("CASE 3")
                  run_program(PROGRAM:"gl1_to_center");
               }
            }
         }
         program { name: "browser_list_flip_right"; /* API */
            signal: "browser,list,flip_right";
            source: "emc";
            script {
               new buf[16];
               new Float:val;
               get_state(PART:"browser.list.genlist1", buf, sizeof(buf), val);
               // DBG("%s   %f", buf, val)
               if (!strcmp(buf, "default") || !strcmp(buf, "center")) {
                  // DBG("CASE 1 (back)")
                  set_state(PART:"browser.list.genlist2", "on_the_left", 0.0);
                  run_program(PROGRAM:"gl1_to_right");
               }
               else if (!strcmp(buf, "right")) {
                  // DBG("CASE 2 (back)")
                  set_state(PART:"browser.list.genlist1", "left", 0.0);
                  set_state(PART:"browser.list.genlist2", "on_the_right", 0.0);
                  run_program(PROGRAM:"gl1_to_center");
               }
               else if (!strcmp(buf, "left")) {
                  // DBG("CASE 3 (back)")
                  run_program(PROGRAM:"gl1_to_center");
               }
            }
         }
         program { name: "gl1_to_left";
            action: STATE_SET "left" 0.0;
            transition: LINEAR 0.4;
            target: "browser.list.genlist1";
         }
         program { name: "gl1_to_right";
            action: STATE_SET "right" 0.0;
            transition: LINEAR 0.4;
            target: "browser.list.genlist1";
         }
         program { name: "gl1_to_center";
            action: STATE_SET "center" 0.0;
            transition: LINEAR 0.4;
            target: "browser.list.genlist1";
         }
///
         program { name: "browser_grid_show"; /* API */
            signal: "browser,grid,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: LINEAR 1.0;
            target: "browser.grid.clip";
         }
         program { name: "browser_grid_hide"; /* API */
            signal: "browser,grid,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 1.0;
            target: "browser.grid.clip";
         }
///
         program { name: "topbar_show"; /* API */
            signal: "topbar,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.4;
            target: "topbar.clip";
         }
         program { name: "topbar_hide"; /* API */
            signal: "topbar,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.4;
            target: "topbar.clip";
         }
///
         program { name: "videoplayer_show"; /* API */
            signal: "videoplayer,show";
            source: "emc";
            action: STATE_SET "visible" 0.00;
            transition: LINEAR 0.5;
            target: "videoplayer.clip";
            
         }
         program { name: "videoplayer_hide"; /* API */
            signal: "videoplayer,hide";
            source: "emc";
            action: STATE_SET "default" 0.00;
            transition: LINEAR 0.5;
            target: "videoplayer.clip";
         }
         program { name: "videoplayer_controls_show"; /* API */
            signal: "videoplayer,controls,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "videoplayer.controls.bg";
         }
         program { name: "videoplayer_controls_hide"; /* API */
            signal: "videoplayer,controls,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "videoplayer.controls.bg";
         }
///
         program { name: "volume_show"; /* API */
            signal: "volume,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "volume.bg";
         }
         program { name: "volume_hide"; /* API */
            signal: "volume,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.5;
            target: "volume.bg";
         }
      }
   }
   group { name: "emc/dialog/panel"; /* API */
      images {
         image: "shad_circ.png" COMP;
         image: "bt_dis_base.png" COMP;
         image: "roundclose.png" COMP;
      }
      parts {
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "bg";
            type: RECT;
            clip_to: "clipper";
            description { state: "default" 0.0;
               color: 0 0 0 64;
            }
         }
         part { name: "base";
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.relative: 0.1 0.1;
               rel2.relative: 0.9 0.9;
               image {
                  normal: "bt_dis_base.png";
                  border: 4 4 4 4;
               }
               image.middle: SOLID;
            }
         }
         part { name: "emc.text.title"; /* API */
            type: TEXTBLOCK;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 0.0;
               visible: 0;
               text {
                  text:"missing title...";
                  align: 0.5 1.0;
                  style: "epymc_dialog_title_style";
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel2.relative: 1.0 0.1;
            }
         }
         part { name: "emc.swallow.content"; /* API */
            type: SWALLOW;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1 {
                  to: "emc.text.title";
                  relative: 0.0 1.0;
                  offset: 10 10;
               }
               rel2 {
                  to_y: "emc.box.buttons";
                  to_x: "base";
                  relative: 1.0 0.0;
                  offset: -15 -10;
               }
            }
         }
         part { name: "close";
            type: IMAGE;
            clip_to: "clipper";
            mouse_events: 1;
            description { state: "default" 0.0;
               min: 60 60;
               fixed: 1 1;
               aspect: 1 1;
               color: 255 255 255 140;
               image.normal: "roundclose.png";
               rel1 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
            }
            description { state: "bigger" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 240;
            }
         }
         part { name: "emc.box.buttons"; /* API */
            type: BOX;
            clip_to: "clipper";
            description { state: "default" 0.0;
               box {
                  layout: "horizontal";
                  padding: 0 4;
                  min: 0 1; // this doesn't work...it should
               }
               rel1 {
                  to: "base";
                  relative: 0.0 1.0;
                  offset: 8 8;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 1.0;
                  offset: -9 -9;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.85;
            }
         }
      }
      programs {
         program { name: "close_mouse_in";
            signal: "mouse,in";
            source: "close";
            action: STATE_SET "bigger" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_out";
            signal: "mouse,out";
            source: "close";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_click"; /* API */
            signal: "mouse,down,1";
            source: "close";
            action: SIGNAL_EMIT "emc,dialog,close" "";
         }
         program { name: "show"; /* API */
            signal: "emc,dialog,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "show_done";
         }
         program { name: "show_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,show,done" "";
         }
         program { name: "hide"; /* API */
            signal: "emc,dialog,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "hide_done";
         }
         program { name: "hide_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,hide,done" "";
         }
         program { name: "show_title"; /* API */
            signal: "emc,dialog,title,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.text.title";
         }
         program { name: "hide_title"; /* API */
            signal: "emc,dialog,title,show";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.text.title";
         }
         program { name: "show_buttons"; /* API */
            signal: "emc,dialog,buttons,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "hide_buttons"; /* API */
            signal: "emc,dialog,buttons,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.box.buttons";
         }
      }
   }
   group { name: "emc/dialog/minimal"; /* API */
      min: 500 200;
      images {
         image: "bt_dis_base.png" COMP;
         image: "header_dialog.png" COMP;
         image: "bulb-0.png" COMP;
         image: "warning.png" COMP;
         image: "error.png" COMP;
      }
      parts {
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "base";
            type: RECT;
            clip_to: "clipper";
            description { state: "default" 0.0;
               color: 0 0 0 64;
            }
         }
         part { name: "pop";
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "titlebg";
               rel1.offset: -2 -2;
               rel2.to_x: "emc.swallow.content";
               rel2.to_y: "emc.box.buttons";
               rel2.offset: 25+2 10;
               image {
                  normal: "bt_dis_base.png";
                  border: 4 4 4 4;
               }
               image.middle: SOLID;
            }
         }
         part { name: "tagimage";
            type: IMAGE;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "pop";
               rel2.to: "pop";
               rel1.relative: 0.0 0.4;
               aspect: 1 1;
               aspect_preference: BOTH;
               align: 0.95 0.9;
               visible: 0;
            }
            description { state: "info" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
            description { state: "warning" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "warning.png";
               color: 170 170 170 170;
            }
            description { state: "error" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "error.png";
            }
            description { state: "yesno" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
            description { state: "cancel" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
         }
         part { name: "titlebg";
            type: IMAGE;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "emc.swallow.content";
               rel2.to: "emc.swallow.content";
               rel2.relative: 1.0 0.0;
               rel1.offset: -25 -65;
               rel2.offset: 25 20;
               color: 255 255 255 100;
               image.normal: "header_dialog.png";
               image.border: 0 0 0 40;
            }
         }
         part { name: "emc.text.title"; /* API */
            type: TEXTBLOCK;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "titlebg";
               rel2.to: "titlebg";
               text {
                  text:"missing title...";
                  min: 0 0;
                  align: 0.5 0.25;
                  style: "epymc_dialog_title_style";
               }
            }
         }
         part { name: "emc.swallow.content"; /* API */
            type: SWALLOW;
            clip_to: "clipper";
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 600 200;
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
         }
         part { name: "close";
            type: IMAGE;
            clip_to: "clipper";
            mouse_events: 1;
            description { state: "default" 0.0;
               min: 60 60;
               fixed: 1 1;
               aspect: 1 1;
               color: 255 255 255 140;
               image.normal: "roundclose.png";
               rel1 {
                  to: "pop";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
               rel2 {
                  to: "pop";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
            }
            description { state: "bigger" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 240;
            }
         }
         part { name: "emc.box.buttons"; /* API */
            type: BOX;
            clip_to: "clipper";
            description { state: "default" 0.0;
               box {
                  layout: "horizontal";
                  padding: 0 4;
                  align: 0.5 0.5;
                  min: 0 1; // this doesn't work...it should
               }
               rel1 {
                  to: "emc.dialog.progress";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "emc.dialog.progress";
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel2.offset: 0 60;
            }
         }
         part { name: "emc.dialog.progress"; /* API */
            type: EXTERNAL;
            clip_to: "clipper";
            source: "elm/progressbar";
            description { state: "default" 0.0;
               visible: 0;
               rel1 {
                  to: "emc.swallow.content";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "emc.swallow.content";
                  relative: 1.0 1.0;
                  offset: 0 1;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel2.offset: 0 50;
            }
         }
      }
      programs {
         program { name: "close_mouse_in";
            signal: "mouse,in";
            source: "close";
            action: STATE_SET "bigger" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_out";
            signal: "mouse,out";
            source: "close";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_click"; /* API */
            signal: "mouse,down,1";
            source: "close";
            action: SIGNAL_EMIT "emc,dialog,close" "";
         }
         program { name: "show"; /* API */
            signal: "emc,dialog,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "show_done";
         }
         program { name: "show_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,show,done" "";
         }
         program { name: "hide"; /* API */
            signal: "emc,dialog,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "hide_done";
         }
         program { name: "hide_done"; /* API */
            action: SIGNAL_EMIT "emc,dialog,hide,done" "";
         }
         program { name: "show_buttons"; /* API */
            signal: "emc,dialog,buttons,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "hide_buttons"; /* API */
            signal: "emc,dialog,buttons,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "set_info"; /* API */
            signal: "emc,dialog,info,set";
            source: "emc";
            action: STATE_SET "info" 0.0;
            target: "tagimage";
         }
         program { name: "set_warning"; /* API */
            signal: "emc,dialog,warning,set";
            source: "emc";
            action: STATE_SET "warning" 0.0;
            target: "tagimage";
         }
         program { name: "set_error"; /* API */
            signal: "emc,dialog,error,set";
            source: "emc";
            action: STATE_SET "error" 0.0;
            target: "tagimage";
         }
         program { name: "set_yesno"; /* API */
            signal: "emc,dialog,yesno,set";
            source: "emc";
            action: STATE_SET "yesno" 0.0;
            target: "tagimage";
         }
         program { name: "set_cancel"; /* API */
            signal: "emc,dialog,cancel,set";
            source: "emc";
            action: STATE_SET "cancel" 0.0;
            target: "tagimage";
         }
         program { name: "set_progress_visible"; /* API */
            signal: "emc,dialog,progress,set";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.dialog.progress";
         }
      }
   }

}

