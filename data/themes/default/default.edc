
#define DEBUG_ENABLE 0
// #if DEBUG_ENABLE
// #define DBG(...) { \
   // new _buf[128]; \
   // snprintf(_buf, sizeof(_buf), __VA_ARGS__); \
   // set_text(PART:"embryo_dbg", _buf); }
// #else
// #define DBG(...)
// #endif

// normal font used everywhere
#define FONT "Cuprum"
// font for titles, secondary text and good for numbers
#define FONT2 "Oswald"
// font for the mainmenu
#define FONT3 "Sansation"

#define FONT_SIZE_SMALLER 14
#define FONT_SIZE_SMALL 18
#define FONT_SIZE 22
#define FONT_SIZE_BIG 26
#define FONT_SIZE_BIGGER 48
#define FONT_COLOR 255 255 255 255
#define FONT_COLOR3 0 0 0 64
#define FONT_COLOR_TOPBAR 255 255 255 200
#define FONT_COLOR3_TOPBAR 0 0 0 64
#define FONT_COLOR_NOSEL 150 150 150 255
#define FONT_COLOR3_NOSEL 0 0 0 64
#define FN_COL_DISABLE 150 150 150 255
#define FN_COL3_DISABLE 0 0 0 64

#define COLOR_BLU 51 153 255
#define COLOR_BLU_HEX 3399FF
// #define COLOR_GREEN 63 168 108
// #define COLOR_BLUE 63 108 168
// #define COLOR_ORANGE 240 164 10
// #define COLOR_ORANGE_HEX F0A40A

//// GENERIC MACROS ///////////////////////////////////////////////////////////
#define ASPECT_FILL(_ASPECT) \
   aspect: _ASPECT _ASPECT; aspect_preference: NONE;

#define TILED_PATTERN(_WIDTH, _HEIGHT) \
   fill { size { relative: 0.0 0.0; offset: _WIDTH _HEIGHT; } }

#define TILED_HORIZ(_WIDTH) \
   fill { size { relative: 0.0 1.0; offset: _WIDTH 0; } }

#define FIXED_SIZE(_WIDTH, _HEIGHT) \
   min: _WIDTH _HEIGHT; max: _WIDTH _HEIGHT; fixed: 1 1;

#define DBG_SHOW(_PART, _R, _G, _B) \
   part { name: "dbg_show"_PART; \
      type: RECT; mouse_events: 0; \
      description { state: "default" 0.0; \
         rel1.to: _PART; rel2.to: _PART; \
         color: _R _G _B 50; } }

#define SHOW(_PART) DBG_SHOW(_PART, 255, 0, 0)

data {
   item: "theme.name" "The default one";
   item: "theme.version" "0.8";
   item: "theme.author" "davemds";
   item: "theme.info" "A more long description of the theme";
   item: "theme.generation" "6";
}

images {
   image: "background.jpg" COMP;
   image: "frame.png" COMP;
   image: "frame_box.png" COMP;
   image: "frame_box_for_top.png" COMP;
   image: "frame_box_for_top_shadow.png" COMP;
   image: "frame_box_for_bot.png" COMP;
   image: "frame_box_for_bot_shadow.png" COMP;
   image: "frame2.png" COMP;
   image: "frame3.png" COMP;
   image: "left_shadow.png" COMP;
   image: "mp_controls_bg.png" COMP;
   image: "separator.png" COMP;
   image: "header.png" COMP;
   image: "volume.png" COMP;
   image: "volume_muted.png" COMP;
   image: "menu_bg.png" COMP;
   image: "shine.png" COMP;
   image: "icon_play.png" COMP;
   image: "icon_pause.png" COMP;
   image: "icon_photo.png" COMP;
}

fonts {
   font: "Cuprum.otf" "Cuprum";
   font: "Oswald-Regular.otf" "Oswald";
   font: "Sansation-Regular.ttf" "Sansation";
}

#define COMMON_TAGS \
tag: "b" "+ font_weight=Bold"; \
tag: "em" "+ font_style=Oblique"; \
tag: "hilight" "+ font_weight=Bold style=glow glow_color=#3399ff80"; \
tag: "link" "+ color=#3399ff underline=on underline_color=#3399ff"; \
tag: "center" "+ align=center"; \
tag: "bigger" "+ font_size="FONT_SIZE_BIGGER; \
tag: "big" "+ font_size="FONT_SIZE_BIG; \
tag: "small" "+ font_size="FONT_SIZE_SMALL; \
tag: "smaller" "+ font_size="FONT_SIZE_SMALLER; \
tag: "info" "+ color=#3399ff style=glow glow_color=#3399ff30"; \
tag: "success" "+ color=#00ff00 style=glow glow_color=#00ff0030"; \
tag: "warning" "+ color=#ff7c00 style=glow glow_color=#ff7c0030"; \
tag: "failure" "+ color=#ff0000 style=glow glow_color=#ff000030"; \
tag: "title" "+ font_weight=Bold color=#"COLOR_BLU_HEX" font_size="FONT_SIZE_BIG; \
tag: "subtitle" "+ color=#"COLOR_BLU_HEX; \
tag: "name" "+ color=#888888 font_weight=Bold"; \
tag: "val" "+ color=#ffffff";

styles {
   style { name: "epymc_default_style";
      base: "font="FONT" font_size="FONT_SIZE" color=#fff wrap=word";
      COMMON_TAGS
   }

   style { name: "epymc_dialog_title_style";
      base: "font="FONT2" align=center font_size="FONT_SIZE_BIG" color=#"COLOR_BLU_HEX" wrap=none";
   }

   style { name: "epymc_dialog_list_style";
      base: "font="FONT" align=left font_size="FONT_SIZE" color=#000 wrap=none";
      COMMON_TAGS
   }

   style { name: "epymc_dialog_list_style_sel";
      base: "font="FONT" align=left font_size="FONT_SIZE" color=#fff wrap=none";
      COMMON_TAGS
   }

   style { name: "epymc_browser_slide_style";
      base:  "font="FONT" font_size="FONT_SIZE" color=#fff wrap=none";
      COMMON_TAGS
   }

   style { name: "epymc_browser_grid_style";
      base:  "font="FONT" font_size="FONT_SIZE" color=#fff align=center wrap=mixed ellipsis=1.0";
      COMMON_TAGS
   }

   style { name: "epymc_special_image_style";
      base:  "font="FONT" font_size="FONT_SIZE" color=#222 align=center wrap=mixed ellipsis=1.0";
      COMMON_TAGS
   }

   style { name: "epymc_special_icon_style";
      base:  "font="FONT" font_size="FONT_SIZE" color=#fff align=center wrap=mixed ellipsis=1.0";
      COMMON_TAGS
   }

   style { name: "epymc_special_icon_style2";
      base:  "font="FONT" font_size="FONT_SIZE" color=#"COLOR_BLU_HEX" align=left wrap=none ellipsis=1.0";
      COMMON_TAGS
   }

   style { name: "epymc_subtitles_style";
      base: "font="FONT" align=center font_size="FONT_SIZE_BIGGER" color=#FFF wrap=word style=soft_shadow shadow_color=#00000080";
      tag: "b" "+ font_weight=Bold";
      tag: "i" "+ font_style=Oblique";
      tag: "u" "+ underline=on underline_color=#FFF";
   }

   style { name: "epymc_notify_style";
      base: "font="FONT" font_size="FONT_SIZE" color=#000 wrap=none";
      tag: "title" "+ font_weight=Bold font_size="FONT_SIZE_BIG;
      COMMON_TAGS
   }
}

externals {
   external: "elm";
}

collections {

   #include "elm_extension.edc"
   #include "icons.edc"

/// main UI
   group { name: "emc/main/layout";  /* API */
      parts {

/// edje messages received from the app
         #define MESSAGE_CLOCK_TIME 12 /* API */
         #define MESSAGE_CLOCK_DATE 13 /* API */
         script {
            public message(Msg_Type:type, id, ...) {
               if ((id == MESSAGE_CLOCK_TIME) && (type == MSG_STRING)) {
                  new buf[32];
                  getsarg(2, buf, sizeof(buf));
                  set_text(PART:"mainmenu.clock.time", buf);
                  set_text(PART:"topbar.clock", buf);
                  set_text(PART:"videoplayer.clock", buf);
               }
               else if ((id == MESSAGE_CLOCK_DATE) && (type == MSG_STRING)) {
                  new buf[64];
                  getsarg(2, buf, sizeof(buf));
                  set_text(PART:"mainmenu.clock.date", buf);
               }
            }
         }

/// main background
         part { name: "bg.bg"; type: IMAGE;
            description { state: "default" 0.0;
               min: 960 600;
               image.normal: "background.jpg";
            }
         }
         part { name: "bg.clip1"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "bd1" 0.0;
               color: 255 255 255 255;
            }
            description { state: "bd2" 0.0;
               color: 255 255 255 0;
            }
         }
         part { name: "bg.clip2"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "bd1" 0.0;
               color: 255 255 255 0;
            }
            description { state: "bd2" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "bg.swallow.backdrop1"; type: SWALLOW;  /* API */
            clip_to: "bg.clip1";
            description { state: "default" 0.0; }
         }
         part { name: "bg.swallow.backdrop2"; type: SWALLOW;  /* API */
            clip_to: "bg.clip2";
            description { state: "default" 0.0; }
         }
         program { name: "backdrop_show_1";  /* API */
            signal: "backdrop,show,1";
            source: "emc";
            action: STATE_SET "bd1" 0.00;
            transition: LINEAR 1.0;
            target: "bg.clip1";
            target: "bg.clip2";
         }
         program { name: "backdrop_show_2";  /* API */
            signal: "backdrop,show,2";
            source: "emc";
            action: STATE_SET "bd2" 0.00;
            transition: LINEAR 1.0;
            target: "bg.clip1";
            target: "bg.clip2";
         }

/// browser top bar
         part { name: "topbar.clip"; type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               max: 9999 40;
               align: 0.5 0.0;
               rel1.relative: 0.0 -0.3;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
            }
         }
         part { name: "topbar.bg"; type: IMAGE;
            description { state: "default" 0.0;
               rel1.to: "topbar.clip";
               rel2.to: "topbar.clip";
               rel2.offset: 0 28;
               image.normal: "header.png";
               image.border: 31 39 2 39;
            }
         }
         part { name: "topbar.home_icon"; type: IMAGE;
            description { state: "default" 0.0;
               image.normal: "icon_home.png";
               color: 255 255 255 170;
               aspect: 1 1;
               aspect_preference: BOTH;
               align: 0.0 0.5;
               rel1 {
                  to: "topbar.clip";
                  offset: 20 0;
               }
               rel2 {
                  to: "topbar.clip";
               }
            }
         }
         part { name: "topbar.title"; type: TEXT;  /* API */
            scale: 1;
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR_TOPBAR;
               color3: FONT_COLOR3_TOPBAR;
               rel1 {
                  to: "topbar.home_icon";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "topbar.box";
                  relative: 0.0 1.0;
                  offset: -6 -1;
               }
               text {
                  font: FONT2;
                  size: FONT_SIZE_BIG;
                  align: 0.0 1.0;
                  ellipsis: 1.0;
               }
            }
         }
         part { name: "topbar.box"; type: BOX;  /* API */
            mouse_events: 1;
            repeat_events: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               align: 1.0 0.5;
               rel1 {
                  to: "topbar.clock.spacer";
                  offset: -10 0;
               }
               rel2 {
                  to: "topbar.clock.spacer";
                  relative: 0.0 1.0;
                  offset: -11 -1;
               }
               box {
                  layout: "horizontal";
                  padding: 4 4;
                  align: 1.0 0.5;
                  min: 1 0;
               }
            }
         }
         part { name: "topbar.clock.spacer"; type: TEXT;
            // inherit: "topbar.clock";
            /* This part is used as a spacer to avoid the buttons box
             * changes it's position while the clock changes */
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               fixed: 1 1;
               align: 1.0 0.5;
               rel1 {
                  to: "topbar.clip";
                  relative: 1.0 0.0;
                  offset: -35 0;
               }
               rel2 {
                  to: "topbar.clip";
                  offset: -36 2;
               }
               text {
                  font: FONT2;
                  size: FONT_SIZE_BIG;
                  min: 1 0;
                  ellipsis: -1;
                  text: "00::00";
               }
            }
         }
         part { name: "topbar.clock"; type: TEXT;
            scale: 1;
            clip_to: "topbar.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: FONT_COLOR_TOPBAR;
               color3: FONT_COLOR3_TOPBAR;
               align: 0.5 0.5;
               rel1.to: "topbar.clock.spacer";
               rel2.to: "topbar.clock.spacer";
               text {
                  font: FONT2;
                  size: FONT_SIZE_BIG;
                  min: 1 0;
                  ellipsis: -1;
               }
            }
         }
         part { name: "topbar.list.spacer"; type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               max: 9999 40;
               align: 0.5 0.0;
            }
         }
         program { name: "topbar_show";  /* API */
            signal: "topbar,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.4;
            target: "topbar.clip";
         }
         program { name: "topbar_hide";  /* API */
            signal: "topbar,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.4;
            target: "topbar.clip";
         }

/// browser view: List
         part { name: "browser.list.clip"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.list.list_frame"; type: IMAGE;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               rel1.offset: 0 10;
               rel1.to: "topbar.list.spacer";
               rel1.relative: 0.0 1.0;
               rel2.relative: 0.5 1.0;
               rel2.offset: -1 10;
               image.normal: "frame.png";
               image.border: 32 32 92 78;
            }
         }
         part { name: "browser.list.list_clip";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
               color: 255 255 255 0;
               rel1 {
                  to: "browser.list.list_frame";
                  offset: 19 18;
               }
               rel2 {
                  to: "browser.list.list_frame";
                  offset: -20 -78;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.list.genlist1"; type: EXTERNAL;  /* API */
            source: "elm/genlist";
            clip_to: "browser.list.list_clip";
            description { state: "default" 0.0;
               rel1.to: "browser.list.list_clip";
               rel2.to: "browser.list.list_clip";
            }
            description { state: "center" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "left" 0.0;
               inherit: "default" 0.0;
               rel1.relative: -1.0 0.0;
               rel2.relative: 0.0 1.0;
            }
            description { state: "right" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 1.0 0.0;
               rel2.relative: 2.0 1.0;
            }
         }
         part { name: "browser.list.genlist2"; type: EXTERNAL;  /* API */
            source: "elm/genlist";
            clip_to: "browser.list.list_clip";
            description { state: "default" 0.0;
               rel1 {
                  to: "browser.list.genlist1";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "browser.list.genlist1";
                  relative: 2.0 1.0;
               }
            }
            description { state: "on_the_right" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "on_the_left" 0.0;
               rel1 {
                  to: "browser.list.genlist1";
                  relative: -1.0 0.0;
               }
               rel2 {
                  to: "browser.list.genlist1";
                  relative: 0.0 1.0;
               }
            }
         }
         part { name: "browser.list.total.bg"; type: IMAGE;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               image {
                  normal: "frame_box.png";
                  border: 3 3 3 3;
               }
               rel1.to: "browser.list.total";
               rel1.offset: -15 -3;
               rel2.to: "browser.list.total";
               rel2.offset: 14 2;
            }
         }
         part { name: "browser.list.total"; type: TEXT;  /* API */
            clip_to: "browser.list.clip";
            effect: SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: 0 0 0 255;
               rel1 {
                  to: "browser.list.list_frame";
                  relative: 0.0 1.0;
                  offset: 0 -105;
               }
               rel2 {
                  to: "browser.list.list_frame";
               }
               text {
                  text: "X items";
                  font: FONT;
                  size: FONT_SIZE;
                  align: 0.5 0.5;
                  max: 1 1;
               }
            }
         }
         part { name: "browser.list.poster"; type: SWALLOW;  /* API */
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               rel1 {
                  to_x: "browser.list.info_bg";
                  to_y: "topbar.list.spacer";
                  relative: 0.0 1.0;
                  offset: 6 20;
               }
               rel2 {
                  to_x: "browser.list.info_bg";
                  to_y: "browser.list.info_bg";
                  relative: 1.0 0.0;
                  offset: -8 -18;
               }
            }
         }
         part { name: "browser.list.info_bg"; type: IMAGE;
            clip_to: "browser.list.clip";
            description { state: "default" 0.0;
               image {
                  normal: "frame2.png";
                  border: 8 8 8 8;
               }
               rel1 {
                  relative: 0.5 (1.0 + 0.0);
               }
               rel2 {
                  relative: 1.0 (1.0 + 0.35);
                  offset: -12 -9;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.5 (1.0 - 0.35);
               rel2.relative: 1.0 (1.0 + 0.0);
            }
         }
         part { name: "browser.list.info"; type: SWALLOW;  /* API */
            clip_to: "browser.list.clip";
            scale: 1;
            description { state: "default" 0.0;
               rel1 {
                  to: "browser.list.info_bg";
                  offset: 15 9;
               }
               rel2 {
                  to: "browser.list.info_bg";
                  offset: -12 -10;
               }
            }
         }
         program { name: "browser_list_show";  /* API */
            signal: "browser,list,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: LINEAR 1.0;
            target: "browser.list.clip";
            target: "browser.list.list_clip";
         }
         program { name: "browser_list_hide";  /* API */
            signal: "browser,list,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.5;
            target: "browser.list.clip";
            target: "browser.list.list_clip";
         }
         program { name: "browser_list_info_show";  /* API */
            signal: "browser,list,info,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.35;
            target: "browser.list.info_bg";
         }
         program { name: "browser_list_info_hide";  /* API */
            signal: "browser,list,info,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.35;
            target: "browser.list.info_bg";
         }
         program { name: "browser_list_flip_left";  /* API */
            signal: "browser,list,flip_left";
            source: "emc";
            script {
               new buf[16];
               new Float:val;
               get_state(PART:"browser.list.genlist1", buf, sizeof(buf), val);
               // DBG("%s   %f", buf, val)
               if (!strcmp(buf, "default") || !strcmp(buf, "center")) {
                  // DBG("CASE 1")
                  set_state(PART:"browser.list.genlist2", "on_the_right", 0.0);
                  run_program(PROGRAM:"gl1_to_left");
               }
               else if (!strcmp(buf, "left")) {
                  // DBG("CASE 2")
                  set_state(PART:"browser.list.genlist1", "right", 0.0);
                  set_state(PART:"browser.list.genlist2", "on_the_left", 0.0);
                  run_program(PROGRAM:"gl1_to_center");
               }
               else if (!strcmp(buf, "right")) {
                  // DBG("CASE 3")
                  run_program(PROGRAM:"gl1_to_center");
               }
            }
         }
         program { name: "browser_list_flip_right";  /* API */
            signal: "browser,list,flip_right";
            source: "emc";
            script {
               new buf[16];
               new Float:val;
               get_state(PART:"browser.list.genlist1", buf, sizeof(buf), val);
               // DBG("%s   %f", buf, val)
               if (!strcmp(buf, "default") || !strcmp(buf, "center")) {
                  // DBG("CASE 1 (back)")
                  set_state(PART:"browser.list.genlist2", "on_the_left", 0.0);
                  run_program(PROGRAM:"gl1_to_right");
               }
               else if (!strcmp(buf, "right")) {
                  // DBG("CASE 2 (back)")
                  set_state(PART:"browser.list.genlist1", "left", 0.0);
                  set_state(PART:"browser.list.genlist2", "on_the_right", 0.0);
                  run_program(PROGRAM:"gl1_to_center");
               }
               else if (!strcmp(buf, "left")) {
                  // DBG("CASE 3 (back)")
                  run_program(PROGRAM:"gl1_to_center");
               }
            }
         }
         program { name: "gl1_to_left";
            action: STATE_SET "left" 0.0;
            transition: DECELERATE 0.25;
            target: "browser.list.genlist1";
         }
         program { name: "gl1_to_right";
            action: STATE_SET "right" 0.0;
            transition: DECELERATE 0.25;
            target: "browser.list.genlist1";
         }
         program { name: "gl1_to_center";
            action: STATE_SET "center" 0.0;
            transition: DECELERATE 0.25;
            target: "browser.list.genlist1";
         }

/// browser view: Poster Grid
         part { name: "browser.postergrid.clip"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.postergrid.grid_frame"; type: IMAGE;
            clip_to: "browser.postergrid.clip";
            description { state: "default" 0.0;
               rel1.offset: 0 10;
               rel1.to: "topbar.list.spacer";
               rel1.relative: 0.0 1.0;
               rel2.relative: 0.65 1.0;
               rel2.offset: -1 10;
               image.normal: "frame.png";
               image.border: 32 32 92 78;
            }
         }
         part { name: "browser.postergrid.gengrid"; type: SWALLOW;  /* API */
            clip_to: "browser.postergrid.clip";
            description { state: "default" 0.0;
               rel1 {
                  to: "browser.postergrid.grid_frame";
                  offset: 26 10;
               }
               rel2 {
                  to: "browser.postergrid.grid_frame";
                  offset: -20 -79;
               }
            }
         }
         part { name: "browser.postergrid.total.bg"; type: IMAGE;
            clip_to: "browser.postergrid.clip";
            description { state: "default" 0.0;
               image {
                  normal: "frame_box.png";
                  border: 3 3 3 3;
               }
               rel1.to: "browser.postergrid.total";
               rel1.offset: -15 -3;
               rel2.to: "browser.postergrid.total";
               rel2.offset: 14 2;
            }
         }
         part { name: "browser.postergrid.total"; type: TEXT;  /* API */
            clip_to: "browser.postergrid.clip";
            effect: SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: 0 0 0 255;
               rel1 {
                  to: "browser.postergrid.grid_frame";
                  relative: 0.0 1.0;
                  offset: 0 -105;
               }
               rel2 {
                  to: "browser.postergrid.grid_frame";
               }
               text {
                  text: "X items";
                  font: FONT;
                  size: FONT_SIZE;
                  align: 0.5 0.5;
                  max: 1 1;
               }
            }
         }
         part { name: "browser.postergrid.info_bg"; type: IMAGE;
            clip_to: "browser.postergrid.clip";
            description { state: "default" 0.0;
               fixed: 1 1;
               image {
                  normal: "frame2.png";
                  border: 8 8 8 8;
               }
               rel1 {
                  to_y: "browser.postergrid.gengrid";
                  relative: (0.65 + 0.40) 0.5;
                  offset: -7 -7;
               }
               rel2 {
                  relative: (1.0 + 0.40) 1.0;
                  offset: -20 -9;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: (0.65 + 0.0) 0.5;
               rel2.relative: (1.0 + 0.0) 1.0;
            }
         }
         part { name: "browser.postergrid.info"; type: SWALLOW;  /* API */
            clip_to: "browser.postergrid.clip";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to: "browser.postergrid.info_bg";
                  offset: 15 9;
               }
               rel2 {
                  to: "browser.postergrid.info_bg";
                  offset: -12 -10;
               }
            }
         }
         part { name: "browser.postergrid.image"; type: SWALLOW;  /* API */
            clip_to: "browser.postergrid.clip";
            description { state: "default" 0.0;
               rel1 {
                  to_x: "browser.postergrid.info_bg";
                  to_y: "topbar.list.spacer";
                  relative: 0.0 1.0;
                  offset: 6 20;
               }
               rel2 {
                  to_x: "browser.postergrid.info_bg";
                  to_y: "browser.postergrid.info_bg";
                  relative: 1.0 0.0;
                  offset: -8 -4;
               }
            }
         }
         program { name: "browser_postergrid_show";  /* API */
            signal: "browser,postergrid,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: LINEAR 1.0;
            target: "browser.postergrid.clip";
         }
         program { name: "browser_postergrid_hide";  /* API */
            signal: "browser,postergrid,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.5;
            target: "browser.postergrid.clip";
         }
         program { name: "browser_postergrid_info_show";  /* API */
            signal: "browser,postergrid,info,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.35;
            target: "browser.postergrid.info_bg";
         }
         program { name: "browser_postergrid_info_hide";  /* API */
            signal: "browser,postergrid,info,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.35;
            target: "browser.postergrid.info_bg";
         }

/// browser view: Cover Grid
         part { name: "browser.covergrid.clip"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "browser.covergrid.grid_frame"; type: IMAGE;
            clip_to: "browser.covergrid.clip";
            description { state: "default" 0.0;
               rel1.offset: 0 10;
               rel1.to: "topbar.list.spacer";
               rel1.relative: 0.0 1.0;
               rel2.relative: 0.65 1.0;
               rel2.offset: -1 10;
               image.normal: "frame.png";
               image.border: 32 32 92 78;
            }
         }
         part { name: "browser.covergrid.gengrid"; type: SWALLOW;  /* API */
            clip_to: "browser.covergrid.clip";
            description { state: "default" 0.0;
               rel1 {
                  to: "browser.covergrid.grid_frame";
                  offset: 26 10;
               }
               rel2 {
                  to: "browser.covergrid.grid_frame";
                  offset: -20 -79;
               }
            }
         }
         part { name: "browser.covergrid.total.bg"; type: IMAGE;
            clip_to: "browser.covergrid.clip";
            description { state: "default" 0.0;
               image {
                  normal: "frame_box.png";
                  border: 3 3 3 3;
               }
               rel1.to: "browser.covergrid.total";
               rel1.offset: -15 -3;
               rel2.to: "browser.covergrid.total";
               rel2.offset: 14 2;
            }
         }
         part { name: "browser.covergrid.total"; type: TEXT;  /* API */
            clip_to: "browser.covergrid.clip";
            effect: SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: 0 0 0 255;
               rel1 {
                  to: "browser.covergrid.grid_frame";
                  relative: 0.0 1.0;
                  offset: 0 -105;
               }
               rel2 {
                  to: "browser.covergrid.grid_frame";
               }
               text {
                  text: "X items";
                  font: FONT;
                  size: FONT_SIZE;
                  align: 0.5 0.5;
                  max: 1 1;
               }
            }
         }
         part { name: "browser.covergrid.info_bg"; type: IMAGE;
            clip_to: "browser.covergrid.clip";
            description { state: "default" 0.0;
               fixed: 1 1;
               image {
                  normal: "frame2.png";
                  border: 8 8 8 8;
               }
               rel1 {
                  to_y: "browser.covergrid.gengrid";
                  relative: (0.65 + 0.40) 0.5;
                  offset: -7 -7;
               }
               rel2 {
                  relative: (1.0 + 0.40) 1.0;
                  offset: -20 -9;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: (0.65 + 0.0) 0.5;
               rel2.relative: (1.0 + 0.0) 1.0;
            }
         }
         part { name: "browser.covergrid.info"; type: SWALLOW;  /* API */
            clip_to: "browser.covergrid.clip";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to: "browser.covergrid.info_bg";
                  offset: 15 9;
               }
               rel2 {
                  to: "browser.covergrid.info_bg";
                  offset: -12 -10;
               }
            }
         }
         part { name: "browser.covergrid.image"; type: SWALLOW;  /* API */
            clip_to: "browser.covergrid.clip";
            description { state: "default" 0.0;
               rel1 {
                  to_x: "browser.covergrid.info_bg";
                  to_y: "topbar.list.spacer";
                  relative: 0.0 1.0;
                  offset: 6 20;
               }
               rel2 {
                  to_x: "browser.covergrid.info_bg";
                  to_y: "browser.covergrid.info_bg";
                  relative: 1.0 0.0;
                  offset: -8 -4;
               }
            }
         }
         program { name: "browser_covergrid_show";  /* API */
            signal: "browser,covergrid,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: LINEAR 1.0;
            target: "browser.covergrid.clip";
         }
         program { name: "browser_covergrid_hide";  /* API */
            signal: "browser,covergrid,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.5;
            target: "browser.covergrid.clip";
         }
         program { name: "browser_covergrid_info_show";  /* API */
            signal: "browser,covergrid,info,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.35;
            target: "browser.covergrid.info_bg";
         }
         program { name: "browser_covergrid_info_hide";  /* API */
            signal: "browser,covergrid,info,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.35;
            target: "browser.covergrid.info_bg";
         }

/// filemanager
         part { name: "fileman.clip"; type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "fileman.list1.frame"; type: IMAGE;
            clip_to: "fileman.clip";
            description { state: "default" 0.0;
               rel1.offset: 0 10;
               rel1.to: "topbar.list.spacer";
               rel1.relative: -0.5 1.0;
               rel2.relative: 0.0 1.0;
               rel2.offset: -1 10;
               image.normal: "frame.png";
               image.border: 32 32 92 78;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 1.0;
               rel2.relative: 0.45 1.0;
            }
         }
         part { name: "fileman.list1.swallow"; type: SWALLOW;  /* API */
            clip_to: "fileman.clip";
            description { state: "default" 0.0;
               rel1.to: "fileman.list1.frame";
               rel1.offset: 20 18;
               rel2.to: "fileman.list1.frame";
               rel2.offset: -20 -78;
               color: 200 0 0 100;
            }
         }
         part { name: "fileman.list2.frame"; type: IMAGE;
            clip_to: "fileman.clip";
            description { state: "default" 0.0;
               rel1.offset: 0 10;
               rel1.to: "topbar.list.spacer";
               rel1.relative: 1.0 1.0;
               rel2.relative: 1.5 1.0;
               rel2.offset: -1 10;
               image.normal: "frame.png";
               image.border: 32 32 92 78;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.55 1.0;
               rel2.relative: 1.0 1.0;
               rel2.offset: -1 10;
            }
         }
         part { name: "fileman.list2.swallow"; type: SWALLOW;  /* API */
            clip_to: "fileman.clip";
            description { state: "default" 0.0;
               rel1.to: "fileman.list2.frame";
               rel1.offset: 20 18;
               rel2.to: "fileman.list2.frame";
               rel2.offset: -20 -78;
               color: 0 200 0 100;
            }
         }
         part { name: "fileman.buttons.frame";
            mouse_events: 0;
            clip_to: "fileman.clip";
            description { state: "default" 0.0;
               rel1.relative: 0.45 1.0;
               rel1.offset: -17 30;
               rel2.relative: 0.55 2.0;
               rel2.offset: 17 -60;
               image {
                  normal: "frame2.png";
                  border: 8 8 8 8;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.to_y: "topbar.list.spacer";
               rel1.relative: 0.45 1.0;
               rel2.relative: 0.55 1.0;
            }
         }
         part { name: "fileman.buttons.box"; type: BOX;  /* API */
            clip_to: "fileman.clip";
            description { state: "default" 0.0;
               rel1.to: "fileman.buttons.frame";
               rel1.offset: 5 15;
               rel2.to: "fileman.buttons.frame";
               rel2.offset: -6 -15;
               box {
                  layout: "vertical";
                  padding: 4 4;
                  align: 0.5 0.0;
                  min: 1 0;
               }
            }
         }
         part { name: "fileman.buttons.box2"; type: BOX;  /* API */
            clip_to: "fileman.clip";
            description { state: "default" 0.0;
               rel1.to: "fileman.buttons.frame";
               rel1.offset: 5 15;
               rel2.to: "fileman.buttons.frame";
               rel2.offset: -6 -15;
               box {
                  layout: "vertical";
                  padding: 4 4;
                  align: 0.5 1.0;
                  min: 1 0;
               }
            }
         }

         // DBG_SHOW("fileman.list1.swallow", 200, 0, 0)
         // DBG_SHOW("fileman.list2.swallow", 0, 200, 0)
         program { name: "fileman_show";  /* API */
            signal: "fileman,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.3;
            target: "fileman.clip";
            target: "fileman.list1.frame";
            target: "fileman.list2.frame";
            target: "fileman.buttons.frame";
         }
         program { name: "fileman_hide";  /* API */
            signal: "fileman,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.3;
            target: "fileman.clip";
            target: "fileman.list1.frame";
            target: "fileman.list2.frame";
            target: "fileman.buttons.frame";
         }

/// mainmenu
         part { name: "mainmenu.title.bg"; type: IMAGE;
            description { state: "default" 0.0;
               rel1 {
                  to: "mainmenu.title";
               }
               rel2 {
                  to: "mainmenu.title";
                  offset: -1 28;
               }
               image {
                  normal: "header.png";
                  border: 31 39 2 39;
               }
            }
         }
         part { name: "mainmenu.title"; type: TEXT;
            effect: FAR_SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               rel1.relative: 0.0 -0.3;
               rel2.relative: 1.0 -0.3;
               fixed: 1 1;
               align: 0.5 0.0;
               color: FONT_COLOR_TOPBAR;
               color3: FONT_COLOR3_TOPBAR;
               text {
                  text: "Emotion Media Center";
                  font: FONT3;
                  size: FONT_SIZE_BIGGER;
                  ellipsis: -1;
                  min: 0 1;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 0.0;
            }
         }
         part { name: "mainmenu.list.bar"; type: IMAGE;
            scale: 1;
            description { state: "default" 0.0;
               color: 255 255 255 180;
               min: 128 128;
               max: -1 128;
               fixed: 1 1;
               align: 0.5 0.0;
               rel1 {
                  to_y: "mainmenu.list.swallow";
                  offset: -15 0;
               }
               rel2 {
                  to_y: "mainmenu.list.swallow";
                  offset: 16 -1;
               }
               image {
                  normal: "menu_bg.png";
                  border: 15 16 7 13;
               }
            }
         }
         part { name: "mainmenu.list.bar.shine"; type: IMAGE;
            description { state: "default" 0.0;
               FIXED_SIZE(120, 5)
               rel1 {
                  to: "mainmenu.list.bar";
                  offset: 0 6;
               }
               rel2 {
                  to: "mainmenu.list.bar";
                  relative: 1.0 0.0;
                  offset: -1 6;
               }
               image.normal: "shine.png";
            }
         }
         part { name: "mainmenu.list.swallow"; type: SWALLOW;  /* API */
            description { state: "default" 0.0;
               rel1 {
                  relative: 0.0 -1.0;
                  offset: 128 64;
               }
               rel2 {
                  relative: 1.0 0.0;
                  offset: -129 -1;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1 {
                  to_y: "mainmenu.title.bg";
                  relative: 0.0 1.0;
               }
               rel2 {
                  relative: 1.0 1.0;
               }
            }
         }
         part { name: "mainmenu.clock.clip"; type: RECT;
            description { state: "default" 0.0;
               rel1.to: "mainmenu.clock.time";
               rel2.to: "mainmenu.clock.date";
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "mainmenu.clock.date"; type: TEXT;
            clip_to: "mainmenu.clock.clip";
            effect: FAR_SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: FONT_COLOR_TOPBAR;
               color3: FONT_COLOR3_TOPBAR;
               rel1 {
                  relative: 0.0 1.0;
                  offset: 10 -11;
               }
               rel2 {
                  relative: 0.0 1.0;
                  offset: -1 -11;
               }
               align: 0.0 1.0;
               text {
                  text: "giovedì 3 gennaio";
                  font: FONT3;
                  size: FONT_SIZE_BIG;
                  min: 1 1;
                  ellipsis: -1;
                  align: 0.0 0.5;
               }
            }
         }
         part { name: "mainmenu.clock.time"; type: TEXT;
            clip_to: "mainmenu.clock.clip";
            effect: FAR_SHADOW;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: FONT_COLOR_TOPBAR;
               color3: FONT_COLOR3_TOPBAR;
               rel1.to: "mainmenu.clock.date";
               rel2.to: "mainmenu.clock.date";
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 0.0;
               align: 0.0 1.0;
               text {
                  text: "12:23";
                  font: FONT3;
                  size: FONT_SIZE_BIGGER;
                  min: 1 1;
                  ellipsis: -1;
                  align: 0.0 0.5;
               }
            }
         }
         program { name: "mainmenu_show";  /* API */
            signal: "mainmenu,show";
            source: "emc";
            action: STATE_SET "visible" 0.00;
            transition: DECELERATE 0.4;
            target: "mainmenu.list.swallow";
            target: "mainmenu.title";
         }
         program { name: "mainmenu_hide";  /* API */
            signal: "mainmenu,hide";
            source: "emc";
            action: STATE_SET "default" 0.00;
            transition: ACCELERATE 0.4;
            target: "mainmenu.list.swallow";
            target: "mainmenu.title";
         }
         program { name: "mainmenu_show_clock";
            signal: "mainmenu,show";
            source: "emc";
            action: STATE_SET "visible" 0.00;
            transition: SINUSOIDAL 0.4;
            target: "mainmenu.clock.clip";
         }
         program { name: "mainmenu_hide_clock";
            signal: "mainmenu,hide";
            source: "emc";
            action: STATE_SET "default" 0.00;
            transition: SINUSOIDAL 0.2;
            target: "mainmenu.clock.clip";
         }

/// videoplayer
         part { name: "videoplayer.bg"; type: RECT;
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
               color: 0 0 0 255;
            }
         }
         part { name: "videoplayer.video"; type: SWALLOW;  /* API */
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
            }
         }
         part { name: "videoplayer.clip"; type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               color: 255 255 255 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               visible: 1;
            }
         }
         part { name: "videoplayer.events"; type: RECT;  /* API */
            mouse_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               color: 0 0 0 0;
               visible: 1;
            }
         }
         part { name: "videoplayer.subs"; type: TEXTBLOCK;  /* API */
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
               text {
                  align: 0.5 0.9;
                  style: "epymc_subtitles_style";
               }
            }
         }
         part { name: "videoplayer.controls.bg"; type: IMAGE;
            clip_to: "videoplayer.clip";
            scale: 1;
            description { state: "default" 0.0;
               min: 80 94;
               max: -1 94;
               align: 0.5 0.0;
               fixed: 1 1;
               rel1.relative: 0.0 -0.5;
               image.normal: "mp_controls_bg.png";
               image.border: 0 0 0 15;
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
               visible: 1;
            }
         }
         part { name: "videoplayer.controls.poster"; type: SWALLOW;  /* API */
            mouse_events: 0;
            clip_to: "videoplayer.clip";
            description { state: "default" 0.0;
               visible: 0;
               rel1.relative: 0.0 (0.0 - 0.9);
               rel2.relative: 0.25 (0.45 - 0.9);
               rel1.offset: 5 5;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel1.relative: 0.0 0.0;
               rel2.relative: 0.25 0.45;
            }
         }
         part { name: "videoplayer.clock.spacer"; type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               fixed: 1 1;
               align: 1.0 0.5;
               rel1 {
                  to_x: "videoplayer.controls.bg";
                  relative: 1.0 0.0;
                  offset: -10 5;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
                  offset: -10 -55;
               }
               text {
                  font: FONT2;
                  size: FONT_SIZE_BIG;
                  min: 1 0;
                  ellipsis: -1;
                  text: "00::00";
               }
            }
         }
         part { name: "videoplayer.clock"; type: TEXT;
            scale: 1;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: FONT_COLOR_TOPBAR;
               color3: FONT_COLOR3_TOPBAR;
               rel1.to: "videoplayer.clock.spacer";
               rel2.to: "videoplayer.clock.spacer";
               text {
                  font: FONT2;
                  size: FONT_SIZE_BIG;
                  min: 1 0;
                  ellipsis: -1;
                  align: 1.0 0.5;
               }
            }
         }
         part { name: "videoplayer.controls.container1"; type: SPACER;
            description { state: "default" 0.0;
               rel1 {
                  to_x: "videoplayer.controls.poster";
                  to_y: "videoplayer.controls.bg";
                  relative: 1.0 0.0;
                  offset: 5 5;
               }
               rel2 {
                  to: "videoplayer.clock.spacer";
                  relative: 0.0  1.0;
               }
            }
         }
         part { name: "videoplayer.controls.btn_box"; type: BOX;  /* API */
            description { state: "default" 0.0;
               rel1.to: "videoplayer.controls.container1";
               rel2.to: "videoplayer.controls.container1";
               box {
                  layout: "horizontal";
                  padding: 2 0;
                  align: 0.0 0.5;
               }
            }
         }
         part { name: "videoplayer.controls.btn_box2"; type: BOX;  /* API */
            description { state: "default" 0.0;
               rel1.to: "videoplayer.controls.container1";
               rel2.to: "videoplayer.controls.container1";
               box {
                  layout: "horizontal";
                  padding: 2 0;
                  align: 1.0 0.5;
               }
            }
         }
         part { name: "videoplayer.controls.container2"; type: SPACER;
            description { state: "default" 0.0;
               rel1 {
                  to_x: "videoplayer.controls.poster";
                  to_y: "videoplayer.controls.bg";
                  relative: 1.0 0.0;
                  offset: 7 42;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
                  offset: -12 -15;
               }
            }
         }
         part { name: "videoplayer.controls.position"; type: TEXT;  /* API */
            mouse_events: 0;
            scale: 1;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               align: 0.0 0.5;
               fixed: 1 1;
               rel1 {
                  to: "videoplayer.controls.container2";
                  relative: 0.0 0.0;
               }
               rel2 {
                  to: "videoplayer.controls.container2";
                  relative: 0.0 1.0;
               }
               text {
                  text: "0:00:00";
                  font: FONT2;
                  size: FONT_SIZE;
                  align: 0.0 1.0;
                  min: 1 0;
                  ellipsis: -1;
               }
            }
         }
         part { name: "videoplayer.controls.position.spacer"; type: TEXT;
            inherit: "videoplayer.controls.position";
            /* This part is used as a spacer to avoid the slider
             * changes it's starting position while the numbers in
             * the position text changes */
            description { state: "default" 0.0;
               visible: 0;
               text.text: "0:00:00";
            }
         }
         part { name: "videoplayer.controls.slider"; type: GROUP;  /* API */
            source: "emc/slider/default";
            mouse_events: 1;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to: "videoplayer.controls.position.spacer";
                  relative: 1.0 0.0;
                  offset: 5 0;
               }
               rel2 {
                  to: "videoplayer.controls.length";
                  relative: 0.0 1.0;
                  offset: -6 -1;
               }
            }
         }
         part { name: "videoplayer.controls.length"; type: TEXT;  /* API */
            mouse_events: 0;
            scale: 1;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               align: 1.0 0.0;
               rel1 {
                  to: "videoplayer.controls.container2";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "videoplayer.controls.container2";
                  relative: 1.0 1.0;
               }
               text {
                  text: "0:00:00";
                  font: FONT2;
                  size: FONT_SIZE;
                  align: 1.0 1.0;
                  min: 1 0;
                  ellipsis: -1;
               }
            }
         }
         part { name: "videoplayer.controls.title"; type: TEXT;  /* API */
            mouse_events: 0;
            scale: 1;
            clip_to: "videoplayer.clip";
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               rel1 {
                  to_x: "videoplayer.controls.poster";
                  to_y: "videoplayer.controls.bg";
                  relative: 1.0 1.0;
                  offset: 5 -20;
               }
               rel2 {
                  to: "videoplayer.controls.bg";
                  relative: 1.0 1.0;
               }
               text {
                  text: "Title";
                  font: FONT2;
                  size: FONT_SIZE_BIGGER;
                  align: 0.0 0.0;
               }
            }
         }
         program { name: "videoplayer_show";  /* API */
            signal: "videoplayer,show";
            source: "emc";
            action: STATE_SET "visible" 0.00;
            transition: LINEAR 0.4;
            target: "videoplayer.clip";
            target: "videoplayer.events";
         }
         program { name: "videoplayer_hide";  /* API */
            signal: "videoplayer,hide";
            source: "emc";
            action: STATE_SET "default" 0.00;
            transition: LINEAR 0.4;
            target: "videoplayer.clip";
            target: "videoplayer.events";
         }
         program { name: "videoplayer_controls_show";  /* API */
            signal: "videoplayer,controls,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.4;
            target: "videoplayer.controls.bg";
            target: "videoplayer.controls.poster";
         }
         program { name: "videoplayer_controls_hide";  /* API */
            signal: "videoplayer,controls,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.4;
            target: "videoplayer.controls.bg";
            target: "videoplayer.controls.poster";
         }

/// slideshow
         part { name: "slideshow.clip"; type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               rel1.relative: 0.0 -1.0;
               rel2.relative: 1.0 0.0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 1.0;
            }
         }
         part { name: "slideshow.swallow"; type: SWALLOW;  /* API */
            clip_to: "slideshow.clip";
            description { state: "default" 0.0;
               rel1.to: "slideshow.clip";
               rel2.to: "slideshow.clip";
            }
         }
         part { name: "slideshow.controls.clip"; type: RECT;
            description { state: "default" 0.0;
               rel1.to: "slideshow.controls.shadow";
               rel2.to: "slideshow.controls.shadow";
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "slideshow.controls.shadow"; type: IMAGE;
            clip_to: "slideshow.controls.clip";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "slideshow.controls.bg";
               rel1.offset: -16 -16;
               rel2.to: "slideshow.controls.bg";
               rel2.offset: 16 6;
               image.normal: "frame_box_for_bot_shadow.png";
               image.border: 16 16 16 0;
            }
         }
         part { name: "slideshow.controls.bg"; type: IMAGE;
            clip_to: "slideshow.controls.clip";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to_x: "slideshow.controls.icon";
               rel1.to_y: "slideshow.controls.btn_box";
               rel2.to_x: "slideshow.controls.text";
               rel2.to_y: "slideshow.controls.btn_box";
               rel1.offset: -9 -5;
               rel2.offset: 12 0;
               image.normal: "frame_box_for_bot.png";
               image.border: 1 1 2 0;
            }
         }
         part { name: "slideshow.controls.btn_box"; type: BOX;  /* API */
            clip_to: "slideshow.controls.clip";
            scale: 1;
            description { state: "default" 0.0;
               box {
                  layout: "horizontal";
                  padding: 4 0;
                  min: 1 1;
               }
               rel1.relative: 0.5 1.0;
               rel2.relative: 0.5 1.0;
               align: 1.0 0.0;
               fixed: 1 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               align: 1.0 1.0;
            }
         }
         part { name: "slideshow.controls.icon"; type: IMAGE;
            clip_to: "slideshow.controls.clip";
            scale: 1;
            description { state: "default" 0.0;
               rel1 {
                  to: "slideshow.controls.btn_box";
                  relative: 0.0 0.0;
                  offset: -10 0;
               }
               rel2 {
                  to: "slideshow.controls.btn_box";
                  relative: 0.0 1.0;
                  offset: -10 0;
               }
               image.normal: "icon_photo.png";
               aspect: 1 1; aspect_preference: VERTICAL;
               align: 1.0 0.5;
            }
         }
         part { name: "slideshow.controls.text"; type: TEXT;  /* API */
            clip_to: "slideshow.controls.clip";
            scale: 1;
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR_NOSEL;
               color3: FONT_COLOR3_NOSEL;
               text {
                  text: "Image 1 of 13";
                  font: FONT2;
                  size: FONT_SIZE;
                  min: 1 0;
                  ellipsis: -1;
               }
               rel1 {
                  to: "slideshow.controls.btn_box";
                  relative: 1.0 0.0;
                  offset: 6 0;
               }
               rel2 {
                  to: "slideshow.controls.btn_box";
                  relative: 1.0 1.0;
                  offset: 6 0;
               }
               align: 0.0 0.5;
               fixed: 1 1;
            }
         }
         program { name: "slideshow_show";  /* API */
            signal: "slideshow,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "slideshow.clip";
            after: "slideshow_show_done";
         }
         program { name: "slideshow_show_done";
            action: SIGNAL_EMIT "emc,slideshow,show,done" "";  /* API */
         }
         program { name: "slideshow_hide";  /* API */
            signal: "slideshow,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.5;
            target: "slideshow.clip";
            after: "slideshow_hide_done";
         }
         program { name: "slideshow_hide_done";
            action: SIGNAL_EMIT "emc,slideshow,hide,done" "";  /* API */
         }
         program { name: "slideshow_controls_show";  /* API */
            signal: "slideshow,controls,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.3;
            target: "slideshow.controls.btn_box";
            target: "slideshow.controls.clip";
         }
         program { name: "slideshow_controls_hide";  /* API */
            signal: "slideshow,controls,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.3;
            target: "slideshow.controls.btn_box";
            target: "slideshow.controls.clip";
         }

/// minipos
         part { name: "minipos.bg.shadow"; type: IMAGE;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               rel1.to: "minipos.bg";
               rel1.offset: -20 0;
               rel2.to: "minipos.bg";
               rel2.offset: 20 20;
               image.normal: "frame_box_for_top_shadow.png";
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "minipos.bg"; type: IMAGE;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               FIXED_SIZE(500, 40)
               align: 0.5 1.0;
               rel2.relative: 1.0 0.0;
               image.normal: "frame_box_for_top.png";
               image.border: 1 1 0 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               align: 0.5 0.0;
            }
         }
         part { name: "minipos.icon"; type: IMAGE;
            description { state: "default" 0.0;
               aspect: 1.0 1.0;
               aspect_preference: VERTICAL;
               align: 0.0 0.5;
               image.normal: "icon_play.png";
               color: 255 255 255 200;
               rel1 {
                  to: "minipos.bg";
                  offset: 5 0;
               }
               rel2 {
                  to: "minipos.bg";
               }
            }
            description { state: "play" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "pause" 0.0;
               inherit: "default" 0.0;
               image.normal: "icon_pause.png";
            }
         }
         part { name: "minipos.position"; type: TEXT;  /* API */
            mouse_events: 0;
            scale: 1;
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR_NOSEL;
               color3: FONT_COLOR3_NOSEL;
               align: 0.0 0.5;
               fixed: 1 1;
               rel1 {
                  to_x: "minipos.icon";
                  to_y: "minipos.bg";
                  relative: 1.0 0.0;
                  offset: 0 0;
               }
               rel2 {
                  to: "minipos.bg";
                  relative: 0.0 1.0;
               }
               text {
                  text: "0:00:00";
                  font: FONT2;
                  size: FONT_SIZE;
                  min: 1 0;
                  ellipsis: -1;
               }
            }
         }
         part { name: "minipos.position.spacer"; type: TEXT;
            inherit: "minipos.position";
            description { state: "default" 0.0;
               visible: 0;
               text.text: "0:00:00";
            }
         }
         part { name: "minipos.slider"; type: GROUP;  /* API */
            source: "emc/slider/default";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to_x: "minipos.position.spacer";
                  to_y: "minipos.bg";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to_x: "minipos.length.spacer";
                  to_y: "minipos.bg";
                  relative: 0.0 1.0;
               }
            }
         }
         part { name: "minipos.length"; type: TEXT;  /* API */
            mouse_events: 0;
            scale: 1;
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               color: FONT_COLOR_NOSEL;
               color3: FONT_COLOR3_NOSEL;
               align: 1.0 0.5;
               fixed: 1 1;
               rel1 {
                  to: "minipos.bg";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "minipos.bg";
                  offset: -11 -1;
               }
               text {
                  text: "0:00:00";
                  font: FONT2;
                  size: FONT_SIZE;
                  min: 1 0;
                  ellipsis: -1;
               }
            }
         }
         part { name: "minipos.length.spacer"; type: TEXT;
            inherit: "minipos.length";
            description { state: "default" 0.0;
               visible: 0;
               text.text: "0:00:00";
            }
         }
         program { name: "minipos_show";  /* API */
            signal: "minipos,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.3;
            target: "minipos.bg";
            target: "minipos.bg.shadow";
         }
         program { name: "minipos_hide";  /* API */
            signal: "minipos,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.3;
            target: "minipos.bg";
            target: "minipos.bg.shadow";
         }
         program { name: "minipos_set_play";  /* API */
            signal: "minipos,play,set";
            source: "emc";
            action: STATE_SET "play" 0.0;
            target: "minipos.icon";
         }
         program { name: "minipos_set_pause";  /* API */
            signal: "minipos,pause,set";
            source: "emc";
            action: STATE_SET "pause" 0.0;
            target: "minipos.icon";
         }

/// volume
         part { name: "volume.bg.shadow"; type: IMAGE;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               rel1.to: "volume.bg";
               rel1.offset: -20 -20;
               rel2.to: "volume.bg";
               rel2.offset: 20 -1;
               image.normal: "frame_box_for_bot_shadow.png";
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "volume.bg"; type: IMAGE;
            mouse_events: 1;
            repeat_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               FIXED_SIZE(400, 40)
               align: 0.5 0.0;
               rel1.relative: 0.0 1.0;
               image.normal: "frame_box_for_bot.png";
               image.border: 1 1 2 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               align: 0.5 1.0;
            }
         }
         part { name: "volume.slider"; type: GROUP;  /* API */
            source: "emc/slider/default";
            mouse_events: 1;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to_y: "volume.bg";
                  to_x: "volume.icon";
                  relative: 1.0 0.0;
                  offset: 8 0;
               }
               rel2 {
                  to: "volume.bg";
                  offset: -12 0;
               }
            }
         }
         part { name: "volume.icon"; type: IMAGE;
            description { state: "default" 0.0;
               image.normal: "volume.png";
               align: 0.0 0.5;
               aspect: 1 1;
               aspect_preference: VERTICAL;
               rel1 {
                  to: "volume.bg";
                  // relative: 0.0 0.0;
                  offset: 8 0;
               }
               rel2 {
                  to: "volume.bg";
                  // relative: 1.0 1.0;
                  // offset: -1 -3;
               }
            }
            description { state: "muted" 0.0;
               inherit: "default" 0.0;
               image.normal: "volume_muted.png";
            }
         }
         program { name: "volume_show";  /* API */
            signal: "volume,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.3;
            target: "volume.bg";
            target: "volume.bg.shadow";
         }
         program { name: "volume_hide";  /* API */
            signal: "volume,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.3;
            target: "volume.bg";
            target: "volume.bg.shadow";
         }
         program { name: "volume_mute_on";  /* API */
            signal: "volume,mute,on";
            source: "emc";
            action: STATE_SET "muted" 0.0;
            target: "volume.icon";
         }
         program { name: "volume_mute_off";  /* API */
            signal: "volume,mute,off";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "volume.icon";
         }
         program { name: "toggle_mute";  /* API */
            signal: "mouse,down,1";
            source: "volume.icon";
            action: SIGNAL_EMIT "emc,mute,toggle" "";
         }

/// dialog & notify container boxes
         part { name: "dialogs.box.stack"; type: BOX;  /* API */
            description { state: "default" 0.0;
               box {
                  layout: "stack";
                  min: 0 0;
                  // layout: "horizontal"; # funny...with more than one dialog
               }
            }
         }
         part { name: "notify.box.stack"; type: BOX;  /* API */
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 0.0;
               fixed: 1 1;
               rel1 {
                  relative: 1.0 1.0;
                  to_y: "topbar.list.spacer";
                  offset: 25 25;
               }
               rel2.offset: -25 0;
               box {
                  layout: "vertical";
                  align: 1.0 0.0;
                  padding: 6 6;
                  min: 1 0;
               }
            }
         }

/// debug label for embryo scripting
         #if DEBUG_ENABLE
         part { name: "embryo_dbg"; type: TEXT;
            description { state: "default" 0.0;
               color: FONT_COLOR;
               text {
                  text: "EMBRYO DEBUG ENABLED";
                  font: FONT;
                  size: FONT_SIZE;
                  align: 1.0 1.0;
               }
            }
         }
         #endif
      }
   }

/// dialogs
   group { name: "emc/dialog/panel";  /* API */
      images {
         image: "dialog_bg.png" COMP;
         image: "dialog_header.png" COMP;
         image: "dialog_header_shadow.png" COMP;
         image: "roundclose.png" COMP;
      }
      parts {
         part { name: "clipper"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "base"; type: IMAGE;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.relative: 0.1 0.1;
               rel2.relative: 0.9 0.9;
               image {
                  normal: "dialog_bg.png";
                  border: 4 4 4 5;
               }
            }
         }
         part { name: "emc.swallow.content"; type: SWALLOW;  /* API */
            clip_to: "clipper";
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to: "title_bg";
                  relative: 0.0 1.0;
                  offset: 10 5;
               }
               rel2 {
                  to_y: "emc.box.buttons";
                  to_x: "base";
                  relative: 1.0 0.0;
                  offset: -10 -10;
               }
            }
         }
         part { name: "title_bg"; type: IMAGE;
            clip_to: "clipper";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 0 0;
               align: 0.5 0.0;
               rel1 {
                  to: "base";
                  offset: 3 2;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -4 -1;
               }
               color: 255 255 255 200;
               image.normal: "dialog_header.png";
               image.border: 0 0 2 2;
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: 52 52;
               visible: 1;
            }
         }
         part { name: "title_shadow"; type: IMAGE;
            clip_to: "clipper";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 26 26;
               align: 0.5 0.0;
               visible: 0;
               rel1 {
                  to: "title_bg";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "title_bg";
               }
               image.normal: "dialog_header_shadow.png";
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "emc.text.title"; type: TEXTBLOCK;  /* API */
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "title_bg";
               rel2.to: "title_bg";
               visible: 0;
               text {
                  style: "epymc_dialog_title_style";
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "close"; type: IMAGE;
            clip_to: "clipper";
            scale: 1;
            mouse_events: 1;
            description { state: "default" 0.0;
               FIXED_SIZE(60, 60)
               color: 255 255 255 140;
               image.normal: "roundclose.png";
               rel1 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
            }
            description { state: "bigger" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 240;
            }
         }
         part { name: "emc.box.buttons"; type: BOX;  /* API */
            clip_to: "clipper";
            description { state: "default" 0.0;
               fixed: 1 1;
               box {
                  layout: "horizontal";
                  padding: 0 4;
                  min: 0 1; // this doesn't work...it should
               }
               rel1 {
                  to: "base";
                  relative: 0.0 1.0;
                  offset: 8 8;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 1.0;
                  offset: -9 -15;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1.offset: 0 -45;
            }
         }
      }
      programs {
         program { name: "close_mouse_in";
            signal: "mouse,in";
            source: "close";
            action: STATE_SET "bigger" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_out";
            signal: "mouse,out";
            source: "close";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_click";  /* API */
            signal: "mouse,down,1";
            source: "close";
            action: SIGNAL_EMIT "emc,dialog,close" "";
         }
         program { name: "show";  /* API */
            signal: "emc,dialog,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "show_done";
         }
         program { name: "show_done";  /* API */
            action: SIGNAL_EMIT "emc,dialog,show,done" "";
         }
         program { name: "hide";  /* API */
            signal: "emc,dialog,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "hide_done";
         }
         program { name: "hide_done";  /* API */
            action: SIGNAL_EMIT "emc,dialog,hide,done" "";
         }
         program { name: "show_title";  /* API */
            signal: "emc,dialog,title,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.text.title";
            target: "title_bg";
            target: "title_shadow";
         }
         program { name: "hide_title";  /* API */
            signal: "emc,dialog,title,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.text.title";
            target: "title_bg";
            target: "title_shadow";
         }
         program { name: "show_buttons";  /* API */
            signal: "emc,dialog,buttons,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "hide_buttons";  /* API */
            signal: "emc,dialog,buttons,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.box.buttons";
         }
      }
   }
   group { name: "emc/dialog/minimal";  /* API */
      images {
         image: "dialog_bg.png" COMP;
         image: "dialog_header.png" COMP;
         image: "dialog_header_shadow.png" COMP;
         image: "bulb-0.png" COMP;
         image: "warning.png" COMP;
         image: "error.png" COMP;
      }
      parts {
         part { name: "clipper"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "base"; type: IMAGE;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1 {
                  to: "title_bg";
                  offset: -3 -2;
               }
               rel2 {
                  to_x: "title_bg";
                  to_y: "emc.box.buttons";
                  offset: 2 0;
               }
               image {
                  normal: "dialog_bg.png";
                  border: 4 4 4 5;
               }
            }
         }
         part { name: "tag_image"; type: IMAGE;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               rel1.relative: 0.0 0.4;
               aspect: 1 1;
               aspect_preference: BOTH;
               align: 0.95 0.9;
               visible: 0;
            }
            description { state: "info" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
            description { state: "warning" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "warning.png";
               color: 170 170 170 170;
            }
            description { state: "error" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "error.png";
            }
            description { state: "yesno" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
            description { state: "cancel" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               image.normal: "bulb-0.png";
            }
         }
         part { name: "emc.swallow.content"; type: SWALLOW;  /* API */
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 500 200;
               max: 500 200;
            }
         }
         part { name: "title_bg"; type: IMAGE;
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 52 52;
               align: 0.5 1.0;
               rel1 {
                  to: "emc.swallow.content";
                  offset: -10 -5;
               }
               rel2 {
                  to: "emc.swallow.content";
                  relative: 1.0 0.0;
                  offset: 5 -6;
               }
               color: 255 255 255 200;
               image.normal: "dialog_header.png";
               image.border: 0 0 2 2;
            }
         }
         part { name: "title_shadow"; type: IMAGE;
            clip_to: "clipper";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 26 26;
               align: 0.5 0.0;
               rel1 {
                  to: "title_bg";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "title_bg";
               }
               image.normal: "dialog_header_shadow.png";
            }
         }
         part { name: "emc.text.title"; type: TEXTBLOCK;  /* API */
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "title_bg";
               rel2.to: "title_bg";
               text {
                  style: "epymc_dialog_title_style";
               }
            }
         }
         part { name: "close"; type: IMAGE;
            clip_to: "clipper";
            mouse_events: 1;
            scale: 1;
            description { state: "default" 0.0;
               FIXED_SIZE(60, 60)
               color: 255 255 255 140;
               image.normal: "roundclose.png";
               rel1 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
               rel2 {
                  to: "base";
                  relative: 1.0 0.0;
                  offset: -9 10;
               }
            }
            description { state: "bigger" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 240;
            }
         }
         part { name: "emc.dialog.progress"; type: EXTERNAL;  /* API */
            clip_to: "clipper";
            source: "elm/progressbar";
            description { state: "default" 0.0;
               fixed: 1 1;
               visible: 0;
               align: 0.5 1.0;
               rel1 {
                  to: "emc.swallow.content";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "emc.swallow.content";
                  relative: 1.0 1.0;
                  offset: 0 1;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               rel2.offset: 0 40;
            }
         }
         part { name: "emc.box.buttons"; type: BOX;  /* API */
            clip_to: "clipper";
            description { state: "default" 0.0;
               fixed: 1 1;
               box {
                  layout: "horizontal";
                  padding: 0 4;
                  align: 0.5 0.5;
                  min: 0 1; // this doesn't work...it should
               }
               rel1 {
                  to: "emc.dialog.progress";
                  relative: 0.0 1.0;
               }
               rel2 {
                  to: "emc.dialog.progress";
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel2.offset: 0 50;
            }
         }
      }
      programs {
         program { name: "close_mouse_in";
            signal: "mouse,in";
            source: "close";
            action: STATE_SET "bigger" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_out";
            signal: "mouse,out";
            source: "close";
            action: STATE_SET "default" 0.0;
            transition: LINEAR 0.15 CURRENT;
            target: "close";
         }
         program { name: "close_mouse_click";  /* API */
            signal: "mouse,down,1";
            source: "close";
            action: SIGNAL_EMIT "emc,dialog,close" "";
         }
         program { name: "show";  /* API */
            signal: "emc,dialog,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "show_done";
         }
         program { name: "show_done";  /* API */
            action: SIGNAL_EMIT "emc,dialog,show,done" "";
         }
         program { name: "hide";  /* API */
            signal: "emc,dialog,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "hide_done";
         }
         program { name: "hide_done";  /* API */
            action: SIGNAL_EMIT "emc,dialog,hide,done" "";
         }
         program { name: "show_buttons";  /* API */
            signal: "emc,dialog,buttons,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "hide_buttons";  /* API */
            signal: "emc,dialog,buttons,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            target: "emc.box.buttons";
         }
         program { name: "set_info";  /* API */
            signal: "emc,dialog,info,set";
            source: "emc";
            action: STATE_SET "info" 0.0;
            target: "tag_image";
         }
         program { name: "set_warning";  /* API */
            signal: "emc,dialog,warning,set";
            source: "emc";
            action: STATE_SET "warning" 0.0;
            target: "tag_image";
         }
         program { name: "set_error";  /* API */
            signal: "emc,dialog,error,set";
            source: "emc";
            action: STATE_SET "error" 0.0;
            target: "tag_image";
         }
         program { name: "set_yesno";  /* API */
            signal: "emc,dialog,yesno,set";
            source: "emc";
            action: STATE_SET "yesno" 0.0;
            target: "tag_image";
         }
         program { name: "set_cancel";  /* API */
            signal: "emc,dialog,cancel,set";
            source: "emc";
            action: STATE_SET "cancel" 0.0;
            target: "tag_image";
         }
         program { name: "set_progress_visible";  /* API */
            signal: "emc,dialog,progress,set";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            target: "emc.dialog.progress";
         }
      }
   }
   group { name: "emc/dialog/buffering";  /* API */
      parts {
         part { name: "clipper"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "base"; type: RECT;
            clip_to: "clipper";
            scale: 1;
            description { state: "default" 0.0;
               rel1.relative: 0.2 0.8;
               rel2.relative: 0.8 0.8;
               min: 100 65;
               color: 200 200 200 10;
            }
         }
         part { name: "emc.text.title"; type: TEXT;  /* API */
            clip_to: "clipper";
            scale: 1;
            effect: FAR_SHADOW;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               color: FONT_COLOR;
               color3: FONT_COLOR3;
               text {
                  font: FONT2;
                  size: FONT_SIZE_BIG;
                  align: 0.0 0.0;
               }
            }
         }
         part { name: "emc.dialog.progress"; type: EXTERNAL;  /* API */
            clip_to: "clipper";
            source: "elm/progressbar";
            description { state: "default" 0.0;
               align: 0.5 1.0;
               rel1 {
                  to: "base";
                  relative: 0.0 0.5;
               }
               rel2 {
                  to: "base";
               }
               // params {
                  // string: "style" "buffering";
               // }
            }
         }
      }
      programs {
         program { name: "show";  /* API */
            signal: "emc,dialog,show";
            source: "emc";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "show_done";
         }
         program { name: "show_done";  /* API */
            action: SIGNAL_EMIT "emc,dialog,show,done" "";
         }
         program { name: "hide";  /* API */
            signal: "emc,dialog,hide";
            source: "emc";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.5;
            target: "clipper";
            after: "hide_done";
         }
         program { name: "hide_done";  /* API */
            action: SIGNAL_EMIT "emc,dialog,hide,done" "";
         }
      }
   }

/// notify items
   group { name: "emc/notify/default";  /* API */
      min: 250 100;
      parts {
         part { name: "bg"; type: IMAGE;
            scale: 1;
            description { state: "default" 0.0;
               image.normal: "frame3.png";
               image.border: 5 5 5 5;
               rel1 {
                  to: "emc.swallow.icon";
                  offset: -6 0;
               }
            }
         }
         part { name: "bg.shadow"; type: IMAGE;
            scale: 1;
            description { state: "default" 0.0;
               image {
                  normal: "left_shadow.png";
                  border: 12 4 7 7;
                  middle: NONE;
               }
               rel1 {
                  to: "bg";
                  offset: -12 -7;
               }
               rel2 {
                  to: "bg";
                  offset: -1 6;
               }
            }
         }
         part { name: "emc.swallow.icon"; type: SWALLOW;  /* API */
            scale: 1;
            description { state: "default" 0.0;
               ASPECT_FILL(1.0)
               align: 1.0 0.5;
               rel1 {
                  to: "emc.text.caption";
                  relative: 0.0 0.0;
               }
               rel2 {
                  to: "emc.text.caption";
                  relative: 0.0 1.0;
               }
            }
         }
         part { name: "emc.text.caption"; type: TEXTBLOCK; /* API */
            scale: 1;
            description { state: "default" 0.0;
               rel1.offset: 0 5;
               rel2.offset: -11 -1;
               align: 1.0 0.0;
               text {
                  min: 1 1;
                  ellipsis: -1;
                  style: "epymc_notify_style";
                  align: 0.0 0.0;
               }
            }
         }
      }
   }

/// sliders
   group { name: "emc/slider/default";  /* API */
      images {
         image: "slider_run_base_horiz.png" COMP;
         image: "slider_glow_run.png" COMP;
         image: "slider_run_bevel_horiz.png" COMP;
         image: "knob_sz_24.png" COMP;
      }
      parts {
         part { name: "confine"; type: SPACER;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: 40 24;
               max: -1 24;
            }
         }
         part { name: "base"; type: IMAGE;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1 {
                  to: "confine";
                  offset: 3 0;
               }
               rel2 {
                  to: "confine";
                  offset: -4 -1;
               }
               image.normal: "slider_run_base_horiz.png";
               image.border: 4 4 0 0;
               fill.smooth: 0;
               min: 8 5;
               max: -1 5;
               fixed: 0 1;
            }
         }
         part { name: "glow"; type: IMAGE;
            mouse_events: 0;
            description { state: "default" 0.0;
               image.normal: "slider_glow_run.png";
               rel1.offset: 1 1;
               rel1.to: "base";
               rel2.relative: 0.5 1.0;
               rel2.offset: -1 -2;
               rel2.to_x: "dragable1";
               rel2.to_y: "base";
               image.border: 0 4 0 0;
            }
         }
         part { name: "bevel"; type: IMAGE;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               image.normal: "slider_run_bevel_horiz.png";
               image.border: 5 5 0 0;
               fill.smooth: 0;
            }
         }
         part { name: "dragable1";  /* API */
            mouse_events: 1;
            repeat_events: 1;
            scale: 1;
            
            dragable {
               x: 1 1 0;
               y: 0 0 0;
               confine: "confine";
            }
            description { state: "default" 0.0;
               image.normal: "knob_sz_24.png";
               min: 24 24;
               max: 24 24;
               fixed: 1 1;
            }
         }
      }
   }

/// EmcImage special styles
   group { name: "emc/image/bd";  /* API */
      images {
         image: "image_bd_cover_blank.png" COMP;
      }
      parts {
         part { name: "image"; type: IMAGE;
            description { state: "default" 0.0;
               fixed: 1 1;
               image.normal: "image_bd_cover_blank.png";
               aspect_preference: SOURCE;
            }
         }
         part { name: "emc.text"; type: TEXTBLOCK;  /* API */
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "image";
               rel2.to: "image";
               rel1.relative: 0.03 0.08;
               rel2.relative: 0.97 0.98;
               text.style: "epymc_special_image_style";
            }
         }
      }
   }
   group { name: "emc/image/folder";  /* API */
      images {
         image: "image_folder_vert.png" COMP;
      }
      parts {
         part { name: "image"; type: IMAGE;
            description { state: "default" 0.0;
               fixed: 1 1;
               image.normal: "image_folder_vert.png";
               aspect_preference: SOURCE;
            }
         }
         part { name: "emc.text"; type: TEXTBLOCK;  /* API */
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "image";
               rel2.to: "image";
               rel1.relative: 0.03 0.03;
               rel2.relative: 0.90 0.97;
               text.style: "epymc_special_image_style";
            }
         }
      }
   }
   group { name: "emc/image/icon";  /* API */
      parts {
         part { name: "bg"; type: RECT;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: 0 0 0 150;
            }
         }
         part { name: "emc.icon"; type: SWALLOW;  /* API */
            description { state: "default" 0.0;
               fixed: 1 1;
               rel2.relative: 1.0 0.7;
            }
         }
         part { name: "text_spacer"; type: TEXTBLOCK;
            // a trick to force the real text to have space for 2 lines
            description { state: "default" 0.0;
               fixed: 1 1;
               visible: 0;
               rel1.relative: 0.0 1.0;
               rel2.relative: 1.0 1.0;
               rel1.offset: 4 -1;
               rel2.offset: -5 -2;
               align: 0.0 1.0;
               text {
                  style: "epymc_special_icon_style";
                  text: "S<br>S";
                  min: 0 1;
               }
            }
         }
         part { name: "emc.text"; type: TEXTBLOCK;  /* API */
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "text_spacer";
               rel2.to: "text_spacer";
               text.style: "epymc_special_icon_style";
            }
         }
         part { name: "emc.text2"; type: TEXTBLOCK;  /* API */
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.offset: 4 0;
               rel2.offset: -5 -1;
               text {
                  style: "epymc_special_icon_style2";
                  align: 0.0 0.0;
               }
            }
         }
      }
   }
   group { name: "emc/image/thumbnailing";  /* API */
      alias: "emc/image/downloading";  /* API */
      images {
         image: "knob.png" COMP;
         image: "knob_glow.png" COMP;
      }
      parts {
         part { name: "bg"; type: RECT;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: 0 0 0 150;
            }
         }
         part { name: "knob"; type: IMAGE;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               image.normal: "knob.png";
               FIXED_SIZE(40, 40)
            }
         }
         part { name: "knob_spinner"; type: IMAGE;
            mouse_events: 0;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "knob";
               rel2.to: "knob";
               image.normal: "knob_glow.png";
               map.on: 1;
               map.smooth: 1;
               map.rotation.center: "knob";
            }
            description { state: "spin" 0.0;
               inherit: "default" 0.0;
               map.rotation.z: 360;
            }
         }
         program { name: "init";
            signal: "load"; source: "";
            after: "spin";
         }
         program { name: "spin";
            action: STATE_SET "spin" 0.0;
            transition: LINEAR 1.0;
            target: "knob_spinner";
            after: "spin2";
         }
         program { name: "spin2";
            action: STATE_SET "default" 0.0;
            target: "knob_spinner";
            after: "spin";
         }
      }
   }
   group { name: "emc/image/vthumb";  /* API */
      // TODO complete this style...as soon as emotion will be able to use frames...
      parts {
         part { name: "bg"; type: RECT;
            description { state: "default" 0.0;
               aspect: 1 1;
               aspect_preference: BOTH;
            }
         }
         part { name: "emc.swallow"; type: SWALLOW; /* API */
            description { state: "default" 0.0;
               
            }
         }
         part { name: "bg2"; type: RECT;
            description { state: "default" 0.0;
               aspect: 1 1;
               aspect_preference: BOTH;
            }
         }
      }
   }
   group { name: "emc/image/error";  /* API */
      images.image: "error.png" COMP;
      parts {
         part { name: "bg"; type: RECT;
            description { state: "default" 0.0;
               fixed: 1 1;
               color: 0 0 0 150;
            }
         }
         part { name: "img"; type: IMAGE;
            description { state: "default" 0.0;
               image.normal: "error.png";
               aspect_preference: SOURCE;
            }
         }
      }
   }
   group { name: "emc/image/null";  /* API */
      parts {
         part { name: "null"; type: RECT;
            description { state: "default" 0.0;
               fixed: 1 1;
               visible: 0;
            }
         }
      }
   }
}

